schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Address
  @join__type(graph: PROFILING)
{
  id: ID!
  formattedAddress: String!
  Location(where: LocationWhereInput, orderBy: [LocationOrderByWithRelationInput!], cursor: LocationWhereUniqueInput, take: Int, skip: Int, distinct: [LocationScalarFieldEnum!]): [Location!]!
  AddressComponents(where: AddressComponentWhereInput, orderBy: [AddressComponentOrderByWithRelationInput!], cursor: AddressComponentWhereUniqueInput, take: Int, skip: Int, distinct: [AddressComponentScalarFieldEnum!]): [AddressComponent!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AddressComponent
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]!
  Address: Address
  addressId: String
}

input AddressComponentAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input AddressComponentCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  addressId: SortOrder
}

input AddressComponentCreateInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
  Address: AddressCreateNestedOneWithoutAddressComponentsInput
}

input AddressComponentCreateManyAddressInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentCreateManyAddressInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [AddressComponentCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input AddressComponentCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
  addressId: String
}

input AddressComponentCreateNestedManyWithoutAddressInput
  @join__type(graph: PROFILING)
{
  create: AddressComponentCreateWithoutAddressInput
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  connect: [AddressComponentWhereUniqueInput!]
}

input AddressComponentCreateOrConnectWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentCreatetypesInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input AddressComponentCreateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentListRelationFilter
  @join__type(graph: PROFILING)
{
  every: AddressComponentWhereInput
  some: AddressComponentWhereInput
  none: AddressComponentWhereInput
}

input AddressComponentMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  addressId: SortOrder
}

input AddressComponentMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  addressId: SortOrder
}

input AddressComponentOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input AddressComponentOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  addressId: SortOrder
  _count: AddressComponentCountOrderByAggregateInput
  _avg: AddressComponentAvgOrderByAggregateInput
  _max: AddressComponentMaxOrderByAggregateInput
  _min: AddressComponentMinOrderByAggregateInput
  _sum: AddressComponentSumOrderByAggregateInput
}

input AddressComponentOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  addressId: SortOrder
  Address: AddressOrderByWithRelationInput
}

enum AddressComponentScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index15 @join__enumValue(graph: PROFILING)
  long_name @join__enumValue(graph: PROFILING)
  short_name @join__enumValue(graph: PROFILING)
  types @join__enumValue(graph: PROFILING)
  addressId @join__enumValue(graph: PROFILING)
}

input AddressComponentScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressComponentScalarWhereInput!]
  OR: [AddressComponentScalarWhereInput!]
  NOT: [AddressComponentScalarWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  addressId: StringNullableFilter
}

input AddressComponentScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [AddressComponentScalarWhereWithAggregatesInput!]
  OR: [AddressComponentScalarWhereWithAggregatesInput!]
  NOT: [AddressComponentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  long_name: StringWithAggregatesFilter
  short_name: StringWithAggregatesFilter
  types: StringNullableListFilter
  addressId: StringNullableWithAggregatesFilter
}

input AddressComponentSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input AddressComponentUpdateInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
  Address: AddressUpdateOneWithoutAddressComponentsNestedInput
}

input AddressComponentUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateManyWithoutAddressNestedInput
  @join__type(graph: PROFILING)
{
  create: AddressComponentCreateWithoutAddressInput
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  upsert: [AddressComponentUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  set: [AddressComponentWhereUniqueInput!]
  disconnect: [AddressComponentWhereUniqueInput!]
  delete: [AddressComponentWhereUniqueInput!]
  connect: [AddressComponentWhereUniqueInput!]
  update: [AddressComponentUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [AddressComponentUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [AddressComponentScalarWhereInput!]
}

input AddressComponentUpdateManyWithWhereWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentScalarWhereInput!
  data: AddressComponentUpdateManyMutationInput!
}

input AddressComponentUpdatetypesInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input AddressComponentUpdateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  data: AddressComponentUpdateWithoutAddressInput!
}

input AddressComponentUpsertWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  update: AddressComponentUpdateWithoutAddressInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressComponentWhereInput!]
  OR: [AddressComponentWhereInput!]
  NOT: [AddressComponentWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  addressId: StringNullableFilter
  Address: AddressWhereInput
}

input AddressComponentWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

input AddressCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
  Location: LocationCreateNestedManyWithoutAddressInput
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
}

input AddressCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressCreateNestedOneWithoutAddressComponentsInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutAddressComponentsInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOrConnectWithoutAddressComponentsInput
  @join__type(graph: PROFILING)
{
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutAddressComponentsInput!
}

input AddressCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressCreateWithoutAddressComponentsInput
  @join__type(graph: PROFILING)
{
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
  Location: LocationCreateNestedManyWithoutAddressInput
}

input AddressCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
}

input AddressMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
}

input AddressOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Location: LocationOrderByRelationAggregateInput
  AddressComponents: AddressComponentOrderByRelationAggregateInput
}

input AddressRelationFilter
  @join__type(graph: PROFILING)
{
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  formattedAddress @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input AddressScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  formattedAddress: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input AddressUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
}

input AddressUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutAddressComponentsNestedInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutAddressComponentsInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  upsert: AddressUpsertWithoutAddressComponentsInput
  disconnect: Boolean
  delete: Boolean
  connect: AddressWhereUniqueInput
  update: AddressUpdateWithoutAddressComponentsInput
}

input AddressUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  upsert: AddressUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: AddressWhereUniqueInput
  update: AddressUpdateWithoutLocationInput
}

input AddressUpdateWithoutAddressComponentsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
}

input AddressUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
}

input AddressUpsertWithoutAddressComponentsInput
  @join__type(graph: PROFILING)
{
  update: AddressUpdateWithoutAddressComponentsInput!
  create: AddressCreateWithoutAddressComponentsInput!
}

input AddressUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: AddressUpdateWithoutLocationInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: StringFilter
  formattedAddress: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Location: LocationListRelationFilter
  AddressComponents: AddressComponentListRelationFilter
}

input AddressWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum AppType
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  BARFRIENDS @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  PETFRIENDS @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
}

type Area
  @join__type(graph: PROFILING)
{
  id: ID!
  City: City!
  State: State!
  Country: Country!
  cityId: String!
  stateId: String!
  countryId: String!
  ComingArea: ComingArea
  H3Index6VenueRecommendation: H3Index6VenueRecommendation
  Location: Location
  H3Index5VenueRecommendation: H3Index5VenueRecommendation
}

input AreaCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  cityId: SortOrder
  stateId: SortOrder
  countryId: SortOrder
}

input AreaCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateManyCityInput
  @join__type(graph: PROFILING)
{
  id: String
  stateId: String!
  countryId: String!
}

input AreaCreateManyCityInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [AreaCreateManyCityInput!]!
  skipDuplicates: Boolean
}

input AreaCreateManyCountryInput
  @join__type(graph: PROFILING)
{
  id: String
  cityId: String!
  stateId: String!
}

input AreaCreateManyCountryInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [AreaCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input AreaCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  cityId: String!
  stateId: String!
  countryId: String!
}

input AreaCreateManyStateInput
  @join__type(graph: PROFILING)
{
  id: String
  cityId: String!
  countryId: String!
}

input AreaCreateManyStateInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [AreaCreateManyStateInput!]!
  skipDuplicates: Boolean
}

input AreaCreateNestedManyWithoutCityInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutCityInput
  connectOrCreate: [AreaCreateOrConnectWithoutCityInput!]
  createMany: AreaCreateManyCityInputEnvelope
  connect: [AreaWhereUniqueInput!]
}

input AreaCreateNestedManyWithoutCountryInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutCountryInput
  connectOrCreate: [AreaCreateOrConnectWithoutCountryInput!]
  createMany: AreaCreateManyCountryInputEnvelope
  connect: [AreaWhereUniqueInput!]
}

input AreaCreateNestedManyWithoutStateInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutStateInput
  connectOrCreate: [AreaCreateOrConnectWithoutStateInput!]
  createMany: AreaCreateManyStateInputEnvelope
  connect: [AreaWhereUniqueInput!]
}

input AreaCreateNestedOneWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutComingAreaInput
  connectOrCreate: AreaCreateOrConnectWithoutComingAreaInput
  connect: AreaWhereUniqueInput
}

input AreaCreateNestedOneWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: AreaCreateOrConnectWithoutH3Index5VenueRecommendationInput
  connect: AreaWhereUniqueInput
}

input AreaCreateNestedOneWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: AreaCreateOrConnectWithoutH3Index6VenueRecommendationInput
  connect: AreaWhereUniqueInput
}

input AreaCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutLocationInput
  connectOrCreate: AreaCreateOrConnectWithoutLocationInput
  connect: AreaWhereUniqueInput
}

input AreaCreateOrConnectWithoutCityInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutCityInput!
}

input AreaCreateOrConnectWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutComingAreaInput!
}

input AreaCreateOrConnectWithoutCountryInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutCountryInput!
}

input AreaCreateOrConnectWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutH3Index5VenueRecommendationInput!
}

input AreaCreateOrConnectWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutH3Index6VenueRecommendationInput!
}

input AreaCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutLocationInput!
}

input AreaCreateOrConnectWithoutStateInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  create: AreaCreateWithoutStateInput!
}

input AreaCreateWithoutCityInput
  @join__type(graph: PROFILING)
{
  id: String
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutCountryInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  State: StateCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaCreateWithoutStateInput
  @join__type(graph: PROFILING)
{
  id: String
  City: CityCreateNestedOneWithoutAreaInput!
  Country: CountryCreateNestedOneWithoutAreaInput!
  ComingArea: ComingAreaCreateNestedOneWithoutAreaInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  Location: LocationCreateNestedOneWithoutAreaInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
}

input AreaListRelationFilter
  @join__type(graph: PROFILING)
{
  every: AreaWhereInput
  some: AreaWhereInput
  none: AreaWhereInput
}

input AreaMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  cityId: SortOrder
  stateId: SortOrder
  countryId: SortOrder
}

input AreaMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  cityId: SortOrder
  stateId: SortOrder
  countryId: SortOrder
}

input AreaOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input AreaOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  cityId: SortOrder
  stateId: SortOrder
  countryId: SortOrder
  _count: AreaCountOrderByAggregateInput
  _max: AreaMaxOrderByAggregateInput
  _min: AreaMinOrderByAggregateInput
}

input AreaOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  cityId: SortOrder
  stateId: SortOrder
  countryId: SortOrder
  City: CityOrderByWithRelationInput
  State: StateOrderByWithRelationInput
  Country: CountryOrderByWithRelationInput
  ComingArea: ComingAreaOrderByWithRelationInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationOrderByWithRelationInput
  Location: LocationOrderByWithRelationInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationOrderByWithRelationInput
}

input AreaRelationFilter
  @join__type(graph: PROFILING)
{
  is: AreaWhereInput
  isNot: AreaWhereInput
}

type AreaResponse
  @join__type(graph: PROFILING)
{
  Country: Country!
  State: State!
  City: City!
  Geometry: Coords!
}

enum AreaScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  cityId @join__enumValue(graph: PROFILING)
  stateId @join__enumValue(graph: PROFILING)
  countryId @join__enumValue(graph: PROFILING)
}

input AreaScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AreaScalarWhereInput!]
  OR: [AreaScalarWhereInput!]
  NOT: [AreaScalarWhereInput!]
  id: StringFilter
  cityId: StringFilter
  stateId: StringFilter
  countryId: StringFilter
}

input AreaScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [AreaScalarWhereWithAggregatesInput!]
  OR: [AreaScalarWhereWithAggregatesInput!]
  NOT: [AreaScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  cityId: StringWithAggregatesFilter
  stateId: StringWithAggregatesFilter
  countryId: StringWithAggregatesFilter
}

input AreaUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
}

input AreaUpdateManyWithoutCityNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutCityInput
  connectOrCreate: [AreaCreateOrConnectWithoutCityInput!]
  upsert: [AreaUpsertWithWhereUniqueWithoutCityInput!]
  createMany: AreaCreateManyCityInputEnvelope
  set: [AreaWhereUniqueInput!]
  disconnect: [AreaWhereUniqueInput!]
  delete: [AreaWhereUniqueInput!]
  connect: [AreaWhereUniqueInput!]
  update: [AreaUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [AreaUpdateManyWithWhereWithoutCityInput!]
  deleteMany: [AreaScalarWhereInput!]
}

input AreaUpdateManyWithoutCountryNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutCountryInput
  connectOrCreate: [AreaCreateOrConnectWithoutCountryInput!]
  upsert: [AreaUpsertWithWhereUniqueWithoutCountryInput!]
  createMany: AreaCreateManyCountryInputEnvelope
  set: [AreaWhereUniqueInput!]
  disconnect: [AreaWhereUniqueInput!]
  delete: [AreaWhereUniqueInput!]
  connect: [AreaWhereUniqueInput!]
  update: [AreaUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [AreaUpdateManyWithWhereWithoutCountryInput!]
  deleteMany: [AreaScalarWhereInput!]
}

input AreaUpdateManyWithoutStateNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutStateInput
  connectOrCreate: [AreaCreateOrConnectWithoutStateInput!]
  upsert: [AreaUpsertWithWhereUniqueWithoutStateInput!]
  createMany: AreaCreateManyStateInputEnvelope
  set: [AreaWhereUniqueInput!]
  disconnect: [AreaWhereUniqueInput!]
  delete: [AreaWhereUniqueInput!]
  connect: [AreaWhereUniqueInput!]
  update: [AreaUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [AreaUpdateManyWithWhereWithoutStateInput!]
  deleteMany: [AreaScalarWhereInput!]
}

input AreaUpdateManyWithWhereWithoutCityInput
  @join__type(graph: PROFILING)
{
  where: AreaScalarWhereInput!
  data: AreaUpdateManyMutationInput!
}

input AreaUpdateManyWithWhereWithoutCountryInput
  @join__type(graph: PROFILING)
{
  where: AreaScalarWhereInput!
  data: AreaUpdateManyMutationInput!
}

input AreaUpdateManyWithWhereWithoutStateInput
  @join__type(graph: PROFILING)
{
  where: AreaScalarWhereInput!
  data: AreaUpdateManyMutationInput!
}

input AreaUpdateOneWithoutComingAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutComingAreaInput
  connectOrCreate: AreaCreateOrConnectWithoutComingAreaInput
  upsert: AreaUpsertWithoutComingAreaInput
  disconnect: Boolean
  delete: Boolean
  connect: AreaWhereUniqueInput
  update: AreaUpdateWithoutComingAreaInput
}

input AreaUpdateOneWithoutH3Index5VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: AreaCreateOrConnectWithoutH3Index5VenueRecommendationInput
  upsert: AreaUpsertWithoutH3Index5VenueRecommendationInput
  disconnect: Boolean
  delete: Boolean
  connect: AreaWhereUniqueInput
  update: AreaUpdateWithoutH3Index5VenueRecommendationInput
}

input AreaUpdateOneWithoutH3Index6VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: AreaCreateOrConnectWithoutH3Index6VenueRecommendationInput
  upsert: AreaUpsertWithoutH3Index6VenueRecommendationInput
  disconnect: Boolean
  delete: Boolean
  connect: AreaWhereUniqueInput
  update: AreaUpdateWithoutH3Index6VenueRecommendationInput
}

input AreaUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING)
{
  create: AreaCreateWithoutLocationInput
  connectOrCreate: AreaCreateOrConnectWithoutLocationInput
  upsert: AreaUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: AreaWhereUniqueInput
  update: AreaUpdateWithoutLocationInput
}

input AreaUpdateWithoutCityInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutCountryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  State: StateUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithoutStateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  City: CityUpdateOneRequiredWithoutAreaNestedInput
  Country: CountryUpdateOneRequiredWithoutAreaNestedInput
  ComingArea: ComingAreaUpdateOneWithoutAreaNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  Location: LocationUpdateOneWithoutAreaNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
}

input AreaUpdateWithWhereUniqueWithoutCityInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  data: AreaUpdateWithoutCityInput!
}

input AreaUpdateWithWhereUniqueWithoutCountryInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  data: AreaUpdateWithoutCountryInput!
}

input AreaUpdateWithWhereUniqueWithoutStateInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  data: AreaUpdateWithoutStateInput!
}

input AreaUpsertWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  update: AreaUpdateWithoutComingAreaInput!
  create: AreaCreateWithoutComingAreaInput!
}

input AreaUpsertWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  update: AreaUpdateWithoutH3Index5VenueRecommendationInput!
  create: AreaCreateWithoutH3Index5VenueRecommendationInput!
}

input AreaUpsertWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  update: AreaUpdateWithoutH3Index6VenueRecommendationInput!
  create: AreaCreateWithoutH3Index6VenueRecommendationInput!
}

input AreaUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: AreaUpdateWithoutLocationInput!
  create: AreaCreateWithoutLocationInput!
}

input AreaUpsertWithWhereUniqueWithoutCityInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  update: AreaUpdateWithoutCityInput!
  create: AreaCreateWithoutCityInput!
}

input AreaUpsertWithWhereUniqueWithoutCountryInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  update: AreaUpdateWithoutCountryInput!
  create: AreaCreateWithoutCountryInput!
}

input AreaUpsertWithWhereUniqueWithoutStateInput
  @join__type(graph: PROFILING)
{
  where: AreaWhereUniqueInput!
  update: AreaUpdateWithoutStateInput!
  create: AreaCreateWithoutStateInput!
}

input AreaWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AreaWhereInput!]
  OR: [AreaWhereInput!]
  NOT: [AreaWhereInput!]
  id: StringFilter
  cityId: StringFilter
  stateId: StringFilter
  countryId: StringFilter
  City: CityWhereInput
  State: StateWhereInput
  Country: CountryWhereInput
  ComingArea: ComingAreaWhereInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationWhereInput
  Location: LocationWhereInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationWhereInput
}

input AreaWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type AuthenticationProvider
  @join__type(graph: PROFILING)
{
  id: ID!
  Credentials: Credentials
  phones(where: PhoneWhereInput, orderBy: [PhoneOrderByWithRelationInput!], cursor: PhoneWhereUniqueInput, take: Int, skip: Int, distinct: [PhoneScalarFieldEnum!]): [Phone!]!
  emails(where: EmailWhereInput, orderBy: [EmailOrderByWithRelationInput!], cursor: EmailWhereUniqueInput, take: Int, skip: Int, distinct: [EmailScalarFieldEnum!]): [Email!]!
  Password: Password
  codepassword: Code
}

input AuthenticationProviderCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input AuthenticationProviderCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
}

input AuthenticationProviderCreateNestedManyWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutEmailsInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
}

input AuthenticationProviderCreateNestedManyWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutPhonesInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
}

input AuthenticationProviderCreateNestedOneWithoutCodepasswordInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCodepasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateNestedOneWithoutPasswordInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutPasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
}

input AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderCreateOrConnectWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutEmailsInput!
}

input AuthenticationProviderCreateOrConnectWithoutPasswordInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutPasswordInput!
}

input AuthenticationProviderCreateOrConnectWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutPhonesInput!
}

input AuthenticationProviderCreateWithoutCodepasswordInput
  @join__type(graph: PROFILING)
{
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPasswordInput
  @join__type(graph: PROFILING)
{
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderListRelationFilter
  @join__type(graph: PROFILING)
{
  every: AuthenticationProviderWhereInput
  some: AuthenticationProviderWhereInput
  none: AuthenticationProviderWhereInput
}

input AuthenticationProviderMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input AuthenticationProviderMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input AuthenticationProviderOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input AuthenticationProviderOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  _count: AuthenticationProviderCountOrderByAggregateInput
  _max: AuthenticationProviderMaxOrderByAggregateInput
  _min: AuthenticationProviderMinOrderByAggregateInput
}

input AuthenticationProviderOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  phones: PhoneOrderByRelationAggregateInput
  emails: EmailOrderByRelationAggregateInput
  Password: PasswordOrderByWithRelationInput
  codepassword: CodeOrderByWithRelationInput
}

input AuthenticationProviderRelationFilter
  @join__type(graph: PROFILING)
{
  is: AuthenticationProviderWhereInput
  isNot: AuthenticationProviderWhereInput
}

enum AuthenticationProviderScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
}

input AuthenticationProviderScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AuthenticationProviderScalarWhereInput!]
  OR: [AuthenticationProviderScalarWhereInput!]
  NOT: [AuthenticationProviderScalarWhereInput!]
  id: StringFilter
}

input AuthenticationProviderScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  OR: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  NOT: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
}

input AuthenticationProviderUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
}

input AuthenticationProviderUpdateManyWithoutEmailsNestedInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutEmailsInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  delete: [AuthenticationProviderWhereUniqueInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
}

input AuthenticationProviderUpdateManyWithoutPhonesNestedInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutPhonesInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  delete: [AuthenticationProviderWhereUniqueInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
}

input AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderScalarWhereInput!
  data: AuthenticationProviderUpdateManyMutationInput!
}

input AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderScalarWhereInput!
  data: AuthenticationProviderUpdateManyMutationInput!
}

input AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutPasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  upsert: AuthenticationProviderUpsertWithoutPasswordInput
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutPasswordInput
}

input AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCodepasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  upsert: AuthenticationProviderUpsertWithoutCodepasswordInput
  disconnect: Boolean
  delete: Boolean
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutCodepasswordInput
}

input AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  upsert: AuthenticationProviderUpsertWithoutCredentialsInput
  disconnect: Boolean
  delete: Boolean
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutCredentialsInput
}

input AuthenticationProviderUpdateWithoutCodepasswordInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPasswordInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  data: AuthenticationProviderUpdateWithoutEmailsInput!
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  data: AuthenticationProviderUpdateWithoutPhonesInput!
}

input AuthenticationProviderUpsertWithoutCodepasswordInput
  @join__type(graph: PROFILING)
{
  update: AuthenticationProviderUpdateWithoutCodepasswordInput!
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
}

input AuthenticationProviderUpsertWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  update: AuthenticationProviderUpdateWithoutCredentialsInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderUpsertWithoutPasswordInput
  @join__type(graph: PROFILING)
{
  update: AuthenticationProviderUpdateWithoutPasswordInput!
  create: AuthenticationProviderCreateWithoutPasswordInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  update: AuthenticationProviderUpdateWithoutEmailsInput!
  create: AuthenticationProviderCreateWithoutEmailsInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  update: AuthenticationProviderUpdateWithoutPhonesInput!
  create: AuthenticationProviderCreateWithoutPhonesInput!
}

input AuthenticationProviderWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AuthenticationProviderWhereInput!]
  OR: [AuthenticationProviderWhereInput!]
  NOT: [AuthenticationProviderWhereInput!]
  id: StringFilter
  Credentials: CredentialsWhereInput
  phones: PhoneListRelationFilter
  emails: EmailListRelationFilter
  Password: PasswordWhereInput
  codepassword: CodeWhereInput
}

input AuthenticationProviderWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input Authenticators
  @join__type(graph: PROFILING)
{
  username: String
  EmailInput: EmailInput
  PhoneInput: PhoneInput
}

union AuthorizedProfilesResponseUnion
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "ProfilesResponse")
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
 = ProfilesResponse | ErrorProfiling

input AuthorizedProfilesWhereInput
  @join__type(graph: PROFILING)
{
  profiles: CustomProfileWhereInput!
}

input BoolFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: Boolean
}

input BoolFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

input BoolWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

type Category
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  Tags(where: TagWhereInput, orderBy: [TagOrderByWithRelationInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): [Tag!]!
}

input CategoryCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
}

input CategoryCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  Tags: TagCreateNestedManyWithoutCategoryInput
}

input CategoryCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
}

input CategoryCreateNestedOneWithoutTagsInput
  @join__type(graph: PROFILING)
{
  create: CategoryCreateWithoutTagsInput
  connectOrCreate: CategoryCreateOrConnectWithoutTagsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOrConnectWithoutTagsInput
  @join__type(graph: PROFILING)
{
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutTagsInput!
}

input CategoryCreateWithoutTagsInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
}

input CategoryMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
}

input CategoryMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
}

input CategoryOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
}

input CategoryOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  Tags: TagOrderByRelationAggregateInput
}

input CategoryRelationFilter
  @join__type(graph: PROFILING)
{
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
}

input CategoryScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input CategoryUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutCategoryNestedInput
}

input CategoryUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpdateOneWithoutTagsNestedInput
  @join__type(graph: PROFILING)
{
  create: CategoryCreateWithoutTagsInput
  connectOrCreate: CategoryCreateOrConnectWithoutTagsInput
  upsert: CategoryUpsertWithoutTagsInput
  disconnect: Boolean
  delete: Boolean
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutTagsInput
}

input CategoryUpdateWithoutTagsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutTagsInput
  @join__type(graph: PROFILING)
{
  update: CategoryUpdateWithoutTagsInput!
  create: CategoryCreateWithoutTagsInput!
}

input CategoryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  Tags: TagListRelationFilter
}

input CategoryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input ChatroomCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input ChatroomCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
}

input ChatroomCreateNestedManyWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  connect: [ChatroomWhereUniqueInput!]
}

input ChatroomCreateNestedOneWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  connect: ChatroomWhereUniqueInput
}

input ChatroomCreateOrConnectWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomCreateOrConnectWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomCreateWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  id: String
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomListRelationFilter
  @join__type(graph: PROFILING)
{
  every: ChatroomWhereInput
  some: ChatroomWhereInput
  none: ChatroomWhereInput
}

input ChatroomMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input ChatroomMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input ChatroomOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input ChatroomOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  _count: ChatroomCountOrderByAggregateInput
  _max: ChatroomMaxOrderByAggregateInput
  _min: ChatroomMinOrderByAggregateInput
}

input ChatroomOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profiles: ProfileOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
}

input ChatroomRelationFilter
  @join__type(graph: PROFILING)
{
  is: ChatroomWhereInput
  isNot: ChatroomWhereInput
}

enum ChatroomScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
}

input ChatroomScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ChatroomScalarWhereInput!]
  OR: [ChatroomScalarWhereInput!]
  NOT: [ChatroomScalarWhereInput!]
  id: StringFilter
}

input ChatroomScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ChatroomScalarWhereWithAggregatesInput!]
  OR: [ChatroomScalarWhereWithAggregatesInput!]
  NOT: [ChatroomScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
}

input ChatroomUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
}

input ChatroomUpdateManyWithoutProfilesNestedInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  upsert: [ChatroomUpsertWithWhereUniqueWithoutProfilesInput!]
  set: [ChatroomWhereUniqueInput!]
  disconnect: [ChatroomWhereUniqueInput!]
  delete: [ChatroomWhereUniqueInput!]
  connect: [ChatroomWhereUniqueInput!]
  update: [ChatroomUpdateWithWhereUniqueWithoutProfilesInput!]
  updateMany: [ChatroomUpdateManyWithWhereWithoutProfilesInput!]
  deleteMany: [ChatroomScalarWhereInput!]
}

input ChatroomUpdateManyWithWhereWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomScalarWhereInput!
  data: ChatroomUpdateManyMutationInput!
}

input ChatroomUpdateOneWithoutMessagesNestedInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  upsert: ChatroomUpsertWithoutMessagesInput
  disconnect: Boolean
  delete: Boolean
  connect: ChatroomWhereUniqueInput
  update: ChatroomUpdateWithoutMessagesInput
}

input ChatroomUpdateWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithWhereUniqueWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  data: ChatroomUpdateWithoutProfilesInput!
}

input ChatroomUpsertWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  update: ChatroomUpdateWithoutMessagesInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomUpsertWithWhereUniqueWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  update: ChatroomUpdateWithoutProfilesInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ChatroomWhereInput!]
  OR: [ChatroomWhereInput!]
  NOT: [ChatroomWhereInput!]
  id: StringFilter
  profiles: ProfileListRelationFilter
  messages: MessageListRelationFilter
}

input ChatroomWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type City
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  Geometry: Geometry!
  geometryId: Int!
  Area(where: AreaWhereInput, orderBy: [AreaOrderByWithRelationInput!], cursor: AreaWhereUniqueInput, take: Int, skip: Int, distinct: [AreaScalarFieldEnum!]): [Area!]!
}

input CityAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input CityCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  geometryId: SortOrder
}

input CityCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  Geometry: GeometryCreateNestedOneWithoutCityInput!
  Area: AreaCreateNestedManyWithoutCityInput
}

input CityCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  geometryId: Int!
}

input CityCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: CityCreateWithoutAreaInput
  connectOrCreate: CityCreateOrConnectWithoutAreaInput
  connect: CityWhereUniqueInput
}

input CityCreateNestedOneWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  create: CityCreateWithoutGeometryInput
  connectOrCreate: CityCreateOrConnectWithoutGeometryInput
  connect: CityWhereUniqueInput
}

input CityCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: CityWhereUniqueInput!
  create: CityCreateWithoutAreaInput!
}

input CityCreateOrConnectWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  where: CityWhereUniqueInput!
  create: CityCreateWithoutGeometryInput!
}

input CityCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  Geometry: GeometryCreateNestedOneWithoutCityInput!
}

input CityCreateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  Area: AreaCreateNestedManyWithoutCityInput
}

input CityMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  geometryId: SortOrder
}

input CityMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  geometryId: SortOrder
}

input CityOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  geometryId: SortOrder
  _count: CityCountOrderByAggregateInput
  _avg: CityAvgOrderByAggregateInput
  _max: CityMaxOrderByAggregateInput
  _min: CityMinOrderByAggregateInput
  _sum: CitySumOrderByAggregateInput
}

input CityOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  geometryId: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  Area: AreaOrderByRelationAggregateInput
}

input CityRelationFilter
  @join__type(graph: PROFILING)
{
  is: CityWhereInput
  isNot: CityWhereInput
}

type CityResponseObject
  @join__type(graph: PROFILING)
{
  name: String!
  stateCode: String!
  countryCode: String!
  latitude: String
  longitude: String
}

enum CityScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  geometryId @join__enumValue(graph: PROFILING)
}

input CityScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [CityScalarWhereWithAggregatesInput!]
  OR: [CityScalarWhereWithAggregatesInput!]
  NOT: [CityScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  geometryId: IntWithAggregatesFilter
}

input CitySumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input CityUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutCityNestedInput
  Area: AreaUpdateManyWithoutCityNestedInput
}

input CityUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CityUpdateOneRequiredWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: CityCreateWithoutAreaInput
  connectOrCreate: CityCreateOrConnectWithoutAreaInput
  upsert: CityUpsertWithoutAreaInput
  connect: CityWhereUniqueInput
  update: CityUpdateWithoutAreaInput
}

input CityUpdateOneWithoutGeometryNestedInput
  @join__type(graph: PROFILING)
{
  create: CityCreateWithoutGeometryInput
  connectOrCreate: CityCreateOrConnectWithoutGeometryInput
  upsert: CityUpsertWithoutGeometryInput
  disconnect: Boolean
  delete: Boolean
  connect: CityWhereUniqueInput
  update: CityUpdateWithoutGeometryInput
}

input CityUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutCityNestedInput
}

input CityUpdateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Area: AreaUpdateManyWithoutCityNestedInput
}

input CityUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: CityUpdateWithoutAreaInput!
  create: CityCreateWithoutAreaInput!
}

input CityUpsertWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  update: CityUpdateWithoutGeometryInput!
  create: CityCreateWithoutGeometryInput!
}

input CityWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: StringFilter
  name: StringFilter
  geometryId: IntFilter
  Geometry: GeometryWhereInput
  Area: AreaListRelationFilter
}

input CityWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  geometryId: Int
}

type ClientDeviceManager
  @join__type(graph: MANAGING)
{
  id: String!
  Device: Device
  DeviceProfile: ClientDeviceProfile
  createdAt: DateTime
  updatedAt: DateTime
}

type ClientDeviceProfile
  @join__type(graph: MANAGING)
{
  id: ID!
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  DeviceManager: DeviceManager!
  accesstoken: String
  RefreshToken: RefreshToken
  deviceManagerId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  refreshtoken: String
  Profile: Profile!
}

type Code
  @join__type(graph: PROFILING)
{
  id: ID!
  code: String!
}

input CodeCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  code: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCodepasswordInput
}

input CodeCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  code: String!
  authenitcationProviderId: String
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  connect: CodeWhereUniqueInput
}

input CodeCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: CodeWhereUniqueInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: String
  code: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeDataInput
  @join__type(graph: PROFILING)
{
  """Length is the total numbers that you want the code to be."""
  length: Int = 4
}

input CodeMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: CodeCountOrderByAggregateInput
  _max: CodeMaxOrderByAggregateInput
  _min: CodeMinOrderByAggregateInput
}

input CodeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
}

input CodeRelationFilter
  @join__type(graph: PROFILING)
{
  is: CodeWhereInput
  isNot: CodeWhereInput
}

union CodeResponse
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "Code")
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
 = Code | ErrorProfiling

enum CodeScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  code @join__enumValue(graph: PROFILING)
  authenitcationProviderId @join__enumValue(graph: PROFILING)
  canUseAsRecovery @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input CodeScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [CodeScalarWhereWithAggregatesInput!]
  OR: [CodeScalarWhereWithAggregatesInput!]
  NOT: [CodeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  code: StringWithAggregatesFilter
  authenitcationProviderId: StringNullableWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CodeUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput
}

input CodeUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING)
{
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  upsert: CodeUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: CodeWhereUniqueInput
  update: CodeUpdateWithoutAuthenticationProviderInput
}

input CodeUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  update: CodeUpdateWithoutAuthenticationProviderInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CodeWhereInput!]
  OR: [CodeWhereInput!]
  NOT: [CodeWhereInput!]
  id: StringFilter
  code: StringFilter
  authenitcationProviderId: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
}

input CodeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenitcationProviderId: String
}

type ComingArea
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index5: String!
  h3Index6: String!
  Area: Area
  areaId: String
  timesRequested: Int!
  toBeNotifiedProfileIds: [String!]!
  keywordSuggestions: [String!]!
  Vote(where: VoteWhereInput, orderBy: [VoteOrderByWithRelationInput!], cursor: VoteWhereUniqueInput, take: Int, skip: Int, distinct: [VoteScalarFieldEnum!]): [Vote!]!
}

input ComingAreaAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input ComingAreaCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
  toBeNotifiedProfileIds: SortOrder
  keywordSuggestions: SortOrder
}

input ComingAreaCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  h3Index6: String!
  timesRequested: Int!
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Area: AreaCreateNestedOneWithoutComingAreaInput
  Vote: VoteCreateNestedManyWithoutComingAreaInput
}

input ComingAreaCreatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input ComingAreaCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  h3Index6: String!
  areaId: String
  timesRequested: Int!
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
}

input ComingAreaCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: ComingAreaCreateWithoutAreaInput
  connectOrCreate: ComingAreaCreateOrConnectWithoutAreaInput
  connect: ComingAreaWhereUniqueInput
}

input ComingAreaCreateNestedOneWithoutVoteInput
  @join__type(graph: PROFILING)
{
  create: ComingAreaCreateWithoutVoteInput
  connectOrCreate: ComingAreaCreateOrConnectWithoutVoteInput
  connect: ComingAreaWhereUniqueInput
}

input ComingAreaCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: ComingAreaWhereUniqueInput!
  create: ComingAreaCreateWithoutAreaInput!
}

input ComingAreaCreateOrConnectWithoutVoteInput
  @join__type(graph: PROFILING)
{
  where: ComingAreaWhereUniqueInput!
  create: ComingAreaCreateWithoutVoteInput!
}

input ComingAreaCreatetoBeNotifiedProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input ComingAreaCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  h3Index6: String!
  timesRequested: Int!
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Vote: VoteCreateNestedManyWithoutComingAreaInput
}

input ComingAreaCreateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  h3Index6: String!
  timesRequested: Int!
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Area: AreaCreateNestedOneWithoutComingAreaInput
}

input ComingAreaMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
}

input ComingAreaMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
}

input ComingAreaOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
  toBeNotifiedProfileIds: SortOrder
  keywordSuggestions: SortOrder
  _count: ComingAreaCountOrderByAggregateInput
  _avg: ComingAreaAvgOrderByAggregateInput
  _max: ComingAreaMaxOrderByAggregateInput
  _min: ComingAreaMinOrderByAggregateInput
  _sum: ComingAreaSumOrderByAggregateInput
}

input ComingAreaOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
  toBeNotifiedProfileIds: SortOrder
  keywordSuggestions: SortOrder
  Area: AreaOrderByWithRelationInput
  Vote: VoteOrderByRelationAggregateInput
}

input ComingAreaRelationFilter
  @join__type(graph: PROFILING)
{
  is: ComingAreaWhereInput
  isNot: ComingAreaWhereInput
}

type ComingAreaResponse
  @join__type(graph: PROFILING)
{
  comingAreas: [ComingArea!]!
  searchArea: Area
}

enum ComingAreaScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index5 @join__enumValue(graph: PROFILING)
  h3Index6 @join__enumValue(graph: PROFILING)
  areaId @join__enumValue(graph: PROFILING)
  timesRequested @join__enumValue(graph: PROFILING)
  toBeNotifiedProfileIds @join__enumValue(graph: PROFILING)
  keywordSuggestions @join__enumValue(graph: PROFILING)
}

input ComingAreaScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ComingAreaScalarWhereWithAggregatesInput!]
  OR: [ComingAreaScalarWhereWithAggregatesInput!]
  NOT: [ComingAreaScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index5: StringWithAggregatesFilter
  h3Index6: StringWithAggregatesFilter
  areaId: StringNullableWithAggregatesFilter
  timesRequested: IntWithAggregatesFilter
  toBeNotifiedProfileIds: StringNullableListFilter
  keywordSuggestions: StringNullableListFilter
}

input ComingAreaSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input ComingAreaUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  timesRequested: IntFieldUpdateOperationsInput
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Area: AreaUpdateOneWithoutComingAreaNestedInput
  Vote: VoteUpdateManyWithoutComingAreaNestedInput
}

input ComingAreaUpdatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input ComingAreaUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  timesRequested: IntFieldUpdateOperationsInput
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
}

input ComingAreaUpdateOneWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: ComingAreaCreateWithoutAreaInput
  connectOrCreate: ComingAreaCreateOrConnectWithoutAreaInput
  upsert: ComingAreaUpsertWithoutAreaInput
  disconnect: Boolean
  delete: Boolean
  connect: ComingAreaWhereUniqueInput
  update: ComingAreaUpdateWithoutAreaInput
}

input ComingAreaUpdateOneWithoutVoteNestedInput
  @join__type(graph: PROFILING)
{
  create: ComingAreaCreateWithoutVoteInput
  connectOrCreate: ComingAreaCreateOrConnectWithoutVoteInput
  upsert: ComingAreaUpsertWithoutVoteInput
  disconnect: Boolean
  delete: Boolean
  connect: ComingAreaWhereUniqueInput
  update: ComingAreaUpdateWithoutVoteInput
}

input ComingAreaUpdatetoBeNotifiedProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input ComingAreaUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  timesRequested: IntFieldUpdateOperationsInput
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Vote: VoteUpdateManyWithoutComingAreaNestedInput
}

input ComingAreaUpdateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  timesRequested: IntFieldUpdateOperationsInput
  toBeNotifiedProfileIds: [String!]
  keywordSuggestions: [String!]
  Area: AreaUpdateOneWithoutComingAreaNestedInput
}

input ComingAreaUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: ComingAreaUpdateWithoutAreaInput!
  create: ComingAreaCreateWithoutAreaInput!
}

input ComingAreaUpsertWithoutVoteInput
  @join__type(graph: PROFILING)
{
  update: ComingAreaUpdateWithoutVoteInput!
  create: ComingAreaCreateWithoutVoteInput!
}

input ComingAreaWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ComingAreaWhereInput!]
  OR: [ComingAreaWhereInput!]
  NOT: [ComingAreaWhereInput!]
  id: StringFilter
  h3Index5: StringFilter
  h3Index6: StringFilter
  areaId: StringNullableFilter
  timesRequested: IntFilter
  toBeNotifiedProfileIds: StringNullableListFilter
  keywordSuggestions: StringNullableListFilter
  Area: AreaWhereInput
  Vote: VoteListRelationFilter
}

input ComingAreaWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  areaId: String
}

input ContactInput
  @join__type(graph: PROFILING)
{
  name: String
  number: String
}

type Coords
  @join__type(graph: PROFILING)
{
  latitude: Float
  longitude: Float
}

input CoordsInput
  @join__type(graph: PROFILING)
{
  latitude: Float!
  longitude: Float!
}

type Country
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  isoCode: String!
  Geometry: Geometry!
  geometryId: Int!
  Area(where: AreaWhereInput, orderBy: [AreaOrderByWithRelationInput!], cursor: AreaWhereUniqueInput, take: Int, skip: Int, distinct: [AreaScalarFieldEnum!]): [Area!]!
}

input CountryAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input CountryCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input CountryCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Geometry: GeometryCreateNestedOneWithoutCountryInput!
  Area: AreaCreateNestedManyWithoutCountryInput
}

input CountryCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  geometryId: Int!
}

input CountryCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: CountryCreateWithoutAreaInput
  connectOrCreate: CountryCreateOrConnectWithoutAreaInput
  connect: CountryWhereUniqueInput
}

input CountryCreateNestedOneWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  create: CountryCreateWithoutGeometryInput
  connectOrCreate: CountryCreateOrConnectWithoutGeometryInput
  connect: CountryWhereUniqueInput
}

input CountryCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: CountryWhereUniqueInput!
  create: CountryCreateWithoutAreaInput!
}

input CountryCreateOrConnectWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  where: CountryWhereUniqueInput!
  create: CountryCreateWithoutGeometryInput!
}

input CountryCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Geometry: GeometryCreateNestedOneWithoutCountryInput!
}

input CountryCreateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Area: AreaCreateNestedManyWithoutCountryInput
}

input CountryMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input CountryMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input CountryOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
  _count: CountryCountOrderByAggregateInput
  _avg: CountryAvgOrderByAggregateInput
  _max: CountryMaxOrderByAggregateInput
  _min: CountryMinOrderByAggregateInput
  _sum: CountrySumOrderByAggregateInput
}

input CountryOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  Area: AreaOrderByRelationAggregateInput
}

input CountryRelationFilter
  @join__type(graph: PROFILING)
{
  is: CountryWhereInput
  isNot: CountryWhereInput
}

type CountryResponseObject
  @join__type(graph: PROFILING)
{
  name: String!
  phonecode: String!
  isoCode: String!
  flag: String!
  currency: String!
  latitude: String!
  longitude: String!
}

enum CountryScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  isoCode @join__enumValue(graph: PROFILING)
  geometryId @join__enumValue(graph: PROFILING)
}

input CountryScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [CountryScalarWhereWithAggregatesInput!]
  OR: [CountryScalarWhereWithAggregatesInput!]
  NOT: [CountryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  isoCode: StringWithAggregatesFilter
  geometryId: IntWithAggregatesFilter
}

input CountrySumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input CountryUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutCountryNestedInput
  Area: AreaUpdateManyWithoutCountryNestedInput
}

input CountryUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
}

input CountryUpdateOneRequiredWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: CountryCreateWithoutAreaInput
  connectOrCreate: CountryCreateOrConnectWithoutAreaInput
  upsert: CountryUpsertWithoutAreaInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateWithoutAreaInput
}

input CountryUpdateOneWithoutGeometryNestedInput
  @join__type(graph: PROFILING)
{
  create: CountryCreateWithoutGeometryInput
  connectOrCreate: CountryCreateOrConnectWithoutGeometryInput
  upsert: CountryUpsertWithoutGeometryInput
  disconnect: Boolean
  delete: Boolean
  connect: CountryWhereUniqueInput
  update: CountryUpdateWithoutGeometryInput
}

input CountryUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutCountryNestedInput
}

input CountryUpdateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Area: AreaUpdateManyWithoutCountryNestedInput
}

input CountryUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: CountryUpdateWithoutAreaInput!
  create: CountryCreateWithoutAreaInput!
}

input CountryUpsertWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  update: CountryUpdateWithoutGeometryInput!
  create: CountryCreateWithoutGeometryInput!
}

input CountryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: StringFilter
  name: StringFilter
  isoCode: StringFilter
  geometryId: IntFilter
  Geometry: GeometryWhereInput
  Area: AreaListRelationFilter
}

input CountryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  isoCode: String
  geometryId: Int
}

input CreatePersonalDataInput
  @join__type(graph: PROFILING)
{
  PrivacyPolicyId: ID
  ServicesId: ID
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  password: String!
  username: String!
  fullname: String
  address: String!
  birthday: DateTime!
}

input CreateVenueDataInput
  @join__type(graph: PROFILING)
{
  PrivacyPolicyId: ID
  ServicesId: ID
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  password: String!
  established: DateTime!
  venuename: String!
  venuelocalname: String!
  venueusername: String!
  address: String!
  ownername: String!
  contacts: [VenueContactInput!]!
  capacity: String!
  venuetypes: [String!]
  description: String
  birthday: DateTime
  photos: PhotoCreateManyProfileInputEnvelope
}

type Credentials
  @join__type(graph: PROFILING)
{
  id: ID!
  LegalAgreement(where: LegalAgreementWhereInput, orderBy: [LegalAgreementOrderByWithRelationInput!], cursor: LegalAgreementWhereUniqueInput, take: Int, skip: Int, distinct: [LegalAgreementScalarFieldEnum!]): [LegalAgreement!]!
  AuthenticationProvider: AuthenticationProvider
  authenticationProviderId: String
  Profile: Profile!
  profileId: String!
  createdtAt: DateTime!
  updatedAt: DateTime!
}

input CredentialsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdtAt: DateTime
  updatedAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
}

input CredentialsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  authenticationProviderId: String
  profileId: String!
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutAuthenticationProviderInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateNestedOneWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutLegalAgreementInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutAuthenticationProviderInput!
}

input CredentialsCreateOrConnectWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutLegalAgreementInput!
}

input CredentialsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: String
  createdtAt: DateTime
  updatedAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
}

input CredentialsCreateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  id: String
  createdtAt: DateTime
  updatedAt: DateTime
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
}

input CredentialsCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  createdtAt: DateTime
  updatedAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
}

input CredentialsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
  _count: CredentialsCountOrderByAggregateInput
  _max: CredentialsMaxOrderByAggregateInput
  _min: CredentialsMinOrderByAggregateInput
}

input CredentialsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  Profile: ProfileOrderByWithRelationInput
}

input CredentialsRelationFilter
  @join__type(graph: PROFILING)
{
  is: CredentialsWhereInput
  isNot: CredentialsWhereInput
}

enum CredentialsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  authenticationProviderId @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  createdtAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input CredentialsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [CredentialsScalarWhereWithAggregatesInput!]
  OR: [CredentialsScalarWhereWithAggregatesInput!]
  NOT: [CredentialsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  authenticationProviderId: StringNullableWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdtAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CredentialsUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
}

input CredentialsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutAuthenticationProviderInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  upsert: CredentialsUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutAuthenticationProviderInput
}

input CredentialsUpdateOneWithoutLegalAgreementNestedInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutLegalAgreementInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  upsert: CredentialsUpsertWithoutLegalAgreementInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutLegalAgreementInput
}

input CredentialsUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  upsert: CredentialsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutProfileInput
}

input CredentialsUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
}

input CredentialsUpdateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
}

input CredentialsUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
}

input CredentialsUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  update: CredentialsUpdateWithoutAuthenticationProviderInput!
  create: CredentialsCreateWithoutAuthenticationProviderInput!
}

input CredentialsUpsertWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  update: CredentialsUpdateWithoutLegalAgreementInput!
  create: CredentialsCreateWithoutLegalAgreementInput!
}

input CredentialsUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: CredentialsUpdateWithoutProfileInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CredentialsWhereInput!]
  OR: [CredentialsWhereInput!]
  NOT: [CredentialsWhereInput!]
  id: StringFilter
  authenticationProviderId: StringNullableFilter
  profileId: StringFilter
  createdtAt: DateTimeFilter
  updatedAt: DateTimeFilter
  LegalAgreement: LegalAgreementListRelationFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  Profile: ProfileWhereInput
}

input CredentialsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenticationProviderId: String
  profileId: String
}

input CustomCodeWhereInput
  @join__type(graph: PROFILING)
{
  Authenticators: Authenticators
}

input CustomProfileWhereInput
  @join__type(graph: PROFILING)
{
  email: String
  username: String
  Phone: PhoneInput
}

scalar DateTime
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)

input DateTimeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: DateTime
}

input DateTimeFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input DateTimeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input DateTimeWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

type DetailInformation
  @join__type(graph: PROFILING)
{
  id: ID!
  description: String
  capacity: Int
  established: DateTime
  Tags(where: TagWhereInput, orderBy: [TagOrderByWithRelationInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): [Tag!]!
  Profile: Profile!
  profileId: String!
}

input DetailInformationAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  capacity: SortOrder
}

input DetailInformationCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  description: String
  capacity: Int
  established: DateTime
  Tags: TagCreateNestedManyWithoutDetailInformationInput
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
}

input DetailInformationCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  description: String
  capacity: Int
  established: DateTime
  profileId: String!
}

input DetailInformationCreateNestedManyWithoutTagsInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutTagsInput
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  connect: [DetailInformationWhereUniqueInput!]
}

input DetailInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  connect: DetailInformationWhereUniqueInput
}

input DetailInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationWhereUniqueInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationCreateOrConnectWithoutTagsInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationWhereUniqueInput!
  create: DetailInformationCreateWithoutTagsInput!
}

input DetailInformationCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  description: String
  capacity: Int
  established: DateTime
  Tags: TagCreateNestedManyWithoutDetailInformationInput
}

input DetailInformationCreateWithoutTagsInput
  @join__type(graph: PROFILING)
{
  id: String
  description: String
  capacity: Int
  established: DateTime
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
}

input DetailInformationListRelationFilter
  @join__type(graph: PROFILING)
{
  every: DetailInformationWhereInput
  some: DetailInformationWhereInput
  none: DetailInformationWhereInput
}

input DetailInformationMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input DetailInformationOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
  _count: DetailInformationCountOrderByAggregateInput
  _avg: DetailInformationAvgOrderByAggregateInput
  _max: DetailInformationMaxOrderByAggregateInput
  _min: DetailInformationMinOrderByAggregateInput
  _sum: DetailInformationSumOrderByAggregateInput
}

input DetailInformationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
  Tags: TagOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
}

input DetailInformationRelationFilter
  @join__type(graph: PROFILING)
{
  is: DetailInformationWhereInput
  isNot: DetailInformationWhereInput
}

enum DetailInformationScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  description @join__enumValue(graph: PROFILING)
  capacity @join__enumValue(graph: PROFILING)
  established @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
}

input DetailInformationScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [DetailInformationScalarWhereInput!]
  OR: [DetailInformationScalarWhereInput!]
  NOT: [DetailInformationScalarWhereInput!]
  id: StringFilter
  description: StringNullableFilter
  capacity: IntNullableFilter
  established: DateTimeNullableFilter
  profileId: StringFilter
}

input DetailInformationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [DetailInformationScalarWhereWithAggregatesInput!]
  OR: [DetailInformationScalarWhereWithAggregatesInput!]
  NOT: [DetailInformationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  capacity: IntNullableWithAggregatesFilter
  established: DateTimeNullableWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

input DetailInformationSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  capacity: SortOrder
}

input DetailInformationUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
}

input DetailInformationUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
}

input DetailInformationUpdateManyWithoutTagsNestedInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutTagsInput
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  upsert: [DetailInformationUpsertWithWhereUniqueWithoutTagsInput!]
  set: [DetailInformationWhereUniqueInput!]
  disconnect: [DetailInformationWhereUniqueInput!]
  delete: [DetailInformationWhereUniqueInput!]
  connect: [DetailInformationWhereUniqueInput!]
  update: [DetailInformationUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [DetailInformationUpdateManyWithWhereWithoutTagsInput!]
  deleteMany: [DetailInformationScalarWhereInput!]
}

input DetailInformationUpdateManyWithWhereWithoutTagsInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationScalarWhereInput!
  data: DetailInformationUpdateManyMutationInput!
}

input DetailInformationUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  upsert: DetailInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: DetailInformationWhereUniqueInput
  update: DetailInformationUpdateWithoutProfileInput
}

input DetailInformationUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithoutTagsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithWhereUniqueWithoutTagsInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationWhereUniqueInput!
  data: DetailInformationUpdateWithoutTagsInput!
}

input DetailInformationUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: DetailInformationUpdateWithoutProfileInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationUpsertWithWhereUniqueWithoutTagsInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationWhereUniqueInput!
  update: DetailInformationUpdateWithoutTagsInput!
  create: DetailInformationCreateWithoutTagsInput!
}

input DetailInformationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [DetailInformationWhereInput!]
  OR: [DetailInformationWhereInput!]
  NOT: [DetailInformationWhereInput!]
  id: StringFilter
  description: StringNullableFilter
  capacity: IntNullableFilter
  established: DateTimeNullableFilter
  profileId: StringFilter
  Tags: TagListRelationFilter
  Profile: ProfileWhereInput
}

input DetailInformationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

type Device
  @join__type(graph: MANAGING)
{
  id: ID!
  deviceType: String
  DeviceManager: DeviceManager!
  deviceManagerId: String!
  PushToken: PushToken
  pushTokenId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCountOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceCreateInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceType: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
}

input DeviceCreateManyInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceType: String
  deviceManagerId: String!
  pushTokenId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCreateNestedOneWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  create: DeviceCreateWithoutDeviceManagerInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  connect: DeviceWhereUniqueInput
}

input DeviceCreateNestedOneWithoutPushTokenInput
  @join__type(graph: MANAGING)
{
  create: DeviceCreateWithoutPushTokenInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  connect: DeviceWhereUniqueInput
}

input DeviceCreateOrConnectWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceWhereUniqueInput!
  create: DeviceCreateWithoutDeviceManagerInput!
}

input DeviceCreateOrConnectWithoutPushTokenInput
  @join__type(graph: MANAGING)
{
  where: DeviceWhereUniqueInput!
  create: DeviceCreateWithoutPushTokenInput!
}

input DeviceCreateWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceType: String
  createdAt: DateTime
  updatedAt: DateTime
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
}

input DeviceCreateWithoutPushTokenInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceType: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
}

type DeviceManager
  @join__type(graph: MANAGING)
{
  id: ID!
  Device: Device
  DeviceProfile(where: DeviceProfileWhereInput, orderBy: [DeviceProfileOrderByWithRelationInput!], cursor: DeviceProfileWhereUniqueInput, take: Int, skip: Int, distinct: [DeviceProfileScalarFieldEnum!]): [ClientDeviceProfile!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DeviceManagerCountOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerCreateInput
  @join__type(graph: MANAGING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
}

input DeviceManagerCreateManyInput
  @join__type(graph: MANAGING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceManagerCreateNestedOneWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  create: DeviceManagerCreateWithoutDeviceInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  connect: DeviceManagerWhereUniqueInput
}

input DeviceManagerCreateNestedOneWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  create: DeviceManagerCreateWithoutDeviceProfileInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  connect: DeviceManagerWhereUniqueInput
}

input DeviceManagerCreateOrConnectWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  where: DeviceManagerWhereUniqueInput!
  create: DeviceManagerCreateWithoutDeviceInput!
}

input DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  where: DeviceManagerWhereUniqueInput!
  create: DeviceManagerCreateWithoutDeviceProfileInput!
}

input DeviceManagerCreateWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
}

input DeviceManagerCreateWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
}

type DeviceManagerDeviceProfiles
  @join__type(graph: MANAGING)
{
  DeviceProfiles: [ClientDeviceProfile!]!
}

union DeviceManagerDeviceProfilesResponseUnion
  @join__type(graph: MANAGING)
  @join__unionMember(graph: MANAGING, member: "DeviceManagerDeviceProfiles")
  @join__unionMember(graph: MANAGING, member: "ErrorManaging")
 = DeviceManagerDeviceProfiles | ErrorManaging

input DeviceManagerMaxOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerMinOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerOrderByWithAggregationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceManagerCountOrderByAggregateInput
  _max: DeviceManagerMaxOrderByAggregateInput
  _min: DeviceManagerMinOrderByAggregateInput
}

input DeviceManagerOrderByWithRelationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Device: DeviceOrderByWithRelationInput
  DeviceProfile: DeviceProfileOrderByRelationAggregateInput
}

input DeviceManagerRelationFilter
  @join__type(graph: MANAGING)
{
  is: DeviceManagerWhereInput
  isNot: DeviceManagerWhereInput
}

enum DeviceManagerScalarFieldEnum
  @join__type(graph: MANAGING)
{
  id @join__enumValue(graph: MANAGING)
  createdAt @join__enumValue(graph: MANAGING)
  updatedAt @join__enumValue(graph: MANAGING)
}

input DeviceManagerScalarWhereWithAggregatesInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceManagerScalarWhereWithAggregatesInput!]
  OR: [DeviceManagerScalarWhereWithAggregatesInput!]
  NOT: [DeviceManagerScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceManagerUpdateInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
}

input DeviceManagerUpdateManyMutationInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceManagerCreateWithoutDeviceInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  upsert: DeviceManagerUpsertWithoutDeviceInput
  connect: DeviceManagerWhereUniqueInput
  update: DeviceManagerUpdateWithoutDeviceInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceManagerCreateWithoutDeviceProfileInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  upsert: DeviceManagerUpsertWithoutDeviceProfileInput
  connect: DeviceManagerWhereUniqueInput
  update: DeviceManagerUpdateWithoutDeviceProfileInput
}

input DeviceManagerUpdateWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
}

input DeviceManagerUpdateWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
}

input DeviceManagerUpsertWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  update: DeviceManagerUpdateWithoutDeviceInput!
  create: DeviceManagerCreateWithoutDeviceInput!
}

input DeviceManagerUpsertWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  update: DeviceManagerUpdateWithoutDeviceProfileInput!
  create: DeviceManagerCreateWithoutDeviceProfileInput!
}

input DeviceManagerWhereInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceManagerWhereInput!]
  OR: [DeviceManagerWhereInput!]
  NOT: [DeviceManagerWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Device: DeviceWhereInput
  DeviceProfile: DeviceProfileListRelationFilter
}

input DeviceManagerWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
}

input DeviceMaxOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceMinOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceOrderByWithAggregationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceCountOrderByAggregateInput
  _max: DeviceMaxOrderByAggregateInput
  _min: DeviceMinOrderByAggregateInput
}

input DeviceOrderByWithRelationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  PushToken: PushTokenOrderByWithRelationInput
}

input DeviceProfileCountOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileCreateInput
  @join__type(graph: MANAGING)
{
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
}

input DeviceProfileCreateManyDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateManyDeviceManagerInputEnvelope
  @join__type(graph: MANAGING)
{
  data: [DeviceProfileCreateManyDeviceManagerInput!]!
  skipDuplicates: Boolean
}

input DeviceProfileCreateManyInput
  @join__type(graph: MANAGING)
{
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  deviceManagerId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  create: DeviceProfileCreateWithoutDeviceManagerInput
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  connect: [DeviceProfileWhereUniqueInput!]
}

input DeviceProfileCreateNestedOneWithoutRefreshTokenInput
  @join__type(graph: MANAGING)
{
  create: DeviceProfileCreateWithoutRefreshTokenInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  connect: DeviceProfileWhereUniqueInput
}

input DeviceProfileCreateOrConnectWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileWhereUniqueInput!
  create: DeviceProfileCreateWithoutDeviceManagerInput!
}

input DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileWhereUniqueInput!
  create: DeviceProfileCreateWithoutRefreshTokenInput!
}

input DeviceProfileCreateWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
}

input DeviceProfileCreateWithoutRefreshTokenInput
  @join__type(graph: MANAGING)
{
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
}

input DeviceProfileListRelationFilter
  @join__type(graph: MANAGING)
{
  every: DeviceProfileWhereInput
  some: DeviceProfileWhereInput
  none: DeviceProfileWhereInput
}

input DeviceProfileMaxOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileMinOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileOrderByRelationAggregateInput
  @join__type(graph: MANAGING)
{
  _count: SortOrder
}

input DeviceProfileOrderByWithAggregationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceProfileCountOrderByAggregateInput
  _max: DeviceProfileMaxOrderByAggregateInput
  _min: DeviceProfileMinOrderByAggregateInput
}

input DeviceProfileOrderByWithRelationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  RefreshToken: RefreshTokenOrderByWithRelationInput
}

input DeviceProfileRelationFilter
  @join__type(graph: MANAGING)
{
  is: DeviceProfileWhereInput
  isNot: DeviceProfileWhereInput
}

enum DeviceProfileScalarFieldEnum
  @join__type(graph: MANAGING)
{
  id @join__enumValue(graph: MANAGING)
  AppType @join__enumValue(graph: MANAGING)
  ProfileType @join__enumValue(graph: MANAGING)
  profileId @join__enumValue(graph: MANAGING)
  isActive @join__enumValue(graph: MANAGING)
  accesstoken @join__enumValue(graph: MANAGING)
  deviceManagerId @join__enumValue(graph: MANAGING)
  createdAt @join__enumValue(graph: MANAGING)
  updatedAt @join__enumValue(graph: MANAGING)
}

input DeviceProfileScalarWhereInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceProfileScalarWhereInput!]
  OR: [DeviceProfileScalarWhereInput!]
  NOT: [DeviceProfileScalarWhereInput!]
  id: StringFilter
  AppType: EnumAppTypeNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  profileId: StringNullableFilter
  isActive: BoolFilter
  accesstoken: StringNullableFilter
  deviceManagerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DeviceProfileScalarWhereWithAggregatesInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceProfileScalarWhereWithAggregatesInput!]
  OR: [DeviceProfileScalarWhereWithAggregatesInput!]
  NOT: [DeviceProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  AppType: EnumAppTypeNullableWithAggregatesFilter
  ProfileType: EnumProfileTypeNullableWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  accesstoken: StringNullableWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceProfileUpdateInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
}

input DeviceProfileUpdateManyMutationInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceProfileCreateWithoutDeviceManagerInput
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  upsert: [DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput!]
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  set: [DeviceProfileWhereUniqueInput!]
  disconnect: [DeviceProfileWhereUniqueInput!]
  delete: [DeviceProfileWhereUniqueInput!]
  connect: [DeviceProfileWhereUniqueInput!]
  update: [DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput!]
  updateMany: [DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput!]
  deleteMany: [DeviceProfileScalarWhereInput!]
}

input DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileScalarWhereInput!
  data: DeviceProfileUpdateManyMutationInput!
}

input DeviceProfileUpdateOneWithoutRefreshTokenNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceProfileCreateWithoutRefreshTokenInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  upsert: DeviceProfileUpsertWithoutRefreshTokenInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceProfileWhereUniqueInput
  update: DeviceProfileUpdateWithoutRefreshTokenInput
}

input DeviceProfileUpdateWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
}

input DeviceProfileUpdateWithoutRefreshTokenInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
}

input DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileWhereUniqueInput!
  data: DeviceProfileUpdateWithoutDeviceManagerInput!
}

input DeviceProfileUpsertWithoutRefreshTokenInput
  @join__type(graph: MANAGING)
{
  update: DeviceProfileUpdateWithoutRefreshTokenInput!
  create: DeviceProfileCreateWithoutRefreshTokenInput!
}

input DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileWhereUniqueInput!
  update: DeviceProfileUpdateWithoutDeviceManagerInput!
  create: DeviceProfileCreateWithoutDeviceManagerInput!
}

input DeviceProfileWhereInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceProfileWhereInput!]
  OR: [DeviceProfileWhereInput!]
  NOT: [DeviceProfileWhereInput!]
  id: StringFilter
  AppType: EnumAppTypeNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  profileId: StringNullableFilter
  isActive: BoolFilter
  accesstoken: StringNullableFilter
  deviceManagerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  DeviceManager: DeviceManagerWhereInput
  RefreshToken: RefreshTokenWhereInput
}

input DeviceProfileWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
}

input DeviceRelationFilter
  @join__type(graph: MANAGING)
{
  is: DeviceWhereInput
  isNot: DeviceWhereInput
}

enum DeviceScalarFieldEnum
  @join__type(graph: MANAGING)
{
  id @join__enumValue(graph: MANAGING)
  deviceType @join__enumValue(graph: MANAGING)
  deviceManagerId @join__enumValue(graph: MANAGING)
  pushTokenId @join__enumValue(graph: MANAGING)
  createdAt @join__enumValue(graph: MANAGING)
  updatedAt @join__enumValue(graph: MANAGING)
}

input DeviceScalarWhereWithAggregatesInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceScalarWhereWithAggregatesInput!]
  OR: [DeviceScalarWhereWithAggregatesInput!]
  NOT: [DeviceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  deviceType: StringNullableWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  pushTokenId: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input DeviceUpdateInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
}

input DeviceUpdateManyMutationInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateOneWithoutDeviceManagerNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceCreateWithoutDeviceManagerInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  upsert: DeviceUpsertWithoutDeviceManagerInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceWhereUniqueInput
  update: DeviceUpdateWithoutDeviceManagerInput
}

input DeviceUpdateOneWithoutPushTokenNestedInput
  @join__type(graph: MANAGING)
{
  create: DeviceCreateWithoutPushTokenInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  upsert: DeviceUpsertWithoutPushTokenInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceWhereUniqueInput
  update: DeviceUpdateWithoutPushTokenInput
}

input DeviceUpdateWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
}

input DeviceUpdateWithoutPushTokenInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
}

input DeviceUpsertWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  update: DeviceUpdateWithoutDeviceManagerInput!
  create: DeviceCreateWithoutDeviceManagerInput!
}

input DeviceUpsertWithoutPushTokenInput
  @join__type(graph: MANAGING)
{
  update: DeviceUpdateWithoutPushTokenInput!
  create: DeviceCreateWithoutPushTokenInput!
}

input DeviceWhereInput
  @join__type(graph: MANAGING)
{
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
  id: StringFilter
  deviceType: StringNullableFilter
  deviceManagerId: StringFilter
  pushTokenId: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  DeviceManager: DeviceManagerWhereInput
  PushToken: PushTokenWhereInput
}

input DeviceWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceManagerId: String
  pushTokenId: String
}

type Document
  @join__type(graph: PROFILING)
{
  id: ID!
  LegalAgreement: [LegalAgreement!]!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

input DocumentAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input DocumentCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentCreateInput
  @join__type(graph: PROFILING)
{
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutDocumentInput
}

input DocumentCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentCreateNestedOneWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOrConnectWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentCreateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DocumentCountOrderByAggregateInput
  _avg: DocumentAvgOrderByAggregateInput
  _max: DocumentMaxOrderByAggregateInput
  _min: DocumentMinOrderByAggregateInput
  _sum: DocumentSumOrderByAggregateInput
}

input DocumentOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
}

input DocumentRelationFilter
  @join__type(graph: PROFILING)
{
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

enum DocumentScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  content @join__enumValue(graph: PROFILING)
  TypeOfDocument @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input DocumentScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [DocumentScalarWhereWithAggregatesInput!]
  OR: [DocumentScalarWhereWithAggregatesInput!]
  NOT: [DocumentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  content: StringWithAggregatesFilter
  TypeOfDocument: EnumTypeOfDocumentWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DocumentSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input DocumentUpdateInput
  @join__type(graph: PROFILING)
{
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutDocumentNestedInput
}

input DocumentUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  @join__type(graph: PROFILING)
{
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  upsert: DocumentUpsertWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateWithoutLegalAgreementInput
}

input DocumentUpdateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpsertWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  update: DocumentUpdateWithoutLegalAgreementInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentWhereInput
  @join__type(graph: PROFILING)
{
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IntFilter
  content: StringFilter
  TypeOfDocument: EnumTypeOfDocumentFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  LegalAgreement: LegalAgreementListRelationFilter
}

input DocumentWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Email
  @join__type(graph: PROFILING)
{
  id: ID!
  email: String!
  AuthenticationProvider(where: AuthenticationProviderWhereInput, orderBy: [AuthenticationProviderOrderByWithRelationInput!], cursor: AuthenticationProviderWhereUniqueInput, take: Int, skip: Int, distinct: [AuthenticationProviderScalarFieldEnum!]): [AuthenticationProvider!]!
  canUseAsRecovery: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input EmailCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailCreateInput
  @join__type(graph: PROFILING)
{
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutEmailsInput
}

input EmailCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: EmailCreateWithoutAuthenticationProviderInput
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailInput
  @join__type(graph: PROFILING)
{
  email: String
}

input EmailListRelationFilter
  @join__type(graph: PROFILING)
{
  every: EmailWhereInput
  some: EmailWhereInput
  none: EmailWhereInput
}

input EmailMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input EmailOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: EmailCountOrderByAggregateInput
  _avg: EmailAvgOrderByAggregateInput
  _max: EmailMaxOrderByAggregateInput
  _min: EmailMinOrderByAggregateInput
  _sum: EmailSumOrderByAggregateInput
}

input EmailOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
}

enum EmailScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  email @join__enumValue(graph: PROFILING)
  canUseAsRecovery @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input EmailScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmailScalarWhereInput!]
  OR: [EmailScalarWhereInput!]
  NOT: [EmailScalarWhereInput!]
  id: IntFilter
  email: StringFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmailScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [EmailScalarWhereWithAggregatesInput!]
  OR: [EmailScalarWhereWithAggregatesInput!]
  NOT: [EmailScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  email: StringWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EmailSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input EmailUpdateInput
  @join__type(graph: PROFILING)
{
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutEmailsNestedInput
}

input EmailUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING)
{
  create: EmailCreateWithoutAuthenticationProviderInput
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  connect: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [EmailScalarWhereInput!]
}

input EmailUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailScalarWhereInput!
  data: EmailUpdateManyMutationInput!
}

input EmailUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutAuthenticationProviderInput!
}

input EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutAuthenticationProviderInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  id: IntFilter
  email: StringFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
}

input EmailWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Emojimood
  @join__type(graph: PROFILING)
{
  id: ID!
  emojiname: String
  emoji: String
  colors: [String!]!
}

input EmojimoodAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input EmojimoodCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodCreatecolorsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input EmojimoodCreateInput
  @join__type(graph: PROFILING)
{
  colors: [String!]
  emojiname: String
  emoji: String
  Story: StoryCreateNestedManyWithoutEmojimoodInput
}

input EmojimoodCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  colors: [String!]
  emojiname: String
  emoji: String
}

input EmojimoodCreateNestedManyWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  connect: [EmojimoodWhereUniqueInput!]
}

input EmojimoodCreateOrConnectWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: EmojimoodWhereUniqueInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodCreateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  colors: [String!]
  emojiname: String
  emoji: String
}

input EmojimoodListRelationFilter
  @join__type(graph: PROFILING)
{
  every: EmojimoodWhereInput
  some: EmojimoodWhereInput
  none: EmojimoodWhereInput
}

input EmojimoodMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input EmojimoodOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
  _count: EmojimoodCountOrderByAggregateInput
  _avg: EmojimoodAvgOrderByAggregateInput
  _max: EmojimoodMaxOrderByAggregateInput
  _min: EmojimoodMinOrderByAggregateInput
  _sum: EmojimoodSumOrderByAggregateInput
}

input EmojimoodOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
  Story: StoryOrderByRelationAggregateInput
}

enum EmojimoodScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  colors @join__enumValue(graph: PROFILING)
  emojiname @join__enumValue(graph: PROFILING)
  emoji @join__enumValue(graph: PROFILING)
}

input EmojimoodScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmojimoodScalarWhereInput!]
  OR: [EmojimoodScalarWhereInput!]
  NOT: [EmojimoodScalarWhereInput!]
  id: IntFilter
  colors: StringNullableListFilter
  emojiname: StringNullableFilter
  emoji: StringNullableFilter
}

input EmojimoodScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [EmojimoodScalarWhereWithAggregatesInput!]
  OR: [EmojimoodScalarWhereWithAggregatesInput!]
  NOT: [EmojimoodScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  colors: StringNullableListFilter
  emojiname: StringNullableWithAggregatesFilter
  emoji: StringNullableWithAggregatesFilter
}

input EmojimoodSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input EmojimoodUpdatecolorsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input EmojimoodUpdateInput
  @join__type(graph: PROFILING)
{
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateManyWithoutEmojimoodNestedInput
}

input EmojimoodUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateManyWithoutStoryNestedInput
  @join__type(graph: PROFILING)
{
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  upsert: [EmojimoodUpsertWithWhereUniqueWithoutStoryInput!]
  set: [EmojimoodWhereUniqueInput!]
  disconnect: [EmojimoodWhereUniqueInput!]
  delete: [EmojimoodWhereUniqueInput!]
  connect: [EmojimoodWhereUniqueInput!]
  update: [EmojimoodUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [EmojimoodUpdateManyWithWhereWithoutStoryInput!]
  deleteMany: [EmojimoodScalarWhereInput!]
}

input EmojimoodUpdateManyWithWhereWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: EmojimoodScalarWhereInput!
  data: EmojimoodUpdateManyMutationInput!
}

input EmojimoodUpdateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: EmojimoodWhereUniqueInput!
  data: EmojimoodUpdateWithoutStoryInput!
}

input EmojimoodUpsertWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: EmojimoodWhereUniqueInput!
  update: EmojimoodUpdateWithoutStoryInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  NOT: [EmojimoodWhereInput!]
  id: IntFilter
  colors: StringNullableListFilter
  emojiname: StringNullableFilter
  emoji: StringNullableFilter
  Story: StoryListRelationFilter
}

input EmojimoodWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

input EnumAppTypeNullableFilter
  @join__type(graph: MANAGING)
{
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
}

input EnumAppTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
{
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
  _count: NestedIntNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  _max: NestedEnumAppTypeNullableFilter
}

input EnumOutTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: OutType
}

input EnumOutTypeFilter
  @join__type(graph: PROFILING)
{
  equals: OutType
  in: [OutType!]
  notIn: [OutType!]
  not: OutType
}

input EnumOutTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: OutType
  in: [OutType!]
  notIn: [OutType!]
  not: OutType
  _count: NestedIntFilter
  _min: NestedEnumOutTypeFilter
  _max: NestedEnumOutTypeFilter
}

input EnumPhotoTypeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
}

input EnumPhotoTypeNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
  _count: NestedIntNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
}

input EnumProfileTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: ProfileType
}

input EnumProfileTypeFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input EnumProfileTypeNullableFilter
  @join__type(graph: MANAGING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input EnumProfileTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
}

input EnumProfileTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntFilter
  _min: NestedEnumProfileTypeFilter
  _max: NestedEnumProfileTypeFilter
}

input EnumRelationshipStatusNullableListFilter
  @join__type(graph: PROFILING)
{
  equals: [RelationshipStatus!]
  has: RelationshipStatus
  hasEvery: [RelationshipStatus!]
  hasSome: [RelationshipStatus!]
  isEmpty: Boolean
}

input EnumSecureDataTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: SecureDataType
}

input EnumSecureDataTypeFilter
  @join__type(graph: PROFILING)
{
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
}

input EnumSecureDataTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
  _count: NestedIntFilter
  _min: NestedEnumSecureDataTypeFilter
  _max: NestedEnumSecureDataTypeFilter
}

input EnumTypeOfDocumentFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: TypeOfDocument
}

input EnumTypeOfDocumentFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
}

input EnumTypeOfDocumentWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
  _count: NestedIntFilter
  _min: NestedEnumTypeOfDocumentFilter
  _max: NestedEnumTypeOfDocumentFilter
}

"""Long necks, cool patterns, taller than you."""
type ErrorManaging
  @join__type(graph: MANAGING)
{
  errorCode: String!
  message: String!
}

"""Long necks, cool patterns, taller than you."""
type ErrorProfiling
  @join__type(graph: PROFILING)
{
  errorCode: String!
  message: String!
}

type ExploreResponse
  @join__type(graph: PROFILING)
{
  people: [Personal!]!
  venues: [Venue!]!
  events: [Json!]
}

input FloatFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FloatFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type FriendRequest
  @join__type(graph: PROFILING)
{
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Notifications: [Notifications!]!
  NotificationStatus: NotificationStatus!
  notificationStatusId: String!
  senderProfileId: String!
  receiverProfileId: String!
  senderProfile: Profile!
  receiverProfile: Profile!
}

input FriendRequestCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  createdAt: DateTime
  updatedAt: DateTime
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
}

input FriendRequestCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  notificationStatusId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input FriendRequestCreateNestedManyWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  create: FriendRequestCreateWithoutNotificationsInput
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateNestedOneWithoutNotificationStatusInput
  @join__type(graph: PROFILING)
{
  create: FriendRequestCreateWithoutNotificationStatusInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  connect: FriendRequestWhereUniqueInput
}

input FriendRequestCreateOrConnectWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  where: FriendRequestWhereUniqueInput!
  create: FriendRequestCreateWithoutNotificationsInput!
}

input FriendRequestCreateOrConnectWithoutNotificationStatusInput
  @join__type(graph: PROFILING)
{
  where: FriendRequestWhereUniqueInput!
  create: FriendRequestCreateWithoutNotificationStatusInput!
}

input FriendRequestCreateWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  createdAt: DateTime
  updatedAt: DateTime
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
}

input FriendRequestCreateWithoutNotificationStatusInput
  @join__type(graph: PROFILING)
{
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  createdAt: DateTime
  updatedAt: DateTime
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
}

input FriendRequestListRelationFilter
  @join__type(graph: PROFILING)
{
  every: FriendRequestWhereInput
  some: FriendRequestWhereInput
  none: FriendRequestWhereInput
}

input FriendRequestMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input FriendRequestOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: FriendRequestCountOrderByAggregateInput
  _max: FriendRequestMaxOrderByAggregateInput
  _min: FriendRequestMinOrderByAggregateInput
}

input FriendRequestOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Notifications: NotificationsOrderByRelationAggregateInput
  NotificationStatus: NotificationStatusOrderByWithRelationInput
}

input FriendRequestRelationFilter
  @join__type(graph: PROFILING)
{
  is: FriendRequestWhereInput
  isNot: FriendRequestWhereInput
}

enum FriendRequestScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  senderProfileId @join__enumValue(graph: PROFILING)
  receiverProfileId @join__enumValue(graph: PROFILING)
  notificationStatusId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input FriendRequestScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [FriendRequestScalarWhereInput!]
  OR: [FriendRequestScalarWhereInput!]
  NOT: [FriendRequestScalarWhereInput!]
  id: StringFilter
  senderProfileId: StringFilter
  receiverProfileId: StringFilter
  notificationStatusId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FriendRequestScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [FriendRequestScalarWhereWithAggregatesInput!]
  OR: [FriendRequestScalarWhereWithAggregatesInput!]
  NOT: [FriendRequestScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  senderProfileId: StringWithAggregatesFilter
  receiverProfileId: StringWithAggregatesFilter
  notificationStatusId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FriendRequestUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
}

input FriendRequestUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateManyWithoutNotificationsNestedInput
  @join__type(graph: PROFILING)
{
  create: FriendRequestCreateWithoutNotificationsInput
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  connect: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput!]
  updateMany: [FriendRequestUpdateManyWithWhereWithoutNotificationsInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
}

input FriendRequestUpdateManyWithWhereWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  where: FriendRequestScalarWhereInput!
  data: FriendRequestUpdateManyMutationInput!
}

input FriendRequestUpdateOneWithoutNotificationStatusNestedInput
  @join__type(graph: PROFILING)
{
  create: FriendRequestCreateWithoutNotificationStatusInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  upsert: FriendRequestUpsertWithoutNotificationStatusInput
  disconnect: Boolean
  delete: Boolean
  connect: FriendRequestWhereUniqueInput
  update: FriendRequestUpdateWithoutNotificationStatusInput
}

input FriendRequestUpdateWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
}

input FriendRequestUpdateWithoutNotificationStatusInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
}

input FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutNotificationsInput!
}

input FriendRequestUpsertWithoutNotificationStatusInput
  @join__type(graph: PROFILING)
{
  update: FriendRequestUpdateWithoutNotificationStatusInput!
  create: FriendRequestCreateWithoutNotificationStatusInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutNotificationsInput!
  create: FriendRequestCreateWithoutNotificationsInput!
}

input FriendRequestWhereInput
  @join__type(graph: PROFILING)
{
  AND: [FriendRequestWhereInput!]
  OR: [FriendRequestWhereInput!]
  NOT: [FriendRequestWhereInput!]
  id: StringFilter
  senderProfileId: StringFilter
  receiverProfileId: StringFilter
  notificationStatusId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Notifications: NotificationsListRelationFilter
  NotificationStatus: NotificationStatusWhereInput
}

input FriendRequestWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  notificationStatusId: String
}

type Geometry
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: Location
  Country: Country
  State: State
  City: City
}

input GeometryAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryCreateInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
  Country: CountryCreateNestedOneWithoutGeometryInput
  State: StateCreateNestedOneWithoutGeometryInput
  City: CityCreateNestedOneWithoutGeometryInput
}

input GeometryCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  latitude: Float!
  longitude: Float!
}

input GeometryCreateNestedOneWithoutCityInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutCityInput
  connectOrCreate: GeometryCreateOrConnectWithoutCityInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateNestedOneWithoutCountryInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutCountryInput
  connectOrCreate: GeometryCreateOrConnectWithoutCountryInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateNestedOneWithoutStateInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutStateInput
  connectOrCreate: GeometryCreateOrConnectWithoutStateInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateOrConnectWithoutCityInput
  @join__type(graph: PROFILING)
{
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutCityInput!
}

input GeometryCreateOrConnectWithoutCountryInput
  @join__type(graph: PROFILING)
{
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutCountryInput!
}

input GeometryCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryCreateOrConnectWithoutStateInput
  @join__type(graph: PROFILING)
{
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutStateInput!
}

input GeometryCreateWithoutCityInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
  Country: CountryCreateNestedOneWithoutGeometryInput
  State: StateCreateNestedOneWithoutGeometryInput
}

input GeometryCreateWithoutCountryInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
  State: StateCreateNestedOneWithoutGeometryInput
  City: CityCreateNestedOneWithoutGeometryInput
}

input GeometryCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Country: CountryCreateNestedOneWithoutGeometryInput
  State: StateCreateNestedOneWithoutGeometryInput
  City: CityCreateNestedOneWithoutGeometryInput
}

input GeometryCreateWithoutStateInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
  Country: CountryCreateNestedOneWithoutGeometryInput
  City: CityCreateNestedOneWithoutGeometryInput
}

input GeometryMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  _count: GeometryCountOrderByAggregateInput
  _avg: GeometryAvgOrderByAggregateInput
  _max: GeometryMaxOrderByAggregateInput
  _min: GeometryMinOrderByAggregateInput
  _sum: GeometrySumOrderByAggregateInput
}

input GeometryOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  Location: LocationOrderByWithRelationInput
  Country: CountryOrderByWithRelationInput
  State: StateOrderByWithRelationInput
  City: CityOrderByWithRelationInput
}

input GeometryRelationFilter
  @join__type(graph: PROFILING)
{
  is: GeometryWhereInput
  isNot: GeometryWhereInput
}

enum GeometryScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index15 @join__enumValue(graph: PROFILING)
  latitude @join__enumValue(graph: PROFILING)
  longitude @join__enumValue(graph: PROFILING)
}

input GeometryScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [GeometryScalarWhereWithAggregatesInput!]
  OR: [GeometryScalarWhereWithAggregatesInput!]
  NOT: [GeometryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
}

input GeometrySumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryUpdateInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
  Country: CountryUpdateOneWithoutGeometryNestedInput
  State: StateUpdateOneWithoutGeometryNestedInput
  City: CityUpdateOneWithoutGeometryNestedInput
}

input GeometryUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input GeometryUpdateOneRequiredWithoutCityNestedInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutCityInput
  connectOrCreate: GeometryCreateOrConnectWithoutCityInput
  upsert: GeometryUpsertWithoutCityInput
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutCityInput
}

input GeometryUpdateOneRequiredWithoutCountryNestedInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutCountryInput
  connectOrCreate: GeometryCreateOrConnectWithoutCountryInput
  upsert: GeometryUpsertWithoutCountryInput
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutCountryInput
}

input GeometryUpdateOneRequiredWithoutStateNestedInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutStateInput
  connectOrCreate: GeometryCreateOrConnectWithoutStateInput
  upsert: GeometryUpsertWithoutStateInput
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutStateInput
}

input GeometryUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  upsert: GeometryUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutLocationInput
}

input GeometryUpdateWithoutCityInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
  Country: CountryUpdateOneWithoutGeometryNestedInput
  State: StateUpdateOneWithoutGeometryNestedInput
}

input GeometryUpdateWithoutCountryInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
  State: StateUpdateOneWithoutGeometryNestedInput
  City: CityUpdateOneWithoutGeometryNestedInput
}

input GeometryUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Country: CountryUpdateOneWithoutGeometryNestedInput
  State: StateUpdateOneWithoutGeometryNestedInput
  City: CityUpdateOneWithoutGeometryNestedInput
}

input GeometryUpdateWithoutStateInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
  Country: CountryUpdateOneWithoutGeometryNestedInput
  City: CityUpdateOneWithoutGeometryNestedInput
}

input GeometryUpsertWithoutCityInput
  @join__type(graph: PROFILING)
{
  update: GeometryUpdateWithoutCityInput!
  create: GeometryCreateWithoutCityInput!
}

input GeometryUpsertWithoutCountryInput
  @join__type(graph: PROFILING)
{
  update: GeometryUpdateWithoutCountryInput!
  create: GeometryCreateWithoutCountryInput!
}

input GeometryUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: GeometryUpdateWithoutLocationInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryUpsertWithoutStateInput
  @join__type(graph: PROFILING)
{
  update: GeometryUpdateWithoutStateInput!
  create: GeometryCreateWithoutStateInput!
}

input GeometryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GeometryWhereInput!]
  OR: [GeometryWhereInput!]
  NOT: [GeometryWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  Location: LocationWhereInput
  Country: CountryWhereInput
  State: StateWhereInput
  City: CityWhereInput
}

input GeometryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Group
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  photos(where: PhotoWhereInput, orderBy: [PhotoOrderByWithRelationInput!], cursor: PhotoWhereUniqueInput, take: Int, skip: Int, distinct: [PhotoScalarFieldEnum!]): [Photo!]!
  Profile(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GroupCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutGroupInput
  Profile: ProfileCreateNestedManyWithoutGroupsInput
}

input GroupCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutProfileInput
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateNestedOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedManyWithoutGroupsInput
}

input GroupCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutGroupInput
}

input GroupListRelationFilter
  @join__type(graph: PROFILING)
{
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input GroupMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input GroupOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: GroupCountOrderByAggregateInput
  _max: GroupMaxOrderByAggregateInput
  _min: GroupMinOrderByAggregateInput
}

input GroupOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  Profile: ProfileOrderByRelationAggregateInput
}

input GroupRelationFilter
  @join__type(graph: PROFILING)
{
  is: GroupWhereInput
  isNot: GroupWhereInput
}

enum GroupScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input GroupScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GroupScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [GroupScalarWhereWithAggregatesInput!]
  OR: [GroupScalarWhereWithAggregatesInput!]
  NOT: [GroupScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input GroupUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
}

input GroupUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutProfileInput
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutProfileInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupScalarWhereInput!
  data: GroupUpdateManyMutationInput!
}

input GroupUpdateOneWithoutPhotosNestedInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  upsert: GroupUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutPhotosInput
}

input GroupUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
}

input GroupUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
}

input GroupUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutProfileInput!
}

input GroupUpsertWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  update: GroupUpdateWithoutPhotosInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutProfileInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  photos: PhotoListRelationFilter
  Profile: ProfileListRelationFilter
}

input GroupWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type H3Index5VenueRecommendation
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index5: String!
  venuesProfileIds: [String!]!
  Area: Area
  areaId: String
  keywordSuggestions: [Json!]!
  timesRequested: Int
  SearchAreaMetrics(where: SearchAreaMetricsWhereInput, orderBy: [SearchAreaMetricsOrderByWithRelationInput!], cursor: SearchAreaMetricsWhereUniqueInput, take: Int, skip: Int, distinct: [SearchAreaMetricsScalarFieldEnum!]): [SearchAreaMetrics!]!
  Vote(where: VoteWhereInput, orderBy: [VoteOrderByWithRelationInput!], cursor: VoteWhereUniqueInput, take: Int, skip: Int, distinct: [VoteScalarFieldEnum!]): [Vote!]!
}

input H3Index5VenueRecommendationAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input H3Index5VenueRecommendationCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
}

input H3Index5VenueRecommendationCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  Area: AreaCreateNestedOneWithoutH3Index5VenueRecommendationInput
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index5VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index5VenueRecommendationInput
}

input H3Index5VenueRecommendationCreatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input H3Index5VenueRecommendationCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  areaId: String
  keywordSuggestions: [Json!]
  timesRequested: Int
}

input H3Index5VenueRecommendationCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutAreaInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutAreaInput
  connect: H3Index5VenueRecommendationWhereUniqueInput
}

input H3Index5VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutSearchAreaMetricsInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  connect: H3Index5VenueRecommendationWhereUniqueInput
}

input H3Index5VenueRecommendationCreateNestedOneWithoutVoteInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutVoteInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutVoteInput
  connect: H3Index5VenueRecommendationWhereUniqueInput
}

input H3Index5VenueRecommendationCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: H3Index5VenueRecommendationWhereUniqueInput!
  create: H3Index5VenueRecommendationCreateWithoutAreaInput!
}

input H3Index5VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  where: H3Index5VenueRecommendationWhereUniqueInput!
  create: H3Index5VenueRecommendationCreateWithoutSearchAreaMetricsInput!
}

input H3Index5VenueRecommendationCreateOrConnectWithoutVoteInput
  @join__type(graph: PROFILING)
{
  where: H3Index5VenueRecommendationWhereUniqueInput!
  create: H3Index5VenueRecommendationCreateWithoutVoteInput!
}

input H3Index5VenueRecommendationCreatevenuesProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input H3Index5VenueRecommendationCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index5VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index5VenueRecommendationInput
}

input H3Index5VenueRecommendationCreateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  Area: AreaCreateNestedOneWithoutH3Index5VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index5VenueRecommendationInput
}

input H3Index5VenueRecommendationCreateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  Area: AreaCreateNestedOneWithoutH3Index5VenueRecommendationInput
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index5VenueRecommendationInput
}

input H3Index5VenueRecommendationMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
}

input H3Index5VenueRecommendationMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
}

input H3Index5VenueRecommendationOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
  _count: H3Index5VenueRecommendationCountOrderByAggregateInput
  _avg: H3Index5VenueRecommendationAvgOrderByAggregateInput
  _max: H3Index5VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index5VenueRecommendationMinOrderByAggregateInput
  _sum: H3Index5VenueRecommendationSumOrderByAggregateInput
}

input H3Index5VenueRecommendationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
  Area: AreaOrderByWithRelationInput
  SearchAreaMetrics: SearchAreaMetricsOrderByRelationAggregateInput
  Vote: VoteOrderByRelationAggregateInput
}

input H3Index5VenueRecommendationRelationFilter
  @join__type(graph: PROFILING)
{
  is: H3Index5VenueRecommendationWhereInput
  isNot: H3Index5VenueRecommendationWhereInput
}

enum H3Index5VenueRecommendationScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index5 @join__enumValue(graph: PROFILING)
  venuesProfileIds @join__enumValue(graph: PROFILING)
  areaId @join__enumValue(graph: PROFILING)
  keywordSuggestions @join__enumValue(graph: PROFILING)
  timesRequested @join__enumValue(graph: PROFILING)
}

input H3Index5VenueRecommendationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  NOT: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index5: StringWithAggregatesFilter
  venuesProfileIds: StringNullableListFilter
  areaId: StringNullableWithAggregatesFilter
  keywordSuggestions: JsonNullableListFilter
  timesRequested: IntNullableWithAggregatesFilter
}

input H3Index5VenueRecommendationSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input H3Index5VenueRecommendationUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index5VenueRecommendationNestedInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index5VenueRecommendationNestedInput
}

input H3Index5VenueRecommendationUpdatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input H3Index5VenueRecommendationUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
}

input H3Index5VenueRecommendationUpdateOneWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutAreaInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutAreaInput
  upsert: H3Index5VenueRecommendationUpsertWithoutAreaInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index5VenueRecommendationWhereUniqueInput
  update: H3Index5VenueRecommendationUpdateWithoutAreaInput
}

input H3Index5VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutSearchAreaMetricsInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  upsert: H3Index5VenueRecommendationUpsertWithoutSearchAreaMetricsInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index5VenueRecommendationWhereUniqueInput
  update: H3Index5VenueRecommendationUpdateWithoutSearchAreaMetricsInput
}

input H3Index5VenueRecommendationUpdateOneWithoutVoteNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index5VenueRecommendationCreateWithoutVoteInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutVoteInput
  upsert: H3Index5VenueRecommendationUpsertWithoutVoteInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index5VenueRecommendationWhereUniqueInput
  update: H3Index5VenueRecommendationUpdateWithoutVoteInput
}

input H3Index5VenueRecommendationUpdatevenuesProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input H3Index5VenueRecommendationUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index5VenueRecommendationNestedInput
}

input H3Index5VenueRecommendationUpdateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index5VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index5VenueRecommendationNestedInput
}

input H3Index5VenueRecommendationUpdateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index5VenueRecommendationNestedInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index5VenueRecommendationNestedInput
}

input H3Index5VenueRecommendationUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: H3Index5VenueRecommendationUpdateWithoutAreaInput!
  create: H3Index5VenueRecommendationCreateWithoutAreaInput!
}

input H3Index5VenueRecommendationUpsertWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  update: H3Index5VenueRecommendationUpdateWithoutSearchAreaMetricsInput!
  create: H3Index5VenueRecommendationCreateWithoutSearchAreaMetricsInput!
}

input H3Index5VenueRecommendationUpsertWithoutVoteInput
  @join__type(graph: PROFILING)
{
  update: H3Index5VenueRecommendationUpdateWithoutVoteInput!
  create: H3Index5VenueRecommendationCreateWithoutVoteInput!
}

input H3Index5VenueRecommendationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [H3Index5VenueRecommendationWhereInput!]
  OR: [H3Index5VenueRecommendationWhereInput!]
  NOT: [H3Index5VenueRecommendationWhereInput!]
  id: StringFilter
  h3Index5: StringFilter
  venuesProfileIds: StringNullableListFilter
  areaId: StringNullableFilter
  keywordSuggestions: JsonNullableListFilter
  timesRequested: IntNullableFilter
  Area: AreaWhereInput
  SearchAreaMetrics: SearchAreaMetricsListRelationFilter
  Vote: VoteListRelationFilter
}

input H3Index5VenueRecommendationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index5: String
  areaId: String
}

type H3Index6VenueRecommendation
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index6: String!
  venuesProfileIds: [String!]!
  Area: Area
  areaId: String
  keywordSuggestions: [Json!]!
  timesRequested: Int
  SearchAreaMetrics(where: SearchAreaMetricsWhereInput, orderBy: [SearchAreaMetricsOrderByWithRelationInput!], cursor: SearchAreaMetricsWhereUniqueInput, take: Int, skip: Int, distinct: [SearchAreaMetricsScalarFieldEnum!]): [SearchAreaMetrics!]!
  Vote(where: VoteWhereInput, orderBy: [VoteOrderByWithRelationInput!], cursor: VoteWhereUniqueInput, take: Int, skip: Int, distinct: [VoteScalarFieldEnum!]): [Vote!]!
  createdAt: DateTime!
}

input H3Index6VenueRecommendationAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input H3Index6VenueRecommendationCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
  createdAt: SortOrder
}

input H3Index6VenueRecommendationCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  createdAt: DateTime
  Area: AreaCreateNestedOneWithoutH3Index6VenueRecommendationInput
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index6VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index6VenueRecommendationInput
}

input H3Index6VenueRecommendationCreatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input H3Index6VenueRecommendationCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  areaId: String
  keywordSuggestions: [Json!]
  timesRequested: Int
  createdAt: DateTime
}

input H3Index6VenueRecommendationCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutAreaInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutAreaInput
  connect: H3Index6VenueRecommendationWhereUniqueInput
}

input H3Index6VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutSearchAreaMetricsInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  connect: H3Index6VenueRecommendationWhereUniqueInput
}

input H3Index6VenueRecommendationCreateNestedOneWithoutVoteInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutVoteInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutVoteInput
  connect: H3Index6VenueRecommendationWhereUniqueInput
}

input H3Index6VenueRecommendationCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: H3Index6VenueRecommendationWhereUniqueInput!
  create: H3Index6VenueRecommendationCreateWithoutAreaInput!
}

input H3Index6VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  where: H3Index6VenueRecommendationWhereUniqueInput!
  create: H3Index6VenueRecommendationCreateWithoutSearchAreaMetricsInput!
}

input H3Index6VenueRecommendationCreateOrConnectWithoutVoteInput
  @join__type(graph: PROFILING)
{
  where: H3Index6VenueRecommendationWhereUniqueInput!
  create: H3Index6VenueRecommendationCreateWithoutVoteInput!
}

input H3Index6VenueRecommendationCreatevenuesProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input H3Index6VenueRecommendationCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  createdAt: DateTime
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index6VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index6VenueRecommendationInput
}

input H3Index6VenueRecommendationCreateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  createdAt: DateTime
  Area: AreaCreateNestedOneWithoutH3Index6VenueRecommendationInput
  Vote: VoteCreateNestedManyWithoutH3Index6VenueRecommendationInput
}

input H3Index6VenueRecommendationCreateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: Int
  createdAt: DateTime
  Area: AreaCreateNestedOneWithoutH3Index6VenueRecommendationInput
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutH3Index6VenueRecommendationInput
}

input H3Index6VenueRecommendationMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
  createdAt: SortOrder
}

input H3Index6VenueRecommendationMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index6: SortOrder
  areaId: SortOrder
  timesRequested: SortOrder
  createdAt: SortOrder
}

input H3Index6VenueRecommendationOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
  createdAt: SortOrder
  _count: H3Index6VenueRecommendationCountOrderByAggregateInput
  _avg: H3Index6VenueRecommendationAvgOrderByAggregateInput
  _max: H3Index6VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index6VenueRecommendationMinOrderByAggregateInput
  _sum: H3Index6VenueRecommendationSumOrderByAggregateInput
}

input H3Index6VenueRecommendationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
  areaId: SortOrder
  keywordSuggestions: SortOrder
  timesRequested: SortOrder
  createdAt: SortOrder
  Area: AreaOrderByWithRelationInput
  SearchAreaMetrics: SearchAreaMetricsOrderByRelationAggregateInput
  Vote: VoteOrderByRelationAggregateInput
}

input H3Index6VenueRecommendationRelationFilter
  @join__type(graph: PROFILING)
{
  is: H3Index6VenueRecommendationWhereInput
  isNot: H3Index6VenueRecommendationWhereInput
}

enum H3Index6VenueRecommendationScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index6 @join__enumValue(graph: PROFILING)
  venuesProfileIds @join__enumValue(graph: PROFILING)
  areaId @join__enumValue(graph: PROFILING)
  keywordSuggestions @join__enumValue(graph: PROFILING)
  timesRequested @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
}

input H3Index6VenueRecommendationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  NOT: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index6: StringWithAggregatesFilter
  venuesProfileIds: StringNullableListFilter
  areaId: StringNullableWithAggregatesFilter
  keywordSuggestions: JsonNullableListFilter
  timesRequested: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input H3Index6VenueRecommendationSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  timesRequested: SortOrder
}

input H3Index6VenueRecommendationUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index6VenueRecommendationNestedInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index6VenueRecommendationNestedInput
}

input H3Index6VenueRecommendationUpdatekeywordSuggestionsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input H3Index6VenueRecommendationUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input H3Index6VenueRecommendationUpdateOneWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutAreaInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutAreaInput
  upsert: H3Index6VenueRecommendationUpsertWithoutAreaInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index6VenueRecommendationWhereUniqueInput
  update: H3Index6VenueRecommendationUpdateWithoutAreaInput
}

input H3Index6VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutSearchAreaMetricsInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutSearchAreaMetricsInput
  upsert: H3Index6VenueRecommendationUpsertWithoutSearchAreaMetricsInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index6VenueRecommendationWhereUniqueInput
  update: H3Index6VenueRecommendationUpdateWithoutSearchAreaMetricsInput
}

input H3Index6VenueRecommendationUpdateOneWithoutVoteNestedInput
  @join__type(graph: PROFILING)
{
  create: H3Index6VenueRecommendationCreateWithoutVoteInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutVoteInput
  upsert: H3Index6VenueRecommendationUpsertWithoutVoteInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index6VenueRecommendationWhereUniqueInput
  update: H3Index6VenueRecommendationUpdateWithoutVoteInput
}

input H3Index6VenueRecommendationUpdatevenuesProfileIdsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input H3Index6VenueRecommendationUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index6VenueRecommendationNestedInput
}

input H3Index6VenueRecommendationUpdateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index6VenueRecommendationNestedInput
  Vote: VoteUpdateManyWithoutH3Index6VenueRecommendationNestedInput
}

input H3Index6VenueRecommendationUpdateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  keywordSuggestions: [Json!]
  timesRequested: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutH3Index6VenueRecommendationNestedInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutH3Index6VenueRecommendationNestedInput
}

input H3Index6VenueRecommendationUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: H3Index6VenueRecommendationUpdateWithoutAreaInput!
  create: H3Index6VenueRecommendationCreateWithoutAreaInput!
}

input H3Index6VenueRecommendationUpsertWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  update: H3Index6VenueRecommendationUpdateWithoutSearchAreaMetricsInput!
  create: H3Index6VenueRecommendationCreateWithoutSearchAreaMetricsInput!
}

input H3Index6VenueRecommendationUpsertWithoutVoteInput
  @join__type(graph: PROFILING)
{
  update: H3Index6VenueRecommendationUpdateWithoutVoteInput!
  create: H3Index6VenueRecommendationCreateWithoutVoteInput!
}

input H3Index6VenueRecommendationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [H3Index6VenueRecommendationWhereInput!]
  OR: [H3Index6VenueRecommendationWhereInput!]
  NOT: [H3Index6VenueRecommendationWhereInput!]
  id: StringFilter
  h3Index6: StringFilter
  venuesProfileIds: StringNullableListFilter
  areaId: StringNullableFilter
  keywordSuggestions: JsonNullableListFilter
  timesRequested: IntNullableFilter
  createdAt: DateTimeFilter
  Area: AreaWhereInput
  SearchAreaMetrics: SearchAreaMetricsListRelationFilter
  Vote: VoteListRelationFilter
}

input H3Index6VenueRecommendationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index6: String
  areaId: String
}

type IdentifiableInformation
  @join__type(graph: PROFILING)
{
  id: ID!
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime!
  updatedAt: DateTime!
  Profile: Profile!
  profileId: String!
}

input IdentifiableInformationCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutIdentifiableInformationInput!
}

input IdentifiableInformationCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
  profileId: String!
}

input IdentifiableInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  connect: IdentifiableInformationWhereUniqueInput
}

input IdentifiableInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: IdentifiableInformationWhereUniqueInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IdentifiableInformationMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
  _count: IdentifiableInformationCountOrderByAggregateInput
  _max: IdentifiableInformationMaxOrderByAggregateInput
  _min: IdentifiableInformationMinOrderByAggregateInput
}

input IdentifiableInformationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
  Profile: ProfileOrderByWithRelationInput
}

input IdentifiableInformationRelationFilter
  @join__type(graph: PROFILING)
{
  is: IdentifiableInformationWhereInput
  isNot: IdentifiableInformationWhereInput
}

enum IdentifiableInformationScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  storageId @join__enumValue(graph: PROFILING)
  username @join__enumValue(graph: PROFILING)
  fullname @join__enumValue(graph: PROFILING)
  firstname @join__enumValue(graph: PROFILING)
  lastname @join__enumValue(graph: PROFILING)
  nickname @join__enumValue(graph: PROFILING)
  surname @join__enumValue(graph: PROFILING)
  birthday @join__enumValue(graph: PROFILING)
  gender @join__enumValue(graph: PROFILING)
  lookfor @join__enumValue(graph: PROFILING)
  hometown @join__enumValue(graph: PROFILING)
  currenttown @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
}

input IdentifiableInformationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  OR: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  NOT: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  storageId: StringNullableWithAggregatesFilter
  username: StringWithAggregatesFilter
  fullname: StringNullableWithAggregatesFilter
  firstname: StringNullableWithAggregatesFilter
  lastname: StringNullableWithAggregatesFilter
  nickname: StringNullableWithAggregatesFilter
  surname: StringNullableWithAggregatesFilter
  birthday: DateTimeNullableWithAggregatesFilter
  gender: StringNullableWithAggregatesFilter
  lookfor: StringNullableWithAggregatesFilter
  hometown: StringNullableWithAggregatesFilter
  currenttown: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

input IdentifiableInformationUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput
}

input IdentifiableInformationUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentifiableInformationUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  upsert: IdentifiableInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: IdentifiableInformationWhereUniqueInput
  update: IdentifiableInformationUpdateWithoutProfileInput
}

input IdentifiableInformationUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentifiableInformationUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: IdentifiableInformationUpdateWithoutProfileInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [IdentifiableInformationWhereInput!]
  OR: [IdentifiableInformationWhereInput!]
  NOT: [IdentifiableInformationWhereInput!]
  id: StringFilter
  storageId: StringNullableFilter
  username: StringFilter
  fullname: StringNullableFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  nickname: StringNullableFilter
  surname: StringNullableFilter
  birthday: DateTimeNullableFilter
  gender: StringNullableFilter
  lookfor: StringNullableFilter
  hometown: StringNullableFilter
  currenttown: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  profileId: StringFilter
  Profile: ProfileWhereInput
}

input IdentifiableInformationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  username: String
  profileId: String
}

input IntFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input IntFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input IntNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input IntWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

scalar join__FieldSet

enum join__Graph {
  MANAGING @join__graph(name: "managing", url: "http://localhost:5002/graphql")
  PROFILING @join__graph(name: "profiling", url: "http://localhost:5001/graphql")
}

scalar Json
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)

input JsonNullableListFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type LegalAgreement
  @join__type(graph: PROFILING)
{
  id: ID!
  aggreed: Boolean!
  Document: Document!
  documentId: Int!
  Credentials: Credentials
  credentialsId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LegalAgreementAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  documentId: SortOrder
}

input LegalAgreementCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
}

input LegalAgreementCreateManyCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  documentId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [LegalAgreementCreateManyCredentialsInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyDocumentInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  credentialsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyDocumentInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [LegalAgreementCreateManyDocumentInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  documentId: Int!
  credentialsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateNestedManyWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: LegalAgreementCreateWithoutCredentialsInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  connect: [LegalAgreementWhereUniqueInput!]
}

input LegalAgreementCreateNestedManyWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  create: LegalAgreementCreateWithoutDocumentInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
  connect: [LegalAgreementWhereUniqueInput!]
}

input LegalAgreementCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementCreateOrConnectWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  create: LegalAgreementCreateWithoutDocumentInput!
}

input LegalAgreementCreateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
}

input LegalAgreementCreateWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
}

input LegalAgreementListRelationFilter
  @join__type(graph: PROFILING)
{
  every: LegalAgreementWhereInput
  some: LegalAgreementWhereInput
  none: LegalAgreementWhereInput
}

input LegalAgreementMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input LegalAgreementOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LegalAgreementCountOrderByAggregateInput
  _avg: LegalAgreementAvgOrderByAggregateInput
  _max: LegalAgreementMaxOrderByAggregateInput
  _min: LegalAgreementMinOrderByAggregateInput
  _sum: LegalAgreementSumOrderByAggregateInput
}

input LegalAgreementOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Document: DocumentOrderByWithRelationInput
  Credentials: CredentialsOrderByWithRelationInput
}

enum LegalAgreementScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  aggreed @join__enumValue(graph: PROFILING)
  documentId @join__enumValue(graph: PROFILING)
  credentialsId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input LegalAgreementScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LegalAgreementScalarWhereInput!]
  OR: [LegalAgreementScalarWhereInput!]
  NOT: [LegalAgreementScalarWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  documentId: IntFilter
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LegalAgreementScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [LegalAgreementScalarWhereWithAggregatesInput!]
  OR: [LegalAgreementScalarWhereWithAggregatesInput!]
  NOT: [LegalAgreementScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  aggreed: BoolWithAggregatesFilter
  documentId: IntWithAggregatesFilter
  credentialsId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LegalAgreementSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  documentId: SortOrder
}

input LegalAgreementUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
}

input LegalAgreementUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyWithoutCredentialsNestedInput
  @join__type(graph: PROFILING)
{
  create: LegalAgreementCreateWithoutCredentialsInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  set: [LegalAgreementWhereUniqueInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  delete: [LegalAgreementWhereUniqueInput!]
  connect: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutCredentialsInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
}

input LegalAgreementUpdateManyWithoutDocumentNestedInput
  @join__type(graph: PROFILING)
{
  create: LegalAgreementCreateWithoutDocumentInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput!]
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
  set: [LegalAgreementWhereUniqueInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  delete: [LegalAgreementWhereUniqueInput!]
  connect: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutDocumentInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
}

input LegalAgreementUpdateManyWithWhereWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementScalarWhereInput!
  data: LegalAgreementUpdateManyMutationInput!
}

input LegalAgreementUpdateManyWithWhereWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementScalarWhereInput!
  data: LegalAgreementUpdateManyMutationInput!
}

input LegalAgreementUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
}

input LegalAgreementUpdateWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
}

input LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  data: LegalAgreementUpdateWithoutCredentialsInput!
}

input LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  data: LegalAgreementUpdateWithoutDocumentInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  update: LegalAgreementUpdateWithoutCredentialsInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  update: LegalAgreementUpdateWithoutDocumentInput!
  create: LegalAgreementCreateWithoutDocumentInput!
}

input LegalAgreementWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LegalAgreementWhereInput!]
  OR: [LegalAgreementWhereInput!]
  NOT: [LegalAgreementWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  documentId: IntFilter
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Document: DocumentWhereInput
  Credentials: CredentialsWhereInput
}

input LegalAgreementWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LiveOutPersonal
  @join__type(graph: PROFILING)
{
  id: ID!
  Personal: Personal!
  personalId: String!
  Out(where: OutWhereInput, orderBy: [OutOrderByWithRelationInput!], cursor: OutWhereUniqueInput, take: Int, skip: Int, distinct: [OutScalarFieldEnum!]): [Out!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutPersonalCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  Out: OutCreateNestedManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  personalId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalCreateNestedOneWithoutOutInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutOutInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutOutInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateOrConnectWithoutOutInput
  @join__type(graph: PROFILING)
{
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutOutInput!
}

input LiveOutPersonalCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalCreateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
}

input LiveOutPersonalCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Out: OutCreateNestedManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LiveOutPersonalCountOrderByAggregateInput
  _max: LiveOutPersonalMaxOrderByAggregateInput
  _min: LiveOutPersonalMinOrderByAggregateInput
}

input LiveOutPersonalOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Personal: PersonalOrderByWithRelationInput
  Out: OutOrderByRelationAggregateInput
}

input LiveOutPersonalRelationFilter
  @join__type(graph: PROFILING)
{
  is: LiveOutPersonalWhereInput
  isNot: LiveOutPersonalWhereInput
}

enum LiveOutPersonalScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  personalId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input LiveOutPersonalScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  OR: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  NOT: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  personalId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LiveOutPersonalUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  Out: OutUpdateManyWithoutLiveOutPersonalNestedInput
}

input LiveOutPersonalUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateOneWithoutOutNestedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutOutInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutOutInput
  upsert: LiveOutPersonalUpsertWithoutOutInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutOutInput
}

input LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  upsert: LiveOutPersonalUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutPersonalInput
}

input LiveOutPersonalUpdateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
}

input LiveOutPersonalUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutPersonalNestedInput
}

input LiveOutPersonalUpsertWithoutOutInput
  @join__type(graph: PROFILING)
{
  update: LiveOutPersonalUpdateWithoutOutInput!
  create: LiveOutPersonalCreateWithoutOutInput!
}

input LiveOutPersonalUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: LiveOutPersonalUpdateWithoutPersonalInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutPersonalWhereInput!]
  OR: [LiveOutPersonalWhereInput!]
  NOT: [LiveOutPersonalWhereInput!]
  id: StringFilter
  personalId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Personal: PersonalWhereInput
  Out: OutListRelationFilter
}

input LiveOutPersonalWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalId: String
}

type LiveOutVenue
  @join__type(graph: PROFILING)
{
  id: ID!
  Venue: Venue!
  venueId: String!
  Out(where: OutWhereInput, orderBy: [OutOrderByWithRelationInput!], cursor: OutWhereUniqueInput, take: Int, skip: Int, distinct: [OutScalarFieldEnum!]): [Out!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutVenueCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  Out: OutCreateNestedManyWithoutLiveOutVenueInput
}

input LiveOutVenueCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  venueId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueCreateNestedOneWithoutOutInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutOutInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutOutInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateOrConnectWithoutOutInput
  @join__type(graph: PROFILING)
{
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutOutInput!
}

input LiveOutVenueCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueCreateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
}

input LiveOutVenueCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Out: OutCreateNestedManyWithoutLiveOutVenueInput
}

input LiveOutVenueMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LiveOutVenueCountOrderByAggregateInput
  _max: LiveOutVenueMaxOrderByAggregateInput
  _min: LiveOutVenueMinOrderByAggregateInput
}

input LiveOutVenueOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
  Out: OutOrderByRelationAggregateInput
}

input LiveOutVenueRelationFilter
  @join__type(graph: PROFILING)
{
  is: LiveOutVenueWhereInput
  isNot: LiveOutVenueWhereInput
}

enum LiveOutVenueScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  venueId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input LiveOutVenueScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutVenueScalarWhereWithAggregatesInput!]
  OR: [LiveOutVenueScalarWhereWithAggregatesInput!]
  NOT: [LiveOutVenueScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  venueId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LiveOutVenueUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  Out: OutUpdateManyWithoutLiveOutVenueNestedInput
}

input LiveOutVenueUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateOneWithoutOutNestedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutOutInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutOutInput
  upsert: LiveOutVenueUpsertWithoutOutInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutOutInput
}

input LiveOutVenueUpdateOneWithoutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  upsert: LiveOutVenueUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutVenueInput
}

input LiveOutVenueUpdateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
}

input LiveOutVenueUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutLiveOutVenueNestedInput
}

input LiveOutVenueUpsertWithoutOutInput
  @join__type(graph: PROFILING)
{
  update: LiveOutVenueUpdateWithoutOutInput!
  create: LiveOutVenueCreateWithoutOutInput!
}

input LiveOutVenueUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: LiveOutVenueUpdateWithoutVenueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutVenueWhereInput!]
  OR: [LiveOutVenueWhereInput!]
  NOT: [LiveOutVenueWhereInput!]
  id: StringFilter
  venueId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
  Out: OutListRelationFilter
}

input LiveOutVenueWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  venueId: String
}

type LiveVenueTotals
  @join__type(graph: PROFILING)
{
  totaled: [Out!]
  joined: [Out!]
}

type Location
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index: String!
  Area: Area
  areaId: String
  plusCode: PluseCode
  pluseCodeId: String
  Address: Address
  addressId: String
  Geometry: Geometry
  geometryId: Int
  Venue: Venue
  venueId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LocationAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input LocationCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  areaId: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  Area: AreaCreateNestedOneWithoutLocationInput
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateManyAddressInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  areaId: String
  pluseCodeId: String
  geometryId: Int
  venueId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateManyAddressInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [LocationCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input LocationCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  areaId: String
  pluseCodeId: String
  addressId: String
  geometryId: Int
  venueId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateNestedManyWithoutAddressInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutAddressInput
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  createMany: LocationCreateManyAddressInputEnvelope
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutAreaInput
  connectOrCreate: LocationCreateOrConnectWithoutAreaInput
  connect: LocationWhereUniqueInput
}

input LocationCreateNestedOneWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutGeometryInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  connect: LocationWhereUniqueInput
}

input LocationCreateNestedOneWithoutPlusCodeInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutPlusCodeInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  connect: LocationWhereUniqueInput
}

input LocationCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOrConnectWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutAddressInput!
}

input LocationCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutAreaInput!
}

input LocationCreateOrConnectWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutGeometryInput!
}

input LocationCreateOrConnectWithoutPlusCodeInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutPlusCodeInput!
}

input LocationCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationCreateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  Area: AreaCreateNestedOneWithoutLocationInput
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  Area: AreaCreateNestedOneWithoutLocationInput
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutPlusCodeInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  Area: AreaCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
}

input LocationCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  Area: AreaCreateNestedOneWithoutLocationInput
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
}

input LocationListRelationFilter
  @join__type(graph: PROFILING)
{
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input LocationMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  areaId: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  areaId: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input LocationOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  areaId: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LocationCountOrderByAggregateInput
  _avg: LocationAvgOrderByAggregateInput
  _max: LocationMaxOrderByAggregateInput
  _min: LocationMinOrderByAggregateInput
  _sum: LocationSumOrderByAggregateInput
}

input LocationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  areaId: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Area: AreaOrderByWithRelationInput
  plusCode: PluseCodeOrderByWithRelationInput
  Address: AddressOrderByWithRelationInput
  Geometry: GeometryOrderByWithRelationInput
  Venue: VenueOrderByWithRelationInput
}

input LocationRelationFilter
  @join__type(graph: PROFILING)
{
  is: LocationWhereInput
  isNot: LocationWhereInput
}

enum LocationScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index @join__enumValue(graph: PROFILING)
  areaId @join__enumValue(graph: PROFILING)
  pluseCodeId @join__enumValue(graph: PROFILING)
  addressId @join__enumValue(graph: PROFILING)
  geometryId @join__enumValue(graph: PROFILING)
  venueId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input LocationScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  NOT: [LocationScalarWhereInput!]
  id: StringFilter
  h3Index: StringFilter
  areaId: StringNullableFilter
  pluseCodeId: StringNullableFilter
  addressId: StringNullableFilter
  geometryId: IntNullableFilter
  venueId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LocationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [LocationScalarWhereWithAggregatesInput!]
  OR: [LocationScalarWhereWithAggregatesInput!]
  NOT: [LocationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index: StringWithAggregatesFilter
  areaId: StringNullableWithAggregatesFilter
  pluseCodeId: StringNullableWithAggregatesFilter
  addressId: StringNullableWithAggregatesFilter
  geometryId: IntNullableWithAggregatesFilter
  venueId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LocationSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input LocationUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutLocationNestedInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateManyWithoutAddressNestedInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutAddressInput
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: LocationCreateManyAddressInputEnvelope
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [LocationUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [LocationScalarWhereInput!]
}

input LocationUpdateManyWithWhereWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: LocationScalarWhereInput!
  data: LocationUpdateManyMutationInput!
}

input LocationUpdateOneWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutAreaInput
  connectOrCreate: LocationCreateOrConnectWithoutAreaInput
  upsert: LocationUpsertWithoutAreaInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutAreaInput
}

input LocationUpdateOneWithoutGeometryNestedInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutGeometryInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  upsert: LocationUpsertWithoutGeometryInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutGeometryInput
}

input LocationUpdateOneWithoutPlusCodeNestedInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutPlusCodeInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  upsert: LocationUpsertWithoutPlusCodeInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutPlusCodeInput
}

input LocationUpdateOneWithoutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  upsert: LocationUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutVenueInput
}

input LocationUpdateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutLocationNestedInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutLocationNestedInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutPlusCodeInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Area: AreaUpdateOneWithoutLocationNestedInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
}

input LocationUpdateWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutAddressInput!
}

input LocationUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: LocationUpdateWithoutAreaInput!
  create: LocationCreateWithoutAreaInput!
}

input LocationUpsertWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  update: LocationUpdateWithoutGeometryInput!
  create: LocationCreateWithoutGeometryInput!
}

input LocationUpsertWithoutPlusCodeInput
  @join__type(graph: PROFILING)
{
  update: LocationUpdateWithoutPlusCodeInput!
  create: LocationCreateWithoutPlusCodeInput!
}

input LocationUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: LocationUpdateWithoutVenueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationUpsertWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutAddressInput!
  create: LocationCreateWithoutAddressInput!
}

input LocationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: StringFilter
  h3Index: StringFilter
  areaId: StringNullableFilter
  pluseCodeId: StringNullableFilter
  addressId: StringNullableFilter
  geometryId: IntNullableFilter
  venueId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Area: AreaWhereInput
  plusCode: PluseCodeWhereInput
  Address: AddressWhereInput
  Geometry: GeometryWhereInput
  Venue: VenueWhereInput
}

input LocationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  areaId: String
  pluseCodeId: String
  geometryId: Int
  venueId: String
}

input MessageCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  responses: MessageCreateNestedManyWithoutResponseInput
  response: MessageCreateNestedOneWithoutResponsesInput
}

input MessageCreateManyChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  responseId: String
  senderId: String!
}

input MessageCreateManyChatroomInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [MessageCreateManyChatroomInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  chatroomId: String
  responseId: String
  senderId: String!
}

input MessageCreateManyResponseInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  chatroomId: String
  senderId: String!
}

input MessageCreateManyResponseInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [MessageCreateManyResponseInput!]!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutChatroomInput
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutResponseInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponseInput
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedOneWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateOrConnectWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageCreateOrConnectWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageCreateOrConnectWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageCreateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  responses: MessageCreateNestedManyWithoutResponseInput
  response: MessageCreateNestedOneWithoutResponsesInput
}

input MessageCreateWithoutResponseInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  responses: MessageCreateNestedManyWithoutResponseInput
}

input MessageCreateWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  response: MessageCreateNestedOneWithoutResponsesInput
}

input MessageListRelationFilter
  @join__type(graph: PROFILING)
{
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input MessageMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input MessageOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
  _count: MessageCountOrderByAggregateInput
  _max: MessageMaxOrderByAggregateInput
  _min: MessageMinOrderByAggregateInput
}

input MessageOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
  Chatroom: ChatroomOrderByWithRelationInput
  responses: MessageOrderByRelationAggregateInput
  response: MessageOrderByWithRelationInput
}

input MessageRelationFilter
  @join__type(graph: PROFILING)
{
  is: MessageWhereInput
  isNot: MessageWhereInput
}

enum MessageScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  message @join__enumValue(graph: PROFILING)
  chatroomId @join__enumValue(graph: PROFILING)
  responseId @join__enumValue(graph: PROFILING)
  senderId @join__enumValue(graph: PROFILING)
}

input MessageScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  id: StringFilter
  message: StringFilter
  chatroomId: StringNullableFilter
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [MessageScalarWhereWithAggregatesInput!]
  OR: [MessageScalarWhereWithAggregatesInput!]
  NOT: [MessageScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  chatroomId: StringNullableWithAggregatesFilter
  responseId: StringNullableWithAggregatesFilter
  senderId: StringWithAggregatesFilter
}

input MessageUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
}

input MessageUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutChatroomNestedInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutChatroomInput
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithoutResponseNestedInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponseInput
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutResponseInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutResponseInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateManyWithWhereWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateOneWithoutResponsesNestedInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  upsert: MessageUpsertWithoutResponsesInput
  disconnect: Boolean
  delete: Boolean
  connect: MessageWhereUniqueInput
  update: MessageUpdateWithoutResponsesInput
}

input MessageUpdateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
}

input MessageUpdateWithoutResponseInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
}

input MessageUpdateWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
}

input MessageUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChatroomInput!
}

input MessageUpdateWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutResponseInput!
}

input MessageUpsertWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  update: MessageUpdateWithoutResponsesInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChatroomInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageUpsertWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutResponseInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageWhereInput
  @join__type(graph: PROFILING)
{
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: StringFilter
  message: StringFilter
  chatroomId: StringNullableFilter
  responseId: StringNullableFilter
  senderId: StringFilter
  Chatroom: ChatroomWhereInput
  responses: MessageListRelationFilter
  response: MessageWhereInput
}

input MessageWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type Mutation
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  checkManaging: Boolean! @join__field(graph: MANAGING)
  createADeviceManager(profileId: String!): ClientDeviceManager! @join__field(graph: MANAGING)
  switchDeviceProfile(profileId: String!, profileType: ProfileType = GUEST): RefreshDeviceManagerDeviceManagerResponseUnion! @join__field(graph: MANAGING)
  refreshDeviceManager: RefreshDeviceManagerDeviceManagerResponseUnion! @join__field(graph: MANAGING)
  removeDeviceProfileFromDeviceManager(profileId: String!, profileType: ProfileType = GUEST): Boolean! @join__field(graph: MANAGING)
  upsertDevicePushToken(androidToken: String, appleToken: String, expoToken: String): Boolean! @join__field(graph: MANAGING)
  sendAuthenticatorDeviceOwnerCode(where: CustomCodeWhereInput, data: CodeDataInput): CodeResponse! @join__field(graph: PROFILING)
  sendAuthenticatorForgotPasswordCode(where: CustomCodeWhereInput, data: CodeDataInput): CodeResponse! @join__field(graph: PROFILING)
  createFriendRequest(senderProfileId: String!, receiversProfileId: [String!]!): Boolean! @join__field(graph: PROFILING)
  deleteFriendRequest(friendRequestId: String!): Boolean! @join__field(graph: PROFILING)
  removeFriend(relationshipId: String!): Boolean! @join__field(graph: PROFILING)
  acceptFriendRequest(venueIdMetAt: String, friendRequestId: String!): Relationship! @join__field(graph: PROFILING)
  declineFriendRequest(friendRequestId: String!): Boolean! @join__field(graph: PROFILING)
  qrAddFriend(qrCodeProfileId: String!, dataHash: String!): Relationship! @join__field(graph: PROFILING)
  addPersonalTotalsVenue(profileIdVenue: String, profileIdPersonal: String): Boolean! @join__field(graph: PROFILING)
  removePersonalTotalsVenue(profileIdVenue: String, profileIdPersonal: String): Boolean! @join__field(graph: PROFILING)
  removeAllFromVenue(profileIdVenue: String): Boolean! @join__field(graph: PROFILING)
  addPersonalJoinsVenue(profileIdVenue: String, profileIdPersonal: String): Profile! @join__field(graph: PROFILING)
  removePersonalJoinsVenue(outId: String!): Profile! @join__field(graph: PROFILING)
  upvoteH6ComingArea(comingAreaId: String!): Boolean! @join__field(graph: PROFILING)
  upvoteH6VenueRemmendation(venueRecommendationId: String!): Boolean! @join__field(graph: PROFILING)
  createGuestProfile: ProfileResponseUnion! @join__field(graph: PROFILING)
  createVenueProfile(data: CreateVenueDataInput): ProfileResponseUnion! @join__field(graph: PROFILING)
  createPersonalProfile(data: CreatePersonalDataInput): ProfileResponseUnion! @join__field(graph: PROFILING)
  updateProfileIdentifiableInformation(data: IdentifiableInformationUpdateInput!): ProfileResponseUnion! @join__field(graph: PROFILING)
  updateOneProfile(where: ProfileWhereUniqueInput!, data: ProfileUpdateInput!): Profile @join__field(graph: PROFILING)
  updateStoryPhotos(storyId: String, photos: PhotoCreateManyProfileInputEnvelope, disconnectId: String): Boolean! @join__field(graph: PROFILING)
  updateStoryEmojimood(storyId: String, emojimoodId: Int!): Boolean! @join__field(graph: PROFILING)
  updateThemeManagerSwitchTheme(id: String!, themeId: String!): ProfileTheme! @join__field(graph: PROFILING)
}

input NestedBoolFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

input NestedBoolWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedDateTimeFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedEnumAppTypeNullableFilter
  @join__type(graph: MANAGING)
{
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
}

input NestedEnumAppTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
{
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
  _count: NestedIntNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  _max: NestedEnumAppTypeNullableFilter
}

input NestedEnumOutTypeFilter
  @join__type(graph: PROFILING)
{
  equals: OutType
  in: [OutType!]
  notIn: [OutType!]
  not: OutType
}

input NestedEnumOutTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: OutType
  in: [OutType!]
  notIn: [OutType!]
  not: OutType
  _count: NestedIntFilter
  _min: NestedEnumOutTypeFilter
  _max: NestedEnumOutTypeFilter
}

input NestedEnumPhotoTypeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
}

input NestedEnumPhotoTypeNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
  _count: NestedIntNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
}

input NestedEnumProfileTypeFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input NestedEnumProfileTypeNullableFilter
  @join__type(graph: MANAGING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input NestedEnumProfileTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
}

input NestedEnumProfileTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntFilter
  _min: NestedEnumProfileTypeFilter
  _max: NestedEnumProfileTypeFilter
}

input NestedEnumSecureDataTypeFilter
  @join__type(graph: PROFILING)
{
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
}

input NestedEnumSecureDataTypeWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
  _count: NestedIntFilter
  _min: NestedEnumSecureDataTypeFilter
  _max: NestedEnumSecureDataTypeFilter
}

input NestedEnumTypeOfDocumentFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
}

input NestedEnumTypeOfDocumentWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
  _count: NestedIntFilter
  _min: NestedEnumTypeOfDocumentFilter
  _max: NestedEnumTypeOfDocumentFilter
}

input NestedFloatFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedIntFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedStringFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

union NotificationFriendRequestStatusResponse
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
  @join__unionMember(graph: PROFILING, member: "RejectedFriendsResponse")
  @join__unionMember(graph: PROFILING, member: "FriendRequest")
  @join__unionMember(graph: PROFILING, member: "Relationship")
 = ErrorProfiling | RejectedFriendsResponse | FriendRequest | Relationship

type NotificationResponse
  @join__type(graph: PROFILING)
{
  friendRequestNotifications: [FriendRequest!]
}

type Notifications
  @join__type(graph: PROFILING)
{
  id: ID!
  Profile: Profile!
  profileId: String!
  FriendRequests(where: FriendRequestWhereInput, orderBy: [FriendRequestOrderByWithRelationInput!], cursor: FriendRequestWhereUniqueInput, take: Int, skip: Int, distinct: [FriendRequestScalarFieldEnum!]): [FriendRequest!]!
}

input NotificationsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
}

input NotificationsCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
}

input NotificationsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
}

input NotificationsCreateNestedManyWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  create: NotificationsCreateWithoutFriendRequestsInput
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  connect: [NotificationsWhereUniqueInput!]
}

input NotificationsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: NotificationsCreateWithoutProfileInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  connect: NotificationsWhereUniqueInput
}

input NotificationsCreateOrConnectWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  where: NotificationsWhereUniqueInput!
  create: NotificationsCreateWithoutFriendRequestsInput!
}

input NotificationsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: NotificationsWhereUniqueInput!
  create: NotificationsCreateWithoutProfileInput!
}

input NotificationsCreateWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
}

input NotificationsCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
}

input NotificationsListRelationFilter
  @join__type(graph: PROFILING)
{
  every: NotificationsWhereInput
  some: NotificationsWhereInput
  none: NotificationsWhereInput
}

input NotificationsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
}

input NotificationsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
}

input NotificationsOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input NotificationsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  _count: NotificationsCountOrderByAggregateInput
  _max: NotificationsMaxOrderByAggregateInput
  _min: NotificationsMinOrderByAggregateInput
}

input NotificationsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  FriendRequests: FriendRequestOrderByRelationAggregateInput
}

input NotificationsRelationFilter
  @join__type(graph: PROFILING)
{
  is: NotificationsWhereInput
  isNot: NotificationsWhereInput
}

enum NotificationsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
}

input NotificationsScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [NotificationsScalarWhereInput!]
  OR: [NotificationsScalarWhereInput!]
  NOT: [NotificationsScalarWhereInput!]
  id: StringFilter
  profileId: StringFilter
}

input NotificationsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [NotificationsScalarWhereWithAggregatesInput!]
  OR: [NotificationsScalarWhereWithAggregatesInput!]
  NOT: [NotificationsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

type NotificationStatus
  @join__type(graph: PROFILING)
{
  id: ID!
  FriendRequest: FriendRequest
  isAccepted: Boolean!
  isChecked: Boolean!
  isAnswered: Boolean!
  isCanceled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NotificationStatusCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  FriendRequest: FriendRequestCreateNestedOneWithoutNotificationStatusInput
}

input NotificationStatusCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationStatusCreateNestedOneWithoutFriendRequestInput
  @join__type(graph: PROFILING)
{
  create: NotificationStatusCreateWithoutFriendRequestInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  connect: NotificationStatusWhereUniqueInput
}

input NotificationStatusCreateOrConnectWithoutFriendRequestInput
  @join__type(graph: PROFILING)
{
  where: NotificationStatusWhereUniqueInput!
  create: NotificationStatusCreateWithoutFriendRequestInput!
}

input NotificationStatusCreateWithoutFriendRequestInput
  @join__type(graph: PROFILING)
{
  id: String
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationStatusMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: NotificationStatusCountOrderByAggregateInput
  _max: NotificationStatusMaxOrderByAggregateInput
  _min: NotificationStatusMinOrderByAggregateInput
}

input NotificationStatusOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  FriendRequest: FriendRequestOrderByWithRelationInput
}

input NotificationStatusRelationFilter
  @join__type(graph: PROFILING)
{
  is: NotificationStatusWhereInput
  isNot: NotificationStatusWhereInput
}

enum NotificationStatusScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  isAccepted @join__enumValue(graph: PROFILING)
  isChecked @join__enumValue(graph: PROFILING)
  isAnswered @join__enumValue(graph: PROFILING)
  isCanceled @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input NotificationStatusScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [NotificationStatusScalarWhereWithAggregatesInput!]
  OR: [NotificationStatusScalarWhereWithAggregatesInput!]
  NOT: [NotificationStatusScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isAccepted: BoolWithAggregatesFilter
  isChecked: BoolWithAggregatesFilter
  isAnswered: BoolWithAggregatesFilter
  isCanceled: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input NotificationStatusUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  FriendRequest: FriendRequestUpdateOneWithoutNotificationStatusNestedInput
}

input NotificationStatusUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  @join__type(graph: PROFILING)
{
  create: NotificationStatusCreateWithoutFriendRequestInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  upsert: NotificationStatusUpsertWithoutFriendRequestInput
  connect: NotificationStatusWhereUniqueInput
  update: NotificationStatusUpdateWithoutFriendRequestInput
}

input NotificationStatusUpdateWithoutFriendRequestInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpsertWithoutFriendRequestInput
  @join__type(graph: PROFILING)
{
  update: NotificationStatusUpdateWithoutFriendRequestInput!
  create: NotificationStatusCreateWithoutFriendRequestInput!
}

input NotificationStatusWhereInput
  @join__type(graph: PROFILING)
{
  AND: [NotificationStatusWhereInput!]
  OR: [NotificationStatusWhereInput!]
  NOT: [NotificationStatusWhereInput!]
  id: StringFilter
  isAccepted: BoolFilter
  isChecked: BoolFilter
  isAnswered: BoolFilter
  isCanceled: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  FriendRequest: FriendRequestWhereInput
}

input NotificationStatusWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input NotificationsUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
}

input NotificationsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
}

input NotificationsUpdateManyWithoutFriendRequestsNestedInput
  @join__type(graph: PROFILING)
{
  create: NotificationsCreateWithoutFriendRequestsInput
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  upsert: [NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput!]
  set: [NotificationsWhereUniqueInput!]
  disconnect: [NotificationsWhereUniqueInput!]
  delete: [NotificationsWhereUniqueInput!]
  connect: [NotificationsWhereUniqueInput!]
  update: [NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput!]
  updateMany: [NotificationsUpdateManyWithWhereWithoutFriendRequestsInput!]
  deleteMany: [NotificationsScalarWhereInput!]
}

input NotificationsUpdateManyWithWhereWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  where: NotificationsScalarWhereInput!
  data: NotificationsUpdateManyMutationInput!
}

input NotificationsUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: NotificationsCreateWithoutProfileInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  upsert: NotificationsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: NotificationsWhereUniqueInput
  update: NotificationsUpdateWithoutProfileInput
}

input NotificationsUpdateWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationsUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
}

input NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  where: NotificationsWhereUniqueInput!
  data: NotificationsUpdateWithoutFriendRequestsInput!
}

input NotificationsUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: NotificationsUpdateWithoutProfileInput!
  create: NotificationsCreateWithoutProfileInput!
}

input NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput
  @join__type(graph: PROFILING)
{
  where: NotificationsWhereUniqueInput!
  update: NotificationsUpdateWithoutFriendRequestsInput!
  create: NotificationsCreateWithoutFriendRequestsInput!
}

input NotificationsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [NotificationsWhereInput!]
  OR: [NotificationsWhereInput!]
  NOT: [NotificationsWhereInput!]
  id: StringFilter
  profileId: StringFilter
  Profile: ProfileWhereInput
  FriendRequests: FriendRequestListRelationFilter
}

input NotificationsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

input NullableBoolFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: DateTime
}

input NullableEnumAppTypeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
{
  set: AppType
}

input NullableEnumPhotoTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: PhotoType
}

input NullableEnumProfileTypeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
{
  set: ProfileType
}

input NullableIntFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: String
}

type Out
  @join__type(graph: PROFILING)
{
  id: ID!
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStats
  venueStatsId: String
  PersonalStats: PersonalStats
  personalStatsId: String
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonal
  liveOutPersonalId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OutCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input OutCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
}

input OutCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OutCreateManyLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input OutCreateManyLiveOutPersonalInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [OutCreateManyLiveOutPersonalInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OutCreateManyLiveOutVenueInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [OutCreateManyLiveOutVenueInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OutCreateManyPersonalStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [OutCreateManyPersonalStatsInput!]!
  skipDuplicates: Boolean
}

input OutCreateManyVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OutCreateManyVenueStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [OutCreateManyVenueStatsInput!]!
  skipDuplicates: Boolean
}

input OutCreateNestedManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutPersonalInput!]
  createMany: OutCreateManyLiveOutPersonalInputEnvelope
  connect: [OutWhereUniqueInput!]
}

input OutCreateNestedManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutLiveOutVenueInput
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutVenueInput!]
  createMany: OutCreateManyLiveOutVenueInputEnvelope
  connect: [OutWhereUniqueInput!]
}

input OutCreateNestedManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutPersonalStatsInput
  connectOrCreate: [OutCreateOrConnectWithoutPersonalStatsInput!]
  createMany: OutCreateManyPersonalStatsInputEnvelope
  connect: [OutWhereUniqueInput!]
}

input OutCreateNestedManyWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutVenueStatsInput
  connectOrCreate: [OutCreateOrConnectWithoutVenueStatsInput!]
  createMany: OutCreateManyVenueStatsInputEnvelope
  connect: [OutWhereUniqueInput!]
}

input OutCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  create: OutCreateWithoutLiveOutPersonalInput!
}

input OutCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  create: OutCreateWithoutLiveOutVenueInput!
}

input OutCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  create: OutCreateWithoutPersonalStatsInput!
}

input OutCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  create: OutCreateWithoutVenueStatsInput!
}

input OutCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
}

input OutCreateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
}

input OutCreateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
}

input OutCreateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  type: OutType!
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  PersonalStats: PersonalStatsCreateNestedOneWithoutOutInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutOutInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutOutInput
}

input OutListRelationFilter
  @join__type(graph: PROFILING)
{
  every: OutWhereInput
  some: OutWhereInput
  none: OutWhereInput
}

input OutMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input OutMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input OutOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input OutOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: OutCountOrderByAggregateInput
  _max: OutMaxOrderByAggregateInput
  _min: OutMinOrderByAggregateInput
}

input OutOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  VenueStats: VenueStatsOrderByWithRelationInput
  PersonalStats: PersonalStatsOrderByWithRelationInput
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
}

enum OutScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  type @join__enumValue(graph: PROFILING)
  personalProfileId @join__enumValue(graph: PROFILING)
  venueProfileId @join__enumValue(graph: PROFILING)
  venueStatsId @join__enumValue(graph: PROFILING)
  personalStatsId @join__enumValue(graph: PROFILING)
  liveOutVenueId @join__enumValue(graph: PROFILING)
  leftAt @join__enumValue(graph: PROFILING)
  liveOutPersonalId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input OutScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [OutScalarWhereInput!]
  OR: [OutScalarWhereInput!]
  NOT: [OutScalarWhereInput!]
  id: StringFilter
  type: EnumOutTypeFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input OutScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [OutScalarWhereWithAggregatesInput!]
  OR: [OutScalarWhereWithAggregatesInput!]
  NOT: [OutScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  type: EnumOutTypeWithAggregatesFilter
  personalProfileId: StringWithAggregatesFilter
  venueProfileId: StringWithAggregatesFilter
  venueStatsId: StringNullableWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
  liveOutVenueId: StringNullableWithAggregatesFilter
  leftAt: DateTimeNullableWithAggregatesFilter
  liveOutPersonalId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum OutType
  @join__type(graph: PROFILING)
{
  TOTAL @join__enumValue(graph: PROFILING)
  JOIN @join__enumValue(graph: PROFILING)
}

input OutUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
}

input OutUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OutUpdateManyWithoutLiveOutPersonalNestedInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutPersonalInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
  createMany: OutCreateManyLiveOutPersonalInputEnvelope
  set: [OutWhereUniqueInput!]
  disconnect: [OutWhereUniqueInput!]
  delete: [OutWhereUniqueInput!]
  connect: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [OutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  deleteMany: [OutScalarWhereInput!]
}

input OutUpdateManyWithoutLiveOutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutLiveOutVenueInput
  connectOrCreate: [OutCreateOrConnectWithoutLiveOutVenueInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
  createMany: OutCreateManyLiveOutVenueInputEnvelope
  set: [OutWhereUniqueInput!]
  disconnect: [OutWhereUniqueInput!]
  delete: [OutWhereUniqueInput!]
  connect: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [OutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  deleteMany: [OutScalarWhereInput!]
}

input OutUpdateManyWithoutPersonalStatsNestedInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutPersonalStatsInput
  connectOrCreate: [OutCreateOrConnectWithoutPersonalStatsInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
  createMany: OutCreateManyPersonalStatsInputEnvelope
  set: [OutWhereUniqueInput!]
  disconnect: [OutWhereUniqueInput!]
  delete: [OutWhereUniqueInput!]
  connect: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [OutUpdateManyWithWhereWithoutPersonalStatsInput!]
  deleteMany: [OutScalarWhereInput!]
}

input OutUpdateManyWithoutVenueStatsNestedInput
  @join__type(graph: PROFILING)
{
  create: OutCreateWithoutVenueStatsInput
  connectOrCreate: [OutCreateOrConnectWithoutVenueStatsInput!]
  upsert: [OutUpsertWithWhereUniqueWithoutVenueStatsInput!]
  createMany: OutCreateManyVenueStatsInputEnvelope
  set: [OutWhereUniqueInput!]
  disconnect: [OutWhereUniqueInput!]
  delete: [OutWhereUniqueInput!]
  connect: [OutWhereUniqueInput!]
  update: [OutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [OutUpdateManyWithWhereWithoutVenueStatsInput!]
  deleteMany: [OutScalarWhereInput!]
}

input OutUpdateManyWithWhereWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: OutScalarWhereInput!
  data: OutUpdateManyMutationInput!
}

input OutUpdateManyWithWhereWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: OutScalarWhereInput!
  data: OutUpdateManyMutationInput!
}

input OutUpdateManyWithWhereWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: OutScalarWhereInput!
  data: OutUpdateManyMutationInput!
}

input OutUpdateManyWithWhereWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: OutScalarWhereInput!
  data: OutUpdateManyMutationInput!
}

input OutUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
}

input OutUpdateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  type: EnumOutTypeFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutOutNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutOutNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutOutNestedInput
}

input OutUpdateWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  data: OutUpdateWithoutLiveOutPersonalInput!
}

input OutUpdateWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  data: OutUpdateWithoutLiveOutVenueInput!
}

input OutUpdateWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  data: OutUpdateWithoutPersonalStatsInput!
}

input OutUpdateWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  data: OutUpdateWithoutVenueStatsInput!
}

input OutUpsertWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  update: OutUpdateWithoutLiveOutPersonalInput!
  create: OutCreateWithoutLiveOutPersonalInput!
}

input OutUpsertWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  update: OutUpdateWithoutLiveOutVenueInput!
  create: OutCreateWithoutLiveOutVenueInput!
}

input OutUpsertWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  update: OutUpdateWithoutPersonalStatsInput!
  create: OutCreateWithoutPersonalStatsInput!
}

input OutUpsertWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: OutWhereUniqueInput!
  update: OutUpdateWithoutVenueStatsInput!
  create: OutCreateWithoutVenueStatsInput!
}

input OutWhereInput
  @join__type(graph: PROFILING)
{
  AND: [OutWhereInput!]
  OR: [OutWhereInput!]
  NOT: [OutWhereInput!]
  id: StringFilter
  type: EnumOutTypeFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  VenueStats: VenueStatsWhereInput
  PersonalStats: PersonalStatsWhereInput
  LiveOutVenue: LiveOutVenueWhereInput
  LiveOutPersonal: LiveOutPersonalWhereInput
}

input OutWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type Password
  @join__type(graph: PROFILING)
{
  id: ID!
  password: String!
  AuthenticationProvider: AuthenticationProvider!
  authenitcationProviderId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PasswordCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutPasswordInput!
}

input PasswordCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  password: String!
  authenitcationProviderId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  connect: PasswordWhereUniqueInput
}

input PasswordCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PasswordWhereUniqueInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: String
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PasswordCountOrderByAggregateInput
  _max: PasswordMaxOrderByAggregateInput
  _min: PasswordMinOrderByAggregateInput
}

input PasswordOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
}

input PasswordRelationFilter
  @join__type(graph: PROFILING)
{
  is: PasswordWhereInput
  isNot: PasswordWhereInput
}

enum PasswordScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  password @join__enumValue(graph: PROFILING)
  authenitcationProviderId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input PasswordScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PasswordScalarWhereWithAggregatesInput!]
  OR: [PasswordScalarWhereWithAggregatesInput!]
  NOT: [PasswordScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  authenitcationProviderId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PasswordUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput
}

input PasswordUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING)
{
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  upsert: PasswordUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: PasswordWhereUniqueInput
  update: PasswordUpdateWithoutAuthenticationProviderInput
}

input PasswordUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  update: PasswordUpdateWithoutAuthenticationProviderInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  id: StringFilter
  password: StringFilter
  authenitcationProviderId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
}

input PasswordWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenitcationProviderId: String
}

input PathAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  latitude: SortOrder
  longitude: SortOrder
}

input PathCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
  TonightPath: TonightPathCreateNestedOneWithoutPathInput
}

input PathCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  TonightPathId: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathCreateManyTonightPathInput
  @join__type(graph: PROFILING)
{
  id: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathCreateManyTonightPathInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PathCreateManyTonightPathInput!]!
  skipDuplicates: Boolean
}

input PathCreateNestedManyWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  create: PathCreateWithoutTonightPathInput
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  createMany: PathCreateManyTonightPathInputEnvelope
  connect: [PathWhereUniqueInput!]
}

input PathCreateOrConnectWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  where: PathWhereUniqueInput!
  create: PathCreateWithoutTonightPathInput!
}

input PathCreateWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  id: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathListRelationFilter
  @join__type(graph: PROFILING)
{
  every: PathWhereInput
  some: PathWhereInput
  none: PathWhereInput
}

input PathMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input PathOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
  _count: PathCountOrderByAggregateInput
  _avg: PathAvgOrderByAggregateInput
  _max: PathMaxOrderByAggregateInput
  _min: PathMinOrderByAggregateInput
  _sum: PathSumOrderByAggregateInput
}

input PathOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
  TonightPath: TonightPathOrderByWithRelationInput
}

enum PathScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  TonightPathId @join__enumValue(graph: PROFILING)
  latitude @join__enumValue(graph: PROFILING)
  longitude @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
}

input PathScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PathScalarWhereInput!]
  OR: [PathScalarWhereInput!]
  NOT: [PathScalarWhereInput!]
  id: StringFilter
  TonightPathId: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  createdAt: DateTimeFilter
}

input PathScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PathScalarWhereWithAggregatesInput!]
  OR: [PathScalarWhereWithAggregatesInput!]
  NOT: [PathScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  TonightPathId: StringNullableWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input PathSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  latitude: SortOrder
  longitude: SortOrder
}

input PathUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  TonightPath: TonightPathUpdateOneWithoutPathNestedInput
}

input PathUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateManyWithoutTonightPathNestedInput
  @join__type(graph: PROFILING)
{
  create: PathCreateWithoutTonightPathInput
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutTonightPathInput!]
  createMany: PathCreateManyTonightPathInputEnvelope
  set: [PathWhereUniqueInput!]
  disconnect: [PathWhereUniqueInput!]
  delete: [PathWhereUniqueInput!]
  connect: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutTonightPathInput!]
  updateMany: [PathUpdateManyWithWhereWithoutTonightPathInput!]
  deleteMany: [PathScalarWhereInput!]
}

input PathUpdateManyWithWhereWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  where: PathScalarWhereInput!
  data: PathUpdateManyMutationInput!
}

input PathUpdateWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateWithWhereUniqueWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  where: PathWhereUniqueInput!
  data: PathUpdateWithoutTonightPathInput!
}

input PathUpsertWithWhereUniqueWithoutTonightPathInput
  @join__type(graph: PROFILING)
{
  where: PathWhereUniqueInput!
  update: PathUpdateWithoutTonightPathInput!
  create: PathCreateWithoutTonightPathInput!
}

input PathWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PathWhereInput!]
  OR: [PathWhereInput!]
  NOT: [PathWhereInput!]
  id: StringFilter
  TonightPathId: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  createdAt: DateTimeFilter
  TonightPath: TonightPathWhereInput
}

input PathWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum Permission
  @join__type(graph: PROFILING)
{
  OWNER @join__enumValue(graph: PROFILING)
  ADMINISTATOR @join__enumValue(graph: PROFILING)
  GENERAL @join__enumValue(graph: PROFILING)
}

type Personal
  @join__type(graph: PROFILING)
{
  id: ID!
  Profile: Profile!
  profileId: String!
  PersonalStats: PersonalStats
  personalStatsId: String
  LiveOutPersonal: LiveOutPersonal
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
}

input PersonalCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  personalStatsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalCreateNestedOneWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
}

input PersonalCreateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
}

input PersonalCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
}

input PersonalMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PersonalCountOrderByAggregateInput
  _max: PersonalMaxOrderByAggregateInput
  _min: PersonalMinOrderByAggregateInput
}

input PersonalOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
  PersonalStats: PersonalStatsOrderByWithRelationInput
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
}

input PersonalRelationFilter
  @join__type(graph: PROFILING)
{
  is: PersonalWhereInput
  isNot: PersonalWhereInput
}

enum PersonalScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  personalStatsId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input PersonalScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalScalarWhereWithAggregatesInput!]
  OR: [PersonalScalarWhereWithAggregatesInput!]
  NOT: [PersonalScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PersonalStats
  @join__type(graph: PROFILING)
{
  id: ID!
  Personal: Personal
  Out(where: OutWhereInput, orderBy: [OutOrderByWithRelationInput!], cursor: OutWhereUniqueInput, take: Int, skip: Int, distinct: [OutScalarFieldEnum!]): [Out!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalStatsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  Out: OutCreateNestedManyWithoutPersonalStatsInput
}

input PersonalStatsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsCreateNestedOneWithoutOutInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutOutInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutOutInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateOrConnectWithoutOutInput
  @join__type(graph: PROFILING)
{
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutOutInput!
}

input PersonalStatsCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsCreateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
}

input PersonalStatsCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Out: OutCreateNestedManyWithoutPersonalStatsInput
}

input PersonalStatsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PersonalStatsCountOrderByAggregateInput
  _max: PersonalStatsMaxOrderByAggregateInput
  _min: PersonalStatsMinOrderByAggregateInput
}

input PersonalStatsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Personal: PersonalOrderByWithRelationInput
  Out: OutOrderByRelationAggregateInput
}

input PersonalStatsRelationFilter
  @join__type(graph: PROFILING)
{
  is: PersonalStatsWhereInput
  isNot: PersonalStatsWhereInput
}

enum PersonalStatsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input PersonalStatsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalStatsScalarWhereWithAggregatesInput!]
  OR: [PersonalStatsScalarWhereWithAggregatesInput!]
  NOT: [PersonalStatsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PersonalStatsUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  Out: OutUpdateManyWithoutPersonalStatsNestedInput
}

input PersonalStatsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateOneWithoutOutNestedInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutOutInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutOutInput
  upsert: PersonalStatsUpsertWithoutOutInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutOutInput
}

input PersonalStatsUpdateOneWithoutPersonalNestedInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  upsert: PersonalStatsUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutPersonalInput
}

input PersonalStatsUpdateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
}

input PersonalStatsUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutPersonalStatsNestedInput
}

input PersonalStatsUpsertWithoutOutInput
  @join__type(graph: PROFILING)
{
  update: PersonalStatsUpdateWithoutOutInput!
  create: PersonalStatsCreateWithoutOutInput!
}

input PersonalStatsUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: PersonalStatsUpdateWithoutPersonalInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalStatsWhereInput!]
  OR: [PersonalStatsWhereInput!]
  NOT: [PersonalStatsWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Personal: PersonalWhereInput
  Out: OutListRelationFilter
}

input PersonalStatsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input PersonalUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
}

input PersonalUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  upsert: PersonalUpsertWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutLiveOutPersonalInput
}

input PersonalUpdateOneWithoutPersonalStatsNestedInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  upsert: PersonalUpsertWithoutPersonalStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutPersonalStatsInput
}

input PersonalUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  upsert: PersonalUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutProfileInput
}

input PersonalUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
}

input PersonalUpdateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
}

input PersonalUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
}

input PersonalUpsertWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutLiveOutPersonalInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalUpsertWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutPersonalStatsInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutProfileInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalWhereInput!]
  OR: [PersonalWhereInput!]
  NOT: [PersonalWhereInput!]
  id: StringFilter
  profileId: StringFilter
  personalStatsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
  PersonalStats: PersonalStatsWhereInput
  LiveOutPersonal: LiveOutPersonalWhereInput
}

input PersonalWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  personalStatsId: String
}

type Phone
  @join__type(graph: PROFILING)
{
  id: ID!
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  AuthenticationProvider(where: AuthenticationProviderWhereInput, orderBy: [AuthenticationProviderOrderByWithRelationInput!], cursor: AuthenticationProviderWhereUniqueInput, take: Int, skip: Int, distinct: [AuthenticationProviderScalarFieldEnum!]): [AuthenticationProvider!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhoneAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input PhoneCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneCreateInput
  @join__type(graph: PROFILING)
{
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutPhonesInput
}

input PhoneCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: PhoneCreateWithoutAuthenticationProviderInput
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [PhoneWhereUniqueInput!]
}

input PhoneCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneInput
  @join__type(graph: PROFILING)
{
  """Accepted phone formats: 5193334444 or +15193334444"""
  number: String
  countryCode: String
  countryCallingCode: String
  completeNumber: String
}

input PhoneListRelationFilter
  @join__type(graph: PROFILING)
{
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input PhoneMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input PhoneOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PhoneCountOrderByAggregateInput
  _avg: PhoneAvgOrderByAggregateInput
  _max: PhoneMaxOrderByAggregateInput
  _min: PhoneMinOrderByAggregateInput
  _sum: PhoneSumOrderByAggregateInput
}

input PhoneOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
}

enum PhoneScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  number @join__enumValue(graph: PROFILING)
  completeNumber @join__enumValue(graph: PROFILING)
  countryCode @join__enumValue(graph: PROFILING)
  canUseAsRecovery @join__enumValue(graph: PROFILING)
  countryCallingCode @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input PhoneScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhoneScalarWhereInput!]
  OR: [PhoneScalarWhereInput!]
  NOT: [PhoneScalarWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhoneScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PhoneScalarWhereWithAggregatesInput!]
  OR: [PhoneScalarWhereWithAggregatesInput!]
  NOT: [PhoneScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  number: StringWithAggregatesFilter
  completeNumber: StringNullableWithAggregatesFilter
  countryCode: StringNullableWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  countryCallingCode: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PhoneSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input PhoneUpdateInput
  @join__type(graph: PROFILING)
{
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutPhonesNestedInput
}

input PhoneUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING)
{
  create: PhoneCreateWithoutAuthenticationProviderInput
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [PhoneWhereUniqueInput!]
  disconnect: [PhoneWhereUniqueInput!]
  delete: [PhoneWhereUniqueInput!]
  connect: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [PhoneScalarWhereInput!]
}

input PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneScalarWhereInput!
  data: PhoneUpdateManyMutationInput!
}

input PhoneUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateWithoutAuthenticationProviderInput!
}

input PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  update: PhoneUpdateWithoutAuthenticationProviderInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
}

input PhoneWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Photo
  @join__type(graph: PROFILING)
{
  id: ID!
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean!
  Story: Story
  storyId: String
  Group: Group
  groupId: String
  Profile: Profile
  profileId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhotoAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  width: SortOrder
  height: SortOrder
  position: SortOrder
}

input PhotoCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Story: StoryCreateNestedOneWithoutPhotosInput
  Group: GroupCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
}

input PhotoCreateManyGroupInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyGroupInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PhotoCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  groupId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  groupId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PhotoCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyStoryInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  groupId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyStoryInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PhotoCreateManyStoryInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutGroupInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutGroupInput
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutProfileInput
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutStoryInput
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  createMany: PhotoCreateManyStoryInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateOrConnectWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoCreateOrConnectWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoCreateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Story: StoryCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
}

input PhotoCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Story: StoryCreateNestedOneWithoutPhotosInput
  Group: GroupCreateNestedOneWithoutPhotosInput
}

input PhotoCreateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Group: GroupCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
}

input PhotoListRelationFilter
  @join__type(graph: PROFILING)
{
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input PhotoMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input PhotoOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PhotoCountOrderByAggregateInput
  _avg: PhotoAvgOrderByAggregateInput
  _max: PhotoMaxOrderByAggregateInput
  _min: PhotoMinOrderByAggregateInput
  _sum: PhotoSumOrderByAggregateInput
}

input PhotoOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Story: StoryOrderByWithRelationInput
  Group: GroupOrderByWithRelationInput
  Profile: ProfileOrderByWithRelationInput
}

enum PhotoScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  url @join__enumValue(graph: PROFILING)
  width @join__enumValue(graph: PROFILING)
  height @join__enumValue(graph: PROFILING)
  blurhash @join__enumValue(graph: PROFILING)
  ratio @join__enumValue(graph: PROFILING)
  type @join__enumValue(graph: PROFILING)
  position @join__enumValue(graph: PROFILING)
  active @join__enumValue(graph: PROFILING)
  storyId @join__enumValue(graph: PROFILING)
  groupId @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input PhotoScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  NOT: [PhotoScalarWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  position: IntNullableFilter
  active: BoolFilter
  storyId: StringNullableFilter
  groupId: StringNullableFilter
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PhotoScalarWhereWithAggregatesInput!]
  OR: [PhotoScalarWhereWithAggregatesInput!]
  NOT: [PhotoScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  url: StringWithAggregatesFilter
  width: IntNullableWithAggregatesFilter
  height: IntNullableWithAggregatesFilter
  blurhash: StringNullableWithAggregatesFilter
  ratio: StringNullableWithAggregatesFilter
  type: EnumPhotoTypeNullableWithAggregatesFilter
  position: IntNullableWithAggregatesFilter
  active: BoolWithAggregatesFilter
  storyId: StringNullableWithAggregatesFilter
  groupId: StringNullableWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PhotoSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  width: SortOrder
  height: SortOrder
  position: SortOrder
}

enum PhotoType
  @join__type(graph: PROFILING)
{
  BANNER @join__enumValue(graph: PROFILING)
  LOGO @join__enumValue(graph: PROFILING)
}

input PhotoUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
}

input PhotoUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateManyWithoutGroupNestedInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutGroupInput
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutProfileInput
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutStoryNestedInput
  @join__type(graph: PROFILING)
{
  create: PhotoCreateWithoutStoryInput
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutStoryInput!]
  createMany: PhotoCreateManyStoryInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutStoryInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithWhereWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
}

input PhotoUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
}

input PhotoUpdateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
}

input PhotoUpdateWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutGroupInput!
}

input PhotoUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutProfileInput!
}

input PhotoUpdateWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutStoryInput!
}

input PhotoUpsertWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutGroupInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutProfileInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoUpsertWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutStoryInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  position: IntNullableFilter
  active: BoolFilter
  storyId: StringNullableFilter
  groupId: StringNullableFilter
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Story: StoryWhereInput
  Group: GroupWhereInput
  Profile: ProfileWhereInput
}

input PhotoWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type PlaceType
  @join__type(graph: PROFILING)
{
  name: String!
  isoCode: String!
  coords: Coords!
}

type PluseCode
  @join__type(graph: PROFILING)
{
  id: ID!
  globalCode: String!
  compoundCode: String
  Location: Location
}

input PluseCodeCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  globalCode: String!
  compoundCode: String
  Location: LocationCreateNestedOneWithoutPlusCodeInput
}

input PluseCodeCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  globalCode: String!
  compoundCode: String
}

input PluseCodeCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  connect: PluseCodeWhereUniqueInput
}

input PluseCodeCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: PluseCodeWhereUniqueInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  globalCode: String!
  compoundCode: String
}

input PluseCodeMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
  _count: PluseCodeCountOrderByAggregateInput
  _max: PluseCodeMaxOrderByAggregateInput
  _min: PluseCodeMinOrderByAggregateInput
}

input PluseCodeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
  Location: LocationOrderByWithRelationInput
}

input PluseCodeRelationFilter
  @join__type(graph: PROFILING)
{
  is: PluseCodeWhereInput
  isNot: PluseCodeWhereInput
}

enum PluseCodeScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  globalCode @join__enumValue(graph: PROFILING)
  compoundCode @join__enumValue(graph: PROFILING)
}

input PluseCodeScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PluseCodeScalarWhereWithAggregatesInput!]
  OR: [PluseCodeScalarWhereWithAggregatesInput!]
  NOT: [PluseCodeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  globalCode: StringWithAggregatesFilter
  compoundCode: StringNullableWithAggregatesFilter
}

input PluseCodeUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutPlusCodeNestedInput
}

input PluseCodeUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
}

input PluseCodeUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING)
{
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  upsert: PluseCodeUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: PluseCodeWhereUniqueInput
  update: PluseCodeUpdateWithoutLocationInput
}

input PluseCodeUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
}

input PluseCodeUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: PluseCodeUpdateWithoutLocationInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PluseCodeWhereInput!]
  OR: [PluseCodeWhereInput!]
  NOT: [PluseCodeWhereInput!]
  id: StringFilter
  globalCode: StringFilter
  compoundCode: StringNullableFilter
  Location: LocationWhereInput
}

input PluseCodeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input PopularSearchServiceCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
}

input PopularSearchServiceCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceCreatepopularPersonalsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input PopularSearchServiceCreatepopularVenuesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input PopularSearchServiceMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input PopularSearchServiceMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input PopularSearchServiceOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
  _count: PopularSearchServiceCountOrderByAggregateInput
  _max: PopularSearchServiceMaxOrderByAggregateInput
  _min: PopularSearchServiceMinOrderByAggregateInput
}

input PopularSearchServiceOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
}

enum PopularSearchServiceScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  popularVenues @join__enumValue(graph: PROFILING)
  popularPersonals @join__enumValue(graph: PROFILING)
}

input PopularSearchServiceScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  OR: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  NOT: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  popularVenues: JsonNullableListFilter
  popularPersonals: JsonNullableListFilter
}

input PopularSearchServiceUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceUpdatepopularPersonalsInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input PopularSearchServiceUpdatepopularVenuesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input PopularSearchServiceWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PopularSearchServiceWhereInput!]
  OR: [PopularSearchServiceWhereInput!]
  NOT: [PopularSearchServiceWhereInput!]
  id: StringFilter
  popularVenues: JsonNullableListFilter
  popularPersonals: JsonNullableListFilter
}

input PopularSearchServiceWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

"""
Returns the Profile latest Privacy and Terms of Service documents to the client.
"""
type PrivacyAndTermsDocumentResponse
  @join__type(graph: PROFILING)
{
  privacy: Document!
  termsofservice: Document!
}

type Profile
  @join__type(graph: MANAGING, key: "id", extension: true)
  @join__type(graph: PROFILING, key: "id")
{
  id: String @join__field(graph: MANAGING, type: "String") @join__field(graph: PROFILING, type: "String!")
  bfsprofileid: String! @join__field(graph: PROFILING)
  photos: [Photo!] @join__field(graph: PROFILING)
  profilePhoto: Photo @join__field(graph: PROFILING)
  resentSearches: SearchesService @join__field(graph: PROFILING)
  tonightStory: Story @join__field(graph: PROFILING)
  Credentials: Credentials! @join__field(graph: PROFILING)
  Relationships: [Relationship!]! @join__field(graph: PROFILING)
  Personal: Personal @join__field(graph: PROFILING)
  Venue: Venue @join__field(graph: PROFILING)
  IdentifiableInformation: IdentifiableInformation @join__field(graph: PROFILING)
  DetailInformation: DetailInformation @join__field(graph: PROFILING)
  ProfileType: ProfileType! @join__field(graph: PROFILING)
  ThemeManager: ThemeManager @join__field(graph: PROFILING)
  createdAt: DateTime! @join__field(graph: PROFILING)
  updatedAt: DateTime! @join__field(graph: PROFILING)
}

input ProfileCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileCreateDeviceManagerInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input ProfileCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutChatroomInput
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedManyWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutGroupsInput
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedOneWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutCredentialsInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutDetailInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutIdentifiableInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutNotificationsInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutRelationshipsInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutRelationshipsInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSearchesServiceInput
  connectOrCreate: ProfileCreateOrConnectWithoutSearchesServiceInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSecuredDataKeysInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutSettingsInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSettingsInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutStorysInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutStorysInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutThemeManagerInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutVoteInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVoteInput
  connectOrCreate: ProfileCreateOrConnectWithoutVoteInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOrConnectWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutCredentialsInput!
}

input ProfileCreateOrConnectWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutDetailInformationInput!
}

input ProfileCreateOrConnectWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutGroupsInput!
}

input ProfileCreateOrConnectWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutIdentifiableInformationInput!
}

input ProfileCreateOrConnectWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutNotificationsInput!
}

input ProfileCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileCreateOrConnectWithoutRelationshipsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutRelationshipsInput!
}

input ProfileCreateOrConnectWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutSearchesServiceInput!
}

input ProfileCreateOrConnectWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutSecuredDataKeysInput!
}

input ProfileCreateOrConnectWithoutSettingsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutSettingsInput!
}

input ProfileCreateOrConnectWithoutStorysInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutStorysInput!
}

input ProfileCreateOrConnectWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutThemeManagerInput!
}

input ProfileCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileCreateOrConnectWithoutVoteInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutVoteInput!
}

input ProfileCreateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutRelationshipsInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutSettingsInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutStorysInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
  Vote: VoteCreateNestedManyWithoutProfileInput
}

input ProfileCreateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  SearchesService: SearchesServiceCreateNestedOneWithoutProfileInput
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileListRelationFilter
  @join__type(graph: PROFILING)
{
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input ProfileMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input ProfileOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
}

input ProfileOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Personal: PersonalOrderByWithRelationInput
  Venue: VenueOrderByWithRelationInput
  DetailInformation: DetailInformationOrderByWithRelationInput
  IdentifiableInformation: IdentifiableInformationOrderByWithRelationInput
  Notifications: NotificationsOrderByWithRelationInput
  photos: PhotoOrderByRelationAggregateInput
  Storys: StoryOrderByRelationAggregateInput
  Relationships: RelationshipOrderByRelationAggregateInput
  Groups: GroupOrderByRelationAggregateInput
  Credentials: CredentialsOrderByWithRelationInput
  SecuredDataKeys: SecuredDataKeysOrderByRelationAggregateInput
  SearchesService: SearchesServiceOrderByWithRelationInput
  ThemeManager: ThemeManagerOrderByWithRelationInput
  Chatroom: ChatroomOrderByRelationAggregateInput
  Settings: SettingsOrderByWithRelationInput
  Vote: VoteOrderByRelationAggregateInput
}

input ProfileRelationFilter
  @join__type(graph: PROFILING)
{
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

union ProfileResponseUnion
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "Profile")
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
 = Profile | ErrorProfiling

enum ProfileScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  bfsprofileid @join__enumValue(graph: PROFILING)
  DeviceManager @join__enumValue(graph: PROFILING)
  ProfileType @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input ProfileScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProfileScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  bfsprofileid: StringWithAggregatesFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ProfilesResponse
  @join__type(graph: PROFILING)
{
  username: [Profile!]!
  phone: [Profile!]!
  email: [Profile!]!
}

type ProfileTheme
  @join__type(graph: PROFILING)
{
  id: ID!
  Theme: Theme!
  themeId: String!
  themeManagerId: String
  isActive: Boolean!
  ThemeManager: ThemeManager!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProfileThemeCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  updatedAt: DateTime
  createdAt: DateTime
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
}

input ProfileThemeCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  themeId: String!
  themeManagerId: String
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  themeManagerId: String
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [ProfileThemeCreateManyThemeInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateManyThemeManagerInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  themeId: String!
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeManagerInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [ProfileThemeCreateManyThemeManagerInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateNestedManyWithoutThemeInput
  @join__type(graph: PROFILING)
{
  create: ProfileThemeCreateWithoutThemeInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  createMany: ProfileThemeCreateManyThemeInputEnvelope
  connect: [ProfileThemeWhereUniqueInput!]
}

input ProfileThemeCreateNestedManyWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  create: ProfileThemeCreateWithoutThemeManagerInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
  connect: [ProfileThemeWhereUniqueInput!]
}

input ProfileThemeCreateOrConnectWithoutThemeInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  create: ProfileThemeCreateWithoutThemeInput!
}

input ProfileThemeCreateOrConnectWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  create: ProfileThemeCreateWithoutThemeManagerInput!
}

input ProfileThemeCreateWithoutThemeInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  updatedAt: DateTime
  createdAt: DateTime
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
}

input ProfileThemeCreateWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  id: String
  isActive: Boolean!
  updatedAt: DateTime
  createdAt: DateTime
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
}

input ProfileThemeListRelationFilter
  @join__type(graph: PROFILING)
{
  every: ProfileThemeWhereInput
  some: ProfileThemeWhereInput
  none: ProfileThemeWhereInput
}

input ProfileThemeMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input ProfileThemeOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  _count: ProfileThemeCountOrderByAggregateInput
  _max: ProfileThemeMaxOrderByAggregateInput
  _min: ProfileThemeMinOrderByAggregateInput
}

input ProfileThemeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  Theme: ThemeOrderByWithRelationInput
  ThemeManager: ThemeManagerOrderByWithRelationInput
}

enum ProfileThemeScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  isActive @join__enumValue(graph: PROFILING)
  themeId @join__enumValue(graph: PROFILING)
  themeManagerId @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
}

input ProfileThemeScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileThemeScalarWhereInput!]
  OR: [ProfileThemeScalarWhereInput!]
  NOT: [ProfileThemeScalarWhereInput!]
  id: StringFilter
  isActive: BoolFilter
  themeId: StringFilter
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
}

input ProfileThemeScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileThemeScalarWhereWithAggregatesInput!]
  OR: [ProfileThemeScalarWhereWithAggregatesInput!]
  NOT: [ProfileThemeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  themeId: StringWithAggregatesFilter
  themeManagerId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input ProfileThemeUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
}

input ProfileThemeUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileThemeCreateWithoutThemeManagerInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput!]
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
  set: [ProfileThemeWhereUniqueInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  delete: [ProfileThemeWhereUniqueInput!]
  connect: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
}

input ProfileThemeUpdateManyWithoutThemeNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileThemeCreateWithoutThemeInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeInput!]
  createMany: ProfileThemeCreateManyThemeInputEnvelope
  set: [ProfileThemeWhereUniqueInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  delete: [ProfileThemeWhereUniqueInput!]
  connect: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
}

input ProfileThemeUpdateManyWithWhereWithoutThemeInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeScalarWhereInput!
  data: ProfileThemeUpdateManyMutationInput!
}

input ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeScalarWhereInput!
  data: ProfileThemeUpdateManyMutationInput!
}

input ProfileThemeUpdateWithoutThemeInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
}

input ProfileThemeUpdateWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  data: ProfileThemeUpdateWithoutThemeInput!
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  data: ProfileThemeUpdateWithoutThemeManagerInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  update: ProfileThemeUpdateWithoutThemeInput!
  create: ProfileThemeCreateWithoutThemeInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  where: ProfileThemeWhereUniqueInput!
  update: ProfileThemeUpdateWithoutThemeManagerInput!
  create: ProfileThemeCreateWithoutThemeManagerInput!
}

input ProfileThemeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileThemeWhereInput!]
  OR: [ProfileThemeWhereInput!]
  NOT: [ProfileThemeWhereInput!]
  id: StringFilter
  isActive: BoolFilter
  themeId: StringFilter
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
  Theme: ThemeWhereInput
  ThemeManager: ThemeManagerWhereInput
}

input ProfileThemeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum ProfileType
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  PERSONAL @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  VENUE @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  GUEST @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
}

input ProfileUpdateDeviceManagerInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input ProfileUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateManyWithoutChatroomNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutChatroomInput
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutChatroomInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithoutGroupsNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutGroupsInput
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutGroupsInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutGroupsInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutGroupsInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateManyWithWhereWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutCredentialsInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  upsert: ProfileUpsertWithoutCredentialsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutCredentialsInput
}

input ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutDetailInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  upsert: ProfileUpsertWithoutDetailInformationInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutDetailInformationInput
}

input ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutIdentifiableInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  upsert: ProfileUpsertWithoutIdentifiableInformationInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutIdentifiableInformationInput
}

input ProfileUpdateOneRequiredWithoutNotificationsNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutNotificationsInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  upsert: ProfileUpsertWithoutNotificationsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutNotificationsInput
}

input ProfileUpdateOneRequiredWithoutPersonalNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  upsert: ProfileUpsertWithoutPersonalInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPersonalInput
}

input ProfileUpdateOneRequiredWithoutSearchesServiceNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSearchesServiceInput
  connectOrCreate: ProfileCreateOrConnectWithoutSearchesServiceInput
  upsert: ProfileUpsertWithoutSearchesServiceInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutSearchesServiceInput
}

input ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSecuredDataKeysInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  upsert: ProfileUpsertWithoutSecuredDataKeysInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutSecuredDataKeysInput
}

input ProfileUpdateOneRequiredWithoutSettingsNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutSettingsInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  upsert: ProfileUpsertWithoutSettingsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutSettingsInput
}

input ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutThemeManagerInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  upsert: ProfileUpsertWithoutThemeManagerInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutThemeManagerInput
}

input ProfileUpdateOneRequiredWithoutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  upsert: ProfileUpsertWithoutVenueInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutVenueInput
}

input ProfileUpdateOneRequiredWithoutVoteNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVoteInput
  connectOrCreate: ProfileCreateOrConnectWithoutVoteInput
  upsert: ProfileUpsertWithoutVoteInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutVoteInput
}

input ProfileUpdateOneWithoutPhotosNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  upsert: ProfileUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPhotosInput
}

input ProfileUpdateOneWithoutRelationshipsNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutRelationshipsInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  upsert: ProfileUpsertWithoutRelationshipsInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutRelationshipsInput
}

input ProfileUpdateOneWithoutStorysNestedInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutStorysInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  upsert: ProfileUpsertWithoutStorysInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutStorysInput
}

input ProfileUpdateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutRelationshipsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutSettingsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutStorysInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
  Vote: VoteUpdateManyWithoutProfileNestedInput
}

input ProfileUpdateWithoutVoteInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutProfileNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutChatroomInput!
}

input ProfileUpdateWithWhereUniqueWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutGroupsInput!
}

input ProfileUpsertWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutCredentialsInput!
  create: ProfileCreateWithoutCredentialsInput!
}

input ProfileUpsertWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutDetailInformationInput!
  create: ProfileCreateWithoutDetailInformationInput!
}

input ProfileUpsertWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutIdentifiableInformationInput!
  create: ProfileCreateWithoutIdentifiableInformationInput!
}

input ProfileUpsertWithoutNotificationsInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutNotificationsInput!
  create: ProfileCreateWithoutNotificationsInput!
}

input ProfileUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutPersonalInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileUpsertWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutPhotosInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileUpsertWithoutRelationshipsInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutRelationshipsInput!
  create: ProfileCreateWithoutRelationshipsInput!
}

input ProfileUpsertWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutSearchesServiceInput!
  create: ProfileCreateWithoutSearchesServiceInput!
}

input ProfileUpsertWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutSecuredDataKeysInput!
  create: ProfileCreateWithoutSecuredDataKeysInput!
}

input ProfileUpsertWithoutSettingsInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutSettingsInput!
  create: ProfileCreateWithoutSettingsInput!
}

input ProfileUpsertWithoutStorysInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutStorysInput!
  create: ProfileCreateWithoutStorysInput!
}

input ProfileUpsertWithoutThemeManagerInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutThemeManagerInput!
  create: ProfileCreateWithoutThemeManagerInput!
}

input ProfileUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutVenueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileUpsertWithoutVoteInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutVoteInput!
  create: ProfileCreateWithoutVoteInput!
}

input ProfileUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutChatroomInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileUpsertWithWhereUniqueWithoutGroupsInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutGroupsInput!
  create: ProfileCreateWithoutGroupsInput!
}

type ProfileVenue
  @join__type(graph: PROFILING)
{
  id: String!
  distanceInM: Int
  bfsprofileid: String!
  photos: [Photo!]!
  profilePhoto: Photo
  tonightStory: Story
  Credentials: Credentials!
  Relationships: [Relationship!]!
  Venue: Venue
  IdentifiableInformation: IdentifiableInformation
  DetailInformation: DetailInformation
  ProfileType: ProfileType!
  ThemeManager: ThemeManager
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProfileWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Personal: PersonalWhereInput
  Venue: VenueWhereInput
  DetailInformation: DetailInformationWhereInput
  IdentifiableInformation: IdentifiableInformationWhereInput
  Notifications: NotificationsWhereInput
  photos: PhotoListRelationFilter
  Storys: StoryListRelationFilter
  Relationships: RelationshipListRelationFilter
  Groups: GroupListRelationFilter
  Credentials: CredentialsWhereInput
  SecuredDataKeys: SecuredDataKeysListRelationFilter
  SearchesService: SearchesServiceWhereInput
  ThemeManager: ThemeManagerWhereInput
  Chatroom: ChatroomListRelationFilter
  Settings: SettingsWhereInput
  Vote: VoteListRelationFilter
}

input ProfileWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
}

type PushToken
  @join__type(graph: MANAGING)
{
  id: ID!
  isExpired: Boolean!
  expoToken: String
  androidToken: String
  appleToken: String
  Device: Device
  receipts: [Json!]!
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenCountOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenCreateInput
  @join__type(graph: MANAGING)
{
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
  Device: DeviceCreateNestedOneWithoutPushTokenInput
}

input PushTokenCreateManyInput
  @join__type(graph: MANAGING)
{
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenCreateNestedOneWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  create: PushTokenCreateWithoutDeviceInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  connect: PushTokenWhereUniqueInput
}

input PushTokenCreateOrConnectWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  where: PushTokenWhereUniqueInput!
  create: PushTokenCreateWithoutDeviceInput!
}

input PushTokenCreatereceiptsInput
  @join__type(graph: MANAGING)
{
  set: [Json!]!
}

input PushTokenCreateWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenMaxOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenMinOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenOrderByWithAggregationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PushTokenCountOrderByAggregateInput
  _max: PushTokenMaxOrderByAggregateInput
  _min: PushTokenMinOrderByAggregateInput
}

input PushTokenOrderByWithRelationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Device: DeviceOrderByWithRelationInput
}

input PushTokenRelationFilter
  @join__type(graph: MANAGING)
{
  is: PushTokenWhereInput
  isNot: PushTokenWhereInput
}

enum PushTokenScalarFieldEnum
  @join__type(graph: MANAGING)
{
  id @join__enumValue(graph: MANAGING)
  isExpired @join__enumValue(graph: MANAGING)
  expoToken @join__enumValue(graph: MANAGING)
  androidToken @join__enumValue(graph: MANAGING)
  appleToken @join__enumValue(graph: MANAGING)
  receipts @join__enumValue(graph: MANAGING)
  createdAt @join__enumValue(graph: MANAGING)
  updatedAt @join__enumValue(graph: MANAGING)
}

input PushTokenScalarWhereWithAggregatesInput
  @join__type(graph: MANAGING)
{
  AND: [PushTokenScalarWhereWithAggregatesInput!]
  OR: [PushTokenScalarWhereWithAggregatesInput!]
  NOT: [PushTokenScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isExpired: BoolWithAggregatesFilter
  expoToken: StringNullableWithAggregatesFilter
  androidToken: StringNullableWithAggregatesFilter
  appleToken: StringNullableWithAggregatesFilter
  receipts: JsonNullableListFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input PushTokenUpdateInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutPushTokenNestedInput
}

input PushTokenUpdateManyMutationInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpdateOneWithoutDeviceNestedInput
  @join__type(graph: MANAGING)
{
  create: PushTokenCreateWithoutDeviceInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  upsert: PushTokenUpsertWithoutDeviceInput
  disconnect: Boolean
  delete: Boolean
  connect: PushTokenWhereUniqueInput
  update: PushTokenUpdateWithoutDeviceInput
}

input PushTokenUpdatereceiptsInput
  @join__type(graph: MANAGING)
{
  set: [Json!]
  push: Json
}

input PushTokenUpdateWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpsertWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  update: PushTokenUpdateWithoutDeviceInput!
  create: PushTokenCreateWithoutDeviceInput!
}

input PushTokenWhereInput
  @join__type(graph: MANAGING)
{
  AND: [PushTokenWhereInput!]
  OR: [PushTokenWhereInput!]
  NOT: [PushTokenWhereInput!]
  id: StringFilter
  isExpired: BoolFilter
  expoToken: StringNullableFilter
  androidToken: StringNullableFilter
  appleToken: StringNullableFilter
  receipts: JsonNullableListFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  Device: DeviceWhereInput
}

input PushTokenWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
}

type Query
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  getADeviceManager: DeviceManagerDeviceProfilesResponseUnion! @join__field(graph: MANAGING)
  authorizedProfiles(where: AuthorizedProfilesWhereInput!): AuthorizedProfilesResponseUnion @join__field(graph: PROFILING)
  checkUsername(username: String!): Boolean! @join__field(graph: PROFILING)
  privacyTermsDocuments: PrivacyAndTermsDocumentResponse! @join__field(graph: PROFILING)
  sendAuthenticatorDeviceOwnerCode: Boolean! @join__field(graph: PROFILING)
  loginPassword(username: String!, password: String!): Boolean! @join__field(graph: PROFILING)
  getNotifications: NotificationResponse! @join__field(graph: PROFILING)
  getRelationshipFriendRequestStatus(profileId: String!): NotificationFriendRequestStatusResponse! @join__field(graph: PROFILING)
  getSecureFriendQRCodeData: String! @join__field(graph: PROFILING)
  getAllInterrests: [Json!]! @join__field(graph: PROFILING)
  getLiveVenueTotals(profileIdVenue: String): LiveVenueTotals! @join__field(graph: PROFILING)
  H3IndexLatLng(cell: String!): [Float!]! @join__field(graph: PROFILING)
  H3IndexGrid(cell: String!, ringSize: Int! = 1): [String!]! @join__field(graph: PROFILING)
  venuesNearby(searchAreaCoords: CoordsInput!, currentLocationCoords: CoordsInput, countryIsoCode: String!, stateIsoCode: String!, kRing: Int = 1): RecommendationResponseUnion! @join__field(graph: PROFILING)
  friendsFromContacts(contact: [ContactInput!]!): String! @join__field(graph: PROFILING)
  venues(where: VenueWhereInput, orderBy: [VenueOrderByWithRelationInput!], cursor: VenueWhereUniqueInput, take: Int, skip: Int, distinct: [VenueScalarFieldEnum!]): [Venue!]! @join__field(graph: PROFILING)
  venue(where: VenueWhereInput, orderBy: [VenueOrderByWithRelationInput!], cursor: VenueWhereUniqueInput, take: Int, skip: Int, distinct: [VenueScalarFieldEnum!]): Venue @join__field(graph: PROFILING)
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]! @join__field(graph: PROFILING)
  profile(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): Profile @join__field(graph: PROFILING)
  currentVenue(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!], currentLocationCoords: CoordsInput): ProfileVenue @join__field(graph: PROFILING)
  getAllCountries: [CountryResponseObject!]! @join__field(graph: PROFILING)
  getAllStatesByCountry(countryIsoCode: String!): [StateResponseObject!]! @join__field(graph: PROFILING)
  getAllCitiesByState(countryIsoCode: String!, stateIsoCode: String!): [CityResponseObject!]! @join__field(graph: PROFILING)
  exploreSearch(search: String!): ExploreResponse! @join__field(graph: PROFILING)
  emojimoods(where: EmojimoodWhereInput, orderBy: [EmojimoodOrderByWithRelationInput!], cursor: EmojimoodWhereUniqueInput, take: Int, skip: Int, distinct: [EmojimoodScalarFieldEnum!]): [Emojimood!]! @join__field(graph: PROFILING)
  emojimood(where: EmojimoodWhereUniqueInput!): Emojimood @join__field(graph: PROFILING)
  getAllThemes: [Theme!]! @join__field(graph: PROFILING)
}

enum QueryMode
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  default @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  insensitive @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
}

union RecommendationResponseUnion
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "VenuesNearbyResponse")
  @join__unionMember(graph: PROFILING, member: "ComingAreaResponse")
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
 = VenuesNearbyResponse | ComingAreaResponse | ErrorProfiling

union RefreshDeviceManagerDeviceManagerResponseUnion
  @join__type(graph: MANAGING)
  @join__unionMember(graph: MANAGING, member: "ClientDeviceManager")
  @join__unionMember(graph: MANAGING, member: "ErrorManaging")
 = ClientDeviceManager | ErrorManaging

type RefreshToken
  @join__type(graph: MANAGING)
{
  id: ID!
  token: String!
  DeviceProfile: ClientDeviceProfile
  DeviceProfileId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RefreshTokenAvgOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
}

input RefreshTokenCountOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenCreateInput
  @join__type(graph: MANAGING)
{
  token: String!
  createdAt: DateTime
  updatedAt: DateTime
  DeviceProfile: DeviceProfileCreateNestedOneWithoutRefreshTokenInput
}

input RefreshTokenCreateManyInput
  @join__type(graph: MANAGING)
{
  id: Int
  token: String!
  DeviceProfileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  create: RefreshTokenCreateWithoutDeviceProfileInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  connect: RefreshTokenWhereUniqueInput
}

input RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  where: RefreshTokenWhereUniqueInput!
  create: RefreshTokenCreateWithoutDeviceProfileInput!
}

input RefreshTokenCreateWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  token: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenMaxOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenMinOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenOrderByWithAggregationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RefreshTokenCountOrderByAggregateInput
  _avg: RefreshTokenAvgOrderByAggregateInput
  _max: RefreshTokenMaxOrderByAggregateInput
  _min: RefreshTokenMinOrderByAggregateInput
  _sum: RefreshTokenSumOrderByAggregateInput
}

input RefreshTokenOrderByWithRelationInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  DeviceProfile: DeviceProfileOrderByWithRelationInput
}

input RefreshTokenRelationFilter
  @join__type(graph: MANAGING)
{
  is: RefreshTokenWhereInput
  isNot: RefreshTokenWhereInput
}

enum RefreshTokenScalarFieldEnum
  @join__type(graph: MANAGING)
{
  id @join__enumValue(graph: MANAGING)
  token @join__enumValue(graph: MANAGING)
  DeviceProfileId @join__enumValue(graph: MANAGING)
  createdAt @join__enumValue(graph: MANAGING)
  updatedAt @join__enumValue(graph: MANAGING)
}

input RefreshTokenScalarWhereWithAggregatesInput
  @join__type(graph: MANAGING)
{
  AND: [RefreshTokenScalarWhereWithAggregatesInput!]
  OR: [RefreshTokenScalarWhereWithAggregatesInput!]
  NOT: [RefreshTokenScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  token: StringWithAggregatesFilter
  DeviceProfileId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input RefreshTokenSumOrderByAggregateInput
  @join__type(graph: MANAGING)
{
  id: SortOrder
}

input RefreshTokenUpdateInput
  @join__type(graph: MANAGING)
{
  token: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateOneWithoutRefreshTokenNestedInput
}

input RefreshTokenUpdateManyMutationInput
  @join__type(graph: MANAGING)
{
  token: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  @join__type(graph: MANAGING)
{
  create: RefreshTokenCreateWithoutDeviceProfileInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  upsert: RefreshTokenUpsertWithoutDeviceProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: RefreshTokenWhereUniqueInput
  update: RefreshTokenUpdateWithoutDeviceProfileInput
}

input RefreshTokenUpdateWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  token: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpsertWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  update: RefreshTokenUpdateWithoutDeviceProfileInput!
  create: RefreshTokenCreateWithoutDeviceProfileInput!
}

input RefreshTokenWhereInput
  @join__type(graph: MANAGING)
{
  AND: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  NOT: [RefreshTokenWhereInput!]
  id: IntFilter
  token: StringFilter
  DeviceProfileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  DeviceProfile: DeviceProfileWhereInput
}

input RefreshTokenWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: Int
  token: String
  DeviceProfileId: String
}

type RejectedFriendsResponse
  @join__type(graph: PROFILING)
{
  friends: Boolean!
}

type Relationship
  @join__type(graph: PROFILING)
{
  id: ID!
  Profile: Profile
  profileId: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]!
  venueMetAt: String
  createdAt: DateTime!
  updatedAt: DateTime!
  friendProfile: Profile
}

input RelationshipCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutRelationshipsInput
}

input RelationshipCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [RelationshipCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input RelationshipCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: RelationshipCreateWithoutProfileInput
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  connect: [RelationshipWhereUniqueInput!]
}

input RelationshipCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipCreateRelationshipStatusInput
  @join__type(graph: PROFILING)
{
  set: [RelationshipStatus!]!
}

input RelationshipCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipListRelationFilter
  @join__type(graph: PROFILING)
{
  every: RelationshipWhereInput
  some: RelationshipWhereInput
  none: RelationshipWhereInput
}

input RelationshipMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input RelationshipOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RelationshipCountOrderByAggregateInput
  _max: RelationshipMaxOrderByAggregateInput
  _min: RelationshipMinOrderByAggregateInput
}

input RelationshipOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
}

enum RelationshipScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  friendProfileId @join__enumValue(graph: PROFILING)
  RelationshipStatus @join__enumValue(graph: PROFILING)
  venueMetAt @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input RelationshipScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [RelationshipScalarWhereInput!]
  OR: [RelationshipScalarWhereInput!]
  NOT: [RelationshipScalarWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  friendProfileId: StringFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RelationshipScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [RelationshipScalarWhereWithAggregatesInput!]
  OR: [RelationshipScalarWhereWithAggregatesInput!]
  NOT: [RelationshipScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  friendProfileId: StringWithAggregatesFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum RelationshipStatus
  @join__type(graph: PROFILING)
{
  FRIENDS @join__enumValue(graph: PROFILING)
  DATING @join__enumValue(graph: PROFILING)
}

input RelationshipUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutRelationshipsNestedInput
}

input RelationshipUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationshipUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: RelationshipCreateWithoutProfileInput
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  upsert: [RelationshipUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  set: [RelationshipWhereUniqueInput!]
  disconnect: [RelationshipWhereUniqueInput!]
  delete: [RelationshipWhereUniqueInput!]
  connect: [RelationshipWhereUniqueInput!]
  update: [RelationshipUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [RelationshipUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [RelationshipScalarWhereInput!]
}

input RelationshipUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipScalarWhereInput!
  data: RelationshipUpdateManyMutationInput!
}

input RelationshipUpdateRelationshipStatusInput
  @join__type(graph: PROFILING)
{
  set: [RelationshipStatus!]
  push: [RelationshipStatus!]
}

input RelationshipUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationshipUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  data: RelationshipUpdateWithoutProfileInput!
}

input RelationshipUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  update: RelationshipUpdateWithoutProfileInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipWhereInput
  @join__type(graph: PROFILING)
{
  AND: [RelationshipWhereInput!]
  OR: [RelationshipWhereInput!]
  NOT: [RelationshipWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  friendProfileId: StringFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
}

input RelationshipWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type SearchAreaMetrics
  @join__type(graph: PROFILING)
{
  id: ID!
  h3Index15: String
  timesSearched: Int!
  H3Index6VenueRecommendation: H3Index6VenueRecommendation
  h3Index6VenueRecommendationId: String
  SearchesService: SearchesService
  searchesServiceId: String
  createdAt: DateTime!
  H3Index5VenueRecommendation: H3Index5VenueRecommendation
  h3Index5VenueRecommendationId: String
}

input SearchAreaMetricsAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  timesSearched: SortOrder
}

input SearchAreaMetricsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  timesSearched: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  searchesServiceId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input SearchAreaMetricsCreateInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  timesSearched: Int
  createdAt: DateTime
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
  SearchesService: SearchesServiceCreateNestedOneWithoutSearchAreaMetricsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
}

input SearchAreaMetricsCreateManyH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  timesSearched: Int
  h3Index6VenueRecommendationId: String
  searchesServiceId: String
  createdAt: DateTime
}

input SearchAreaMetricsCreateManyH3Index5VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [SearchAreaMetricsCreateManyH3Index5VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input SearchAreaMetricsCreateManyH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  timesSearched: Int
  searchesServiceId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input SearchAreaMetricsCreateManyH3Index6VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [SearchAreaMetricsCreateManyH3Index6VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input SearchAreaMetricsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  timesSearched: Int
  h3Index6VenueRecommendationId: String
  searchesServiceId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input SearchAreaMetricsCreateManySearchesServiceInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  timesSearched: Int
  h3Index6VenueRecommendationId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input SearchAreaMetricsCreateManySearchesServiceInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [SearchAreaMetricsCreateManySearchesServiceInput!]!
  skipDuplicates: Boolean
}

input SearchAreaMetricsCreateNestedManyWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  createMany: SearchAreaMetricsCreateManyH3Index5VenueRecommendationInputEnvelope
  connect: [SearchAreaMetricsWhereUniqueInput!]
}

input SearchAreaMetricsCreateNestedManyWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  createMany: SearchAreaMetricsCreateManyH3Index6VenueRecommendationInputEnvelope
  connect: [SearchAreaMetricsWhereUniqueInput!]
}

input SearchAreaMetricsCreateNestedManyWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutSearchesServiceInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutSearchesServiceInput!]
  createMany: SearchAreaMetricsCreateManySearchesServiceInputEnvelope
  connect: [SearchAreaMetricsWhereUniqueInput!]
}

input SearchAreaMetricsCreateOrConnectWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  create: SearchAreaMetricsCreateWithoutH3Index5VenueRecommendationInput!
}

input SearchAreaMetricsCreateOrConnectWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  create: SearchAreaMetricsCreateWithoutH3Index6VenueRecommendationInput!
}

input SearchAreaMetricsCreateOrConnectWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  create: SearchAreaMetricsCreateWithoutSearchesServiceInput!
}

input SearchAreaMetricsCreateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  timesSearched: Int
  createdAt: DateTime
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
  SearchesService: SearchesServiceCreateNestedOneWithoutSearchAreaMetricsInput
}

input SearchAreaMetricsCreateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  timesSearched: Int
  createdAt: DateTime
  SearchesService: SearchesServiceCreateNestedOneWithoutSearchAreaMetricsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
}

input SearchAreaMetricsCreateWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  timesSearched: Int
  createdAt: DateTime
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutSearchAreaMetricsInput
}

input SearchAreaMetricsListRelationFilter
  @join__type(graph: PROFILING)
{
  every: SearchAreaMetricsWhereInput
  some: SearchAreaMetricsWhereInput
  none: SearchAreaMetricsWhereInput
}

input SearchAreaMetricsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  timesSearched: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  searchesServiceId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input SearchAreaMetricsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  timesSearched: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  searchesServiceId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input SearchAreaMetricsOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input SearchAreaMetricsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  timesSearched: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  searchesServiceId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  _count: SearchAreaMetricsCountOrderByAggregateInput
  _avg: SearchAreaMetricsAvgOrderByAggregateInput
  _max: SearchAreaMetricsMaxOrderByAggregateInput
  _min: SearchAreaMetricsMinOrderByAggregateInput
  _sum: SearchAreaMetricsSumOrderByAggregateInput
}

input SearchAreaMetricsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index15: SortOrder
  timesSearched: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  searchesServiceId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  H3Index6VenueRecommendation: H3Index6VenueRecommendationOrderByWithRelationInput
  SearchesService: SearchesServiceOrderByWithRelationInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationOrderByWithRelationInput
}

enum SearchAreaMetricsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  h3Index15 @join__enumValue(graph: PROFILING)
  timesSearched @join__enumValue(graph: PROFILING)
  h3Index6VenueRecommendationId @join__enumValue(graph: PROFILING)
  searchesServiceId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  h3Index5VenueRecommendationId @join__enumValue(graph: PROFILING)
}

input SearchAreaMetricsScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SearchAreaMetricsScalarWhereInput!]
  OR: [SearchAreaMetricsScalarWhereInput!]
  NOT: [SearchAreaMetricsScalarWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  timesSearched: IntFilter
  h3Index6VenueRecommendationId: StringNullableFilter
  searchesServiceId: StringNullableFilter
  createdAt: DateTimeFilter
  h3Index5VenueRecommendationId: StringNullableFilter
}

input SearchAreaMetricsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [SearchAreaMetricsScalarWhereWithAggregatesInput!]
  OR: [SearchAreaMetricsScalarWhereWithAggregatesInput!]
  NOT: [SearchAreaMetricsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  timesSearched: IntWithAggregatesFilter
  h3Index6VenueRecommendationId: StringNullableWithAggregatesFilter
  searchesServiceId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  h3Index5VenueRecommendationId: StringNullableWithAggregatesFilter
}

input SearchAreaMetricsSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  timesSearched: SortOrder
}

input SearchAreaMetricsUpdateInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  timesSearched: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutSearchAreaMetricsNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
}

input SearchAreaMetricsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  timesSearched: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input SearchAreaMetricsUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  upsert: [SearchAreaMetricsUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  createMany: SearchAreaMetricsCreateManyH3Index5VenueRecommendationInputEnvelope
  set: [SearchAreaMetricsWhereUniqueInput!]
  disconnect: [SearchAreaMetricsWhereUniqueInput!]
  delete: [SearchAreaMetricsWhereUniqueInput!]
  connect: [SearchAreaMetricsWhereUniqueInput!]
  update: [SearchAreaMetricsUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  updateMany: [SearchAreaMetricsUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput!]
  deleteMany: [SearchAreaMetricsScalarWhereInput!]
}

input SearchAreaMetricsUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  upsert: [SearchAreaMetricsUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  createMany: SearchAreaMetricsCreateManyH3Index6VenueRecommendationInputEnvelope
  set: [SearchAreaMetricsWhereUniqueInput!]
  disconnect: [SearchAreaMetricsWhereUniqueInput!]
  delete: [SearchAreaMetricsWhereUniqueInput!]
  connect: [SearchAreaMetricsWhereUniqueInput!]
  update: [SearchAreaMetricsUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  updateMany: [SearchAreaMetricsUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput!]
  deleteMany: [SearchAreaMetricsScalarWhereInput!]
}

input SearchAreaMetricsUpdateManyWithoutSearchesServiceNestedInput
  @join__type(graph: PROFILING)
{
  create: SearchAreaMetricsCreateWithoutSearchesServiceInput
  connectOrCreate: [SearchAreaMetricsCreateOrConnectWithoutSearchesServiceInput!]
  upsert: [SearchAreaMetricsUpsertWithWhereUniqueWithoutSearchesServiceInput!]
  createMany: SearchAreaMetricsCreateManySearchesServiceInputEnvelope
  set: [SearchAreaMetricsWhereUniqueInput!]
  disconnect: [SearchAreaMetricsWhereUniqueInput!]
  delete: [SearchAreaMetricsWhereUniqueInput!]
  connect: [SearchAreaMetricsWhereUniqueInput!]
  update: [SearchAreaMetricsUpdateWithWhereUniqueWithoutSearchesServiceInput!]
  updateMany: [SearchAreaMetricsUpdateManyWithWhereWithoutSearchesServiceInput!]
  deleteMany: [SearchAreaMetricsScalarWhereInput!]
}

input SearchAreaMetricsUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsScalarWhereInput!
  data: SearchAreaMetricsUpdateManyMutationInput!
}

input SearchAreaMetricsUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsScalarWhereInput!
  data: SearchAreaMetricsUpdateManyMutationInput!
}

input SearchAreaMetricsUpdateManyWithWhereWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsScalarWhereInput!
  data: SearchAreaMetricsUpdateManyMutationInput!
}

input SearchAreaMetricsUpdateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  timesSearched: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
  SearchesService: SearchesServiceUpdateOneWithoutSearchAreaMetricsNestedInput
}

input SearchAreaMetricsUpdateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  timesSearched: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  SearchesService: SearchesServiceUpdateOneWithoutSearchAreaMetricsNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
}

input SearchAreaMetricsUpdateWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  timesSearched: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutSearchAreaMetricsNestedInput
}

input SearchAreaMetricsUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  data: SearchAreaMetricsUpdateWithoutH3Index5VenueRecommendationInput!
}

input SearchAreaMetricsUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  data: SearchAreaMetricsUpdateWithoutH3Index6VenueRecommendationInput!
}

input SearchAreaMetricsUpdateWithWhereUniqueWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  data: SearchAreaMetricsUpdateWithoutSearchesServiceInput!
}

input SearchAreaMetricsUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  update: SearchAreaMetricsUpdateWithoutH3Index5VenueRecommendationInput!
  create: SearchAreaMetricsCreateWithoutH3Index5VenueRecommendationInput!
}

input SearchAreaMetricsUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  update: SearchAreaMetricsUpdateWithoutH3Index6VenueRecommendationInput!
  create: SearchAreaMetricsCreateWithoutH3Index6VenueRecommendationInput!
}

input SearchAreaMetricsUpsertWithWhereUniqueWithoutSearchesServiceInput
  @join__type(graph: PROFILING)
{
  where: SearchAreaMetricsWhereUniqueInput!
  update: SearchAreaMetricsUpdateWithoutSearchesServiceInput!
  create: SearchAreaMetricsCreateWithoutSearchesServiceInput!
}

input SearchAreaMetricsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SearchAreaMetricsWhereInput!]
  OR: [SearchAreaMetricsWhereInput!]
  NOT: [SearchAreaMetricsWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  timesSearched: IntFilter
  h3Index6VenueRecommendationId: StringNullableFilter
  searchesServiceId: StringNullableFilter
  createdAt: DateTimeFilter
  h3Index5VenueRecommendationId: StringNullableFilter
  H3Index6VenueRecommendation: H3Index6VenueRecommendationWhereInput
  SearchesService: SearchesServiceWhereInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationWhereInput
}

input SearchAreaMetricsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type SearchesService
  @join__type(graph: PROFILING)
{
  id: ID!
  Profile: Profile!
  profileId: String!
  searches: [Json!]!
  SearchAreaMetrics(where: SearchAreaMetricsWhereInput, orderBy: [SearchAreaMetricsOrderByWithRelationInput!], cursor: SearchAreaMetricsWhereUniqueInput, take: Int, skip: Int, distinct: [SearchAreaMetricsScalarFieldEnum!]): [SearchAreaMetrics!]!
  createdAt: DateTime!
}

input SearchesServiceCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
  createdAt: SortOrder
}

input SearchesServiceCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  searches: [Json!]
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutSearchesServiceInput!
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutSearchesServiceInput
}

input SearchesServiceCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  searches: [Json!]
  createdAt: DateTime
}

input SearchesServiceCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: SearchesServiceCreateWithoutProfileInput
  connectOrCreate: SearchesServiceCreateOrConnectWithoutProfileInput
  connect: SearchesServiceWhereUniqueInput
}

input SearchesServiceCreateNestedOneWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  create: SearchesServiceCreateWithoutSearchAreaMetricsInput
  connectOrCreate: SearchesServiceCreateOrConnectWithoutSearchAreaMetricsInput
  connect: SearchesServiceWhereUniqueInput
}

input SearchesServiceCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SearchesServiceWhereUniqueInput!
  create: SearchesServiceCreateWithoutProfileInput!
}

input SearchesServiceCreateOrConnectWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  where: SearchesServiceWhereUniqueInput!
  create: SearchesServiceCreateWithoutSearchAreaMetricsInput!
}

input SearchesServiceCreatesearchesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input SearchesServiceCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  searches: [Json!]
  createdAt: DateTime
  SearchAreaMetrics: SearchAreaMetricsCreateNestedManyWithoutSearchesServiceInput
}

input SearchesServiceCreateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: String
  searches: [Json!]
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutSearchesServiceInput!
}

input SearchesServiceMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
}

input SearchesServiceMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
}

input SearchesServiceOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
  createdAt: SortOrder
  _count: SearchesServiceCountOrderByAggregateInput
  _max: SearchesServiceMaxOrderByAggregateInput
  _min: SearchesServiceMinOrderByAggregateInput
}

input SearchesServiceOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
  createdAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
  SearchAreaMetrics: SearchAreaMetricsOrderByRelationAggregateInput
}

input SearchesServiceRelationFilter
  @join__type(graph: PROFILING)
{
  is: SearchesServiceWhereInput
  isNot: SearchesServiceWhereInput
}

enum SearchesServiceScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  searches @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
}

input SearchesServiceScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [SearchesServiceScalarWhereWithAggregatesInput!]
  OR: [SearchesServiceScalarWhereWithAggregatesInput!]
  NOT: [SearchesServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  searches: JsonNullableListFilter
  createdAt: DateTimeWithAggregatesFilter
}

input SearchesServiceUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSearchesServiceNestedInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutSearchesServiceNestedInput
}

input SearchesServiceUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
  createdAt: DateTimeFieldUpdateOperationsInput
}

input SearchesServiceUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: SearchesServiceCreateWithoutProfileInput
  connectOrCreate: SearchesServiceCreateOrConnectWithoutProfileInput
  upsert: SearchesServiceUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: SearchesServiceWhereUniqueInput
  update: SearchesServiceUpdateWithoutProfileInput
}

input SearchesServiceUpdateOneWithoutSearchAreaMetricsNestedInput
  @join__type(graph: PROFILING)
{
  create: SearchesServiceCreateWithoutSearchAreaMetricsInput
  connectOrCreate: SearchesServiceCreateOrConnectWithoutSearchAreaMetricsInput
  upsert: SearchesServiceUpsertWithoutSearchAreaMetricsInput
  disconnect: Boolean
  delete: Boolean
  connect: SearchesServiceWhereUniqueInput
  update: SearchesServiceUpdateWithoutSearchAreaMetricsInput
}

input SearchesServiceUpdatesearchesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input SearchesServiceUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
  createdAt: DateTimeFieldUpdateOperationsInput
  SearchAreaMetrics: SearchAreaMetricsUpdateManyWithoutSearchesServiceNestedInput
}

input SearchesServiceUpdateWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSearchesServiceNestedInput
}

input SearchesServiceUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: SearchesServiceUpdateWithoutProfileInput!
  create: SearchesServiceCreateWithoutProfileInput!
}

input SearchesServiceUpsertWithoutSearchAreaMetricsInput
  @join__type(graph: PROFILING)
{
  update: SearchesServiceUpdateWithoutSearchAreaMetricsInput!
  create: SearchesServiceCreateWithoutSearchAreaMetricsInput!
}

input SearchesServiceWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SearchesServiceWhereInput!]
  OR: [SearchesServiceWhereInput!]
  NOT: [SearchesServiceWhereInput!]
  id: StringFilter
  profileId: StringFilter
  searches: JsonNullableListFilter
  createdAt: DateTimeFilter
  Profile: ProfileWhereInput
  SearchAreaMetrics: SearchAreaMetricsListRelationFilter
}

input SearchesServiceWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

enum SecureDataType
  @join__type(graph: PROFILING)
{
  FRIENDING @join__enumValue(graph: PROFILING)
  JOINING @join__enumValue(graph: PROFILING)
}

input SecuredDataKeysAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  used: SortOrder
}

input SecuredDataKeysCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutSecuredDataKeysInput!
}

input SecuredDataKeysCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [SecuredDataKeysCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input SecuredDataKeysCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: SecuredDataKeysCreateWithoutProfileInput
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
  connect: [SecuredDataKeysWhereUniqueInput!]
}

input SecuredDataKeysCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SecuredDataKeysWhereUniqueInput!
  create: SecuredDataKeysCreateWithoutProfileInput!
}

input SecuredDataKeysCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysListRelationFilter
  @join__type(graph: PROFILING)
{
  every: SecuredDataKeysWhereInput
  some: SecuredDataKeysWhereInput
  none: SecuredDataKeysWhereInput
}

input SecuredDataKeysMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input SecuredDataKeysOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: SecuredDataKeysCountOrderByAggregateInput
  _avg: SecuredDataKeysAvgOrderByAggregateInput
  _max: SecuredDataKeysMaxOrderByAggregateInput
  _min: SecuredDataKeysMinOrderByAggregateInput
  _sum: SecuredDataKeysSumOrderByAggregateInput
}

input SecuredDataKeysOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
}

enum SecuredDataKeysScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  SecureDataType @join__enumValue(graph: PROFILING)
  key @join__enumValue(graph: PROFILING)
  used @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input SecuredDataKeysScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SecuredDataKeysScalarWhereInput!]
  OR: [SecuredDataKeysScalarWhereInput!]
  NOT: [SecuredDataKeysScalarWhereInput!]
  id: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  key: StringFilter
  used: IntFilter
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SecuredDataKeysScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  OR: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  NOT: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  SecureDataType: EnumSecureDataTypeWithAggregatesFilter
  key: StringWithAggregatesFilter
  used: IntWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SecuredDataKeysSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  used: SortOrder
}

input SecuredDataKeysUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput
}

input SecuredDataKeysUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: SecuredDataKeysCreateWithoutProfileInput
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  upsert: [SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
  set: [SecuredDataKeysWhereUniqueInput!]
  disconnect: [SecuredDataKeysWhereUniqueInput!]
  delete: [SecuredDataKeysWhereUniqueInput!]
  connect: [SecuredDataKeysWhereUniqueInput!]
  update: [SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [SecuredDataKeysUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [SecuredDataKeysScalarWhereInput!]
}

input SecuredDataKeysUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SecuredDataKeysScalarWhereInput!
  data: SecuredDataKeysUpdateManyMutationInput!
}

input SecuredDataKeysUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SecuredDataKeysWhereUniqueInput!
  data: SecuredDataKeysUpdateWithoutProfileInput!
}

input SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SecuredDataKeysWhereUniqueInput!
  update: SecuredDataKeysUpdateWithoutProfileInput!
  create: SecuredDataKeysCreateWithoutProfileInput!
}

input SecuredDataKeysWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SecuredDataKeysWhereInput!]
  OR: [SecuredDataKeysWhereInput!]
  NOT: [SecuredDataKeysWhereInput!]
  id: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  key: StringFilter
  used: IntFilter
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
}

input SecuredDataKeysWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  key: String
}

input SettingsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
  Profile: ProfileCreateNestedOneWithoutSettingsInput!
}

input SettingsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: SettingsCreateWithoutProfileInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  connect: SettingsWhereUniqueInput
}

input SettingsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: SettingsWhereUniqueInput!
  create: SettingsCreateWithoutProfileInput!
}

input SettingsCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
  _count: SettingsCountOrderByAggregateInput
  _max: SettingsMaxOrderByAggregateInput
  _min: SettingsMinOrderByAggregateInput
}

input SettingsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
  Profile: ProfileOrderByWithRelationInput
}

input SettingsRelationFilter
  @join__type(graph: PROFILING)
{
  is: SettingsWhereInput
  isNot: SettingsWhereInput
}

enum SettingsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  messagePushNotifications @join__enumValue(graph: PROFILING)
  eventPushNotifications @join__enumValue(graph: PROFILING)
  PushNotifications @join__enumValue(graph: PROFILING)
}

input SettingsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [SettingsScalarWhereWithAggregatesInput!]
  OR: [SettingsScalarWhereWithAggregatesInput!]
  NOT: [SettingsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  messagePushNotifications: BoolWithAggregatesFilter
  eventPushNotifications: BoolWithAggregatesFilter
  PushNotifications: BoolWithAggregatesFilter
}

input SettingsUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSettingsNestedInput
}

input SettingsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: SettingsCreateWithoutProfileInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  upsert: SettingsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: SettingsWhereUniqueInput
  update: SettingsUpdateWithoutProfileInput
}

input SettingsUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: SettingsUpdateWithoutProfileInput!
  create: SettingsCreateWithoutProfileInput!
}

input SettingsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: StringFilter
  profileId: StringFilter
  messagePushNotifications: BoolFilter
  eventPushNotifications: BoolFilter
  PushNotifications: BoolFilter
  Profile: ProfileWhereInput
}

input SettingsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

enum SortOrder
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  asc @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  desc @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
}

type State
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  isoCode: String!
  Geometry: Geometry!
  geometryId: Int!
  Area(where: AreaWhereInput, orderBy: [AreaOrderByWithRelationInput!], cursor: AreaWhereUniqueInput, take: Int, skip: Int, distinct: [AreaScalarFieldEnum!]): [Area!]!
}

input StateAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input StateCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input StateCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Geometry: GeometryCreateNestedOneWithoutStateInput!
  Area: AreaCreateNestedManyWithoutStateInput
}

input StateCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  geometryId: Int!
}

input StateCreateNestedOneWithoutAreaInput
  @join__type(graph: PROFILING)
{
  create: StateCreateWithoutAreaInput
  connectOrCreate: StateCreateOrConnectWithoutAreaInput
  connect: StateWhereUniqueInput
}

input StateCreateNestedOneWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  create: StateCreateWithoutGeometryInput
  connectOrCreate: StateCreateOrConnectWithoutGeometryInput
  connect: StateWhereUniqueInput
}

input StateCreateOrConnectWithoutAreaInput
  @join__type(graph: PROFILING)
{
  where: StateWhereUniqueInput!
  create: StateCreateWithoutAreaInput!
}

input StateCreateOrConnectWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  where: StateWhereUniqueInput!
  create: StateCreateWithoutGeometryInput!
}

input StateCreateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Geometry: GeometryCreateNestedOneWithoutStateInput!
}

input StateCreateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  isoCode: String!
  Area: AreaCreateNestedManyWithoutStateInput
}

input StateMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input StateMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
}

input StateOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
  _count: StateCountOrderByAggregateInput
  _avg: StateAvgOrderByAggregateInput
  _max: StateMaxOrderByAggregateInput
  _min: StateMinOrderByAggregateInput
  _sum: StateSumOrderByAggregateInput
}

input StateOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  isoCode: SortOrder
  geometryId: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  Area: AreaOrderByRelationAggregateInput
}

input StateRelationFilter
  @join__type(graph: PROFILING)
{
  is: StateWhereInput
  isNot: StateWhereInput
}

type StateResponseObject
  @join__type(graph: PROFILING)
{
  name: String!
  isoCode: String!
  countryCode: String!
  latitude: String
  longitude: String
}

enum StateScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  isoCode @join__enumValue(graph: PROFILING)
  geometryId @join__enumValue(graph: PROFILING)
}

input StateScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [StateScalarWhereWithAggregatesInput!]
  OR: [StateScalarWhereWithAggregatesInput!]
  NOT: [StateScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  isoCode: StringWithAggregatesFilter
  geometryId: IntWithAggregatesFilter
}

input StateSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  geometryId: SortOrder
}

input StateUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutStateNestedInput
  Area: AreaUpdateManyWithoutStateNestedInput
}

input StateUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
}

input StateUpdateOneRequiredWithoutAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: StateCreateWithoutAreaInput
  connectOrCreate: StateCreateOrConnectWithoutAreaInput
  upsert: StateUpsertWithoutAreaInput
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutAreaInput
}

input StateUpdateOneWithoutGeometryNestedInput
  @join__type(graph: PROFILING)
{
  create: StateCreateWithoutGeometryInput
  connectOrCreate: StateCreateOrConnectWithoutGeometryInput
  upsert: StateUpsertWithoutGeometryInput
  disconnect: Boolean
  delete: Boolean
  connect: StateWhereUniqueInput
  update: StateUpdateWithoutGeometryInput
}

input StateUpdateWithoutAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Geometry: GeometryUpdateOneRequiredWithoutStateNestedInput
}

input StateUpdateWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isoCode: StringFieldUpdateOperationsInput
  Area: AreaUpdateManyWithoutStateNestedInput
}

input StateUpsertWithoutAreaInput
  @join__type(graph: PROFILING)
{
  update: StateUpdateWithoutAreaInput!
  create: StateCreateWithoutAreaInput!
}

input StateUpsertWithoutGeometryInput
  @join__type(graph: PROFILING)
{
  update: StateUpdateWithoutGeometryInput!
  create: StateCreateWithoutGeometryInput!
}

input StateWhereInput
  @join__type(graph: PROFILING)
{
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: StringFilter
  name: StringFilter
  isoCode: StringFilter
  geometryId: IntFilter
  Geometry: GeometryWhereInput
  Area: AreaListRelationFilter
}

input StateWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  isoCode: String
  geometryId: Int
}

type Story
  @join__type(graph: PROFILING)
{
  id: ID!
  date: DateTime!
  Profile: Profile!
  emojimood: [Emojimood!]!
  photos: [Photo!]!
  startDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
}

input StoryCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutStoryInput
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
}

input StoryCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [StoryCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input StoryCreateNestedManyWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutEmojimoodInput
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutProfileInput
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateNestedOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutPhotosInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  connect: StoryWhereUniqueInput
}

input StoryCreateOrConnectWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutEmojimoodInput!
}

input StoryCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryCreateWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
}

input StoryCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
}

input StoryCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutStoryInput
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
}

input StoryListRelationFilter
  @join__type(graph: PROFILING)
{
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input StoryMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input StoryOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: StoryCountOrderByAggregateInput
  _max: StoryMaxOrderByAggregateInput
  _min: StoryMinOrderByAggregateInput
}

input StoryOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  emojimood: EmojimoodOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
}

input StoryRelationFilter
  @join__type(graph: PROFILING)
{
  is: StoryWhereInput
  isNot: StoryWhereInput
}

enum StoryScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  date @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input StoryScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  date: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoryScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [StoryScalarWhereWithAggregatesInput!]
  OR: [StoryScalarWhereWithAggregatesInput!]
  NOT: [StoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StoryUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
}

input StoryUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyWithoutEmojimoodNestedInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutEmojimoodInput
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutEmojimoodInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutEmojimoodInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutEmojimoodInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutProfileInput
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithWhereWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateOneWithoutPhotosNestedInput
  @join__type(graph: PROFILING)
{
  create: StoryCreateWithoutPhotosInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  upsert: StoryUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: StoryWhereUniqueInput
  update: StoryUpdateWithoutPhotosInput
}

input StoryUpdateWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
}

input StoryUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
}

input StoryUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
}

input StoryUpdateWithWhereUniqueWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutEmojimoodInput!
}

input StoryUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutProfileInput!
}

input StoryUpsertWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  update: StoryUpdateWithoutPhotosInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryUpsertWithWhereUniqueWithoutEmojimoodInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutEmojimoodInput!
  create: StoryCreateWithoutEmojimoodInput!
}

input StoryUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutProfileInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  date: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  photos: PhotoListRelationFilter
  emojimood: EmojimoodListRelationFilter
  Profile: ProfileWhereInput
}

input StoryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input StringFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  set: String
}

input StringFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input StringNullableListFilter
  @join__type(graph: PROFILING)
{
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input StringWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type Tag
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  emoji: String
  DetailInformation(where: DetailInformationWhereInput, orderBy: [DetailInformationOrderByWithRelationInput!], cursor: DetailInformationWhereUniqueInput, take: Int, skip: Int, distinct: [DetailInformationScalarFieldEnum!]): [DetailInformation!]!
  Category: Category
  categoryId: String
}

input TagAvgOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input TagCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  emoji: SortOrder
  categoryId: SortOrder
}

input TagCreateInput
  @join__type(graph: PROFILING)
{
  name: String!
  emoji: String
  DetailInformation: DetailInformationCreateNestedManyWithoutTagsInput
  Category: CategoryCreateNestedOneWithoutTagsInput
}

input TagCreateManyCategoryInput
  @join__type(graph: PROFILING)
{
  id: Int
  name: String!
  emoji: String
}

input TagCreateManyCategoryInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [TagCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input TagCreateManyInput
  @join__type(graph: PROFILING)
{
  id: Int
  name: String!
  emoji: String
  categoryId: String
}

input TagCreateNestedManyWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  create: TagCreateWithoutCategoryInput
  connectOrCreate: [TagCreateOrConnectWithoutCategoryInput!]
  createMany: TagCreateManyCategoryInputEnvelope
  connect: [TagWhereUniqueInput!]
}

input TagCreateNestedManyWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  create: TagCreateWithoutDetailInformationInput
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOrConnectWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  create: TagCreateWithoutCategoryInput!
}

input TagCreateOrConnectWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagCreateWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  name: String!
  emoji: String
  DetailInformation: DetailInformationCreateNestedManyWithoutTagsInput
}

input TagCreateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  name: String!
  emoji: String
  Category: CategoryCreateNestedOneWithoutTagsInput
}

input TagListRelationFilter
  @join__type(graph: PROFILING)
{
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  emoji: SortOrder
  categoryId: SortOrder
}

input TagMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  emoji: SortOrder
  categoryId: SortOrder
}

input TagOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input TagOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  emoji: SortOrder
  categoryId: SortOrder
  _count: TagCountOrderByAggregateInput
  _avg: TagAvgOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
}

input TagOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  emoji: SortOrder
  categoryId: SortOrder
  DetailInformation: DetailInformationOrderByRelationAggregateInput
  Category: CategoryOrderByWithRelationInput
}

enum TagScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  emoji @join__enumValue(graph: PROFILING)
  categoryId @join__enumValue(graph: PROFILING)
}

input TagScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  emoji: StringNullableFilter
  categoryId: StringNullableFilter
}

input TagScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  emoji: StringNullableWithAggregatesFilter
  categoryId: StringNullableWithAggregatesFilter
}

input TagSumOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
}

input TagUpdateInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  DetailInformation: DetailInformationUpdateManyWithoutTagsNestedInput
  Category: CategoryUpdateOneWithoutTagsNestedInput
}

input TagUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutCategoryNestedInput
  @join__type(graph: PROFILING)
{
  create: TagCreateWithoutCategoryInput
  connectOrCreate: [TagCreateOrConnectWithoutCategoryInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCategoryInput!]
  createMany: TagCreateManyCategoryInputEnvelope
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TagUpdateManyWithWhereWithoutCategoryInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpdateManyWithoutDetailInformationNestedInput
  @join__type(graph: PROFILING)
{
  create: TagCreateWithoutDetailInformationInput
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDetailInformationInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDetailInformationInput!]
  updateMany: [TagUpdateManyWithWhereWithoutDetailInformationInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpdateManyWithWhereWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagUpdateManyWithWhereWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagUpdateWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  DetailInformation: DetailInformationUpdateManyWithoutTagsNestedInput
}

input TagUpdateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  Category: CategoryUpdateOneWithoutTagsNestedInput
}

input TagUpdateWithWhereUniqueWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutCategoryInput!
}

input TagUpdateWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutDetailInformationInput!
}

input TagUpsertWithWhereUniqueWithoutCategoryInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutCategoryInput!
  create: TagCreateWithoutCategoryInput!
}

input TagUpsertWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutDetailInformationInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  emoji: StringNullableFilter
  categoryId: StringNullableFilter
  DetailInformation: DetailInformationListRelationFilter
  Category: CategoryWhereInput
}

input TagWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Theme
  @join__type(graph: PROFILING)
{
  id: ID!
  name: String!
  ProfileTheme: [ProfileTheme!]!
  mobile: Json!
  web: Json!
  mobileVersions: [String!]!
  webVersions: [String!]!
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ThemeCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeInput
}

input ThemeCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ThemeCreatemobileInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input ThemeCreatemobileVersionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input ThemeCreateNestedOneWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  create: ThemeCreateWithoutProfileThemeInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  connect: ThemeWhereUniqueInput
}

input ThemeCreateOrConnectWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  where: ThemeWhereUniqueInput!
  create: ThemeCreateWithoutProfileThemeInput!
}

input ThemeCreatewebInput
  @join__type(graph: PROFILING)
{
  set: [Json!]!
}

input ThemeCreatewebVersionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]!
}

input ThemeCreateWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ThemeManager
  @join__type(graph: PROFILING)
{
  id: ID!
  ProfileTheme: [ProfileTheme!]!
  Profile: Profile!
  profileId: String!
}

input ThemeManagerCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  updatedAt: DateTime
  createdAt: DateTime
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
}

input ThemeManagerCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  updatedAt: DateTime
  createdAt: DateTime
}

input ThemeManagerCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: ThemeManagerCreateWithoutProfileInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  connect: ThemeManagerWhereUniqueInput
}

input ThemeManagerCreateNestedOneWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  create: ThemeManagerCreateWithoutProfileThemeInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  connect: ThemeManagerWhereUniqueInput
}

input ThemeManagerCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: ThemeManagerWhereUniqueInput!
  create: ThemeManagerCreateWithoutProfileInput!
}

input ThemeManagerCreateOrConnectWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  where: ThemeManagerWhereUniqueInput!
  create: ThemeManagerCreateWithoutProfileThemeInput!
}

input ThemeManagerCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  updatedAt: DateTime
  createdAt: DateTime
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
}

input ThemeManagerCreateWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  id: String
  updatedAt: DateTime
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
}

input ThemeManagerMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  _count: ThemeManagerCountOrderByAggregateInput
  _max: ThemeManagerMaxOrderByAggregateInput
  _min: ThemeManagerMinOrderByAggregateInput
}

input ThemeManagerOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
}

input ThemeManagerRelationFilter
  @join__type(graph: PROFILING)
{
  is: ThemeManagerWhereInput
  isNot: ThemeManagerWhereInput
}

enum ThemeManagerScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
}

input ThemeManagerScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ThemeManagerScalarWhereWithAggregatesInput!]
  OR: [ThemeManagerScalarWhereWithAggregatesInput!]
  NOT: [ThemeManagerScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input ThemeManagerUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
}

input ThemeManagerUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: ThemeManagerCreateWithoutProfileInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  upsert: ThemeManagerUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: ThemeManagerWhereUniqueInput
  update: ThemeManagerUpdateWithoutProfileInput
}

input ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  @join__type(graph: PROFILING)
{
  create: ThemeManagerCreateWithoutProfileThemeInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  upsert: ThemeManagerUpsertWithoutProfileThemeInput
  disconnect: Boolean
  delete: Boolean
  connect: ThemeManagerWhereUniqueInput
  update: ThemeManagerUpdateWithoutProfileThemeInput
}

input ThemeManagerUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
}

input ThemeManagerUpdateWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
}

input ThemeManagerUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: ThemeManagerUpdateWithoutProfileInput!
  create: ThemeManagerCreateWithoutProfileInput!
}

input ThemeManagerUpsertWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  update: ThemeManagerUpdateWithoutProfileThemeInput!
  create: ThemeManagerCreateWithoutProfileThemeInput!
}

input ThemeManagerWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ThemeManagerWhereInput!]
  OR: [ThemeManagerWhereInput!]
  NOT: [ThemeManagerWhereInput!]
  id: StringFilter
  profileId: StringFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
  ProfileTheme: ProfileThemeListRelationFilter
  Profile: ProfileWhereInput
}

input ThemeManagerWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

input ThemeMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ThemeCountOrderByAggregateInput
  _max: ThemeMaxOrderByAggregateInput
  _min: ThemeMinOrderByAggregateInput
}

input ThemeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
}

input ThemeRelationFilter
  @join__type(graph: PROFILING)
{
  is: ThemeWhereInput
  isNot: ThemeWhereInput
}

enum ThemeScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  mobileVersions @join__enumValue(graph: PROFILING)
  webVersions @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  mobile @join__enumValue(graph: PROFILING)
  web @join__enumValue(graph: PROFILING)
  startDate @join__enumValue(graph: PROFILING)
  endDate @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input ThemeScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [ThemeScalarWhereWithAggregatesInput!]
  OR: [ThemeScalarWhereWithAggregatesInput!]
  NOT: [ThemeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  mobileVersions: StringNullableListFilter
  webVersions: StringNullableListFilter
  name: StringWithAggregatesFilter
  mobile: JsonNullableListFilter
  web: JsonNullableListFilter
  startDate: DateTimeNullableWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ThemeUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeNestedInput
}

input ThemeUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeUpdatemobileInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input ThemeUpdatemobileVersionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  @join__type(graph: PROFILING)
{
  create: ThemeCreateWithoutProfileThemeInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  upsert: ThemeUpsertWithoutProfileThemeInput
  connect: ThemeWhereUniqueInput
  update: ThemeUpdateWithoutProfileThemeInput
}

input ThemeUpdatewebInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input ThemeUpdatewebVersionsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: [String!]
}

input ThemeUpdateWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeUpsertWithoutProfileThemeInput
  @join__type(graph: PROFILING)
{
  update: ThemeUpdateWithoutProfileThemeInput!
  create: ThemeCreateWithoutProfileThemeInput!
}

input ThemeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  NOT: [ThemeWhereInput!]
  id: StringFilter
  mobileVersions: StringNullableListFilter
  webVersions: StringNullableListFilter
  name: StringFilter
  mobile: JsonNullableListFilter
  web: JsonNullableListFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  ProfileTheme: ProfileThemeListRelationFilter
}

input ThemeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input TonightPathCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
  Path: PathCreateNestedManyWithoutTonightPathInput
}

input TonightPathCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TonightPathCreateNestedOneWithoutPathInput
  @join__type(graph: PROFILING)
{
  create: TonightPathCreateWithoutPathInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  connect: TonightPathWhereUniqueInput
}

input TonightPathCreateOrConnectWithoutPathInput
  @join__type(graph: PROFILING)
{
  where: TonightPathWhereUniqueInput!
  create: TonightPathCreateWithoutPathInput!
}

input TonightPathCreateWithoutPathInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TonightPathMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: TonightPathCountOrderByAggregateInput
  _max: TonightPathMaxOrderByAggregateInput
  _min: TonightPathMinOrderByAggregateInput
}

input TonightPathOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Path: PathOrderByRelationAggregateInput
}

input TonightPathRelationFilter
  @join__type(graph: PROFILING)
{
  is: TonightPathWhereInput
  isNot: TonightPathWhereInput
}

enum TonightPathScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input TonightPathScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [TonightPathScalarWhereWithAggregatesInput!]
  OR: [TonightPathScalarWhereWithAggregatesInput!]
  NOT: [TonightPathScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TonightPathUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Path: PathUpdateManyWithoutTonightPathNestedInput
}

input TonightPathUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpdateOneWithoutPathNestedInput
  @join__type(graph: PROFILING)
{
  create: TonightPathCreateWithoutPathInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  upsert: TonightPathUpsertWithoutPathInput
  disconnect: Boolean
  delete: Boolean
  connect: TonightPathWhereUniqueInput
  update: TonightPathUpdateWithoutPathInput
}

input TonightPathUpdateWithoutPathInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpsertWithoutPathInput
  @join__type(graph: PROFILING)
{
  update: TonightPathUpdateWithoutPathInput!
  create: TonightPathCreateWithoutPathInput!
}

input TonightPathWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TonightPathWhereInput!]
  OR: [TonightPathWhereInput!]
  NOT: [TonightPathWhereInput!]
  id: StringFilter
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Path: PathListRelationFilter
}

input TonightPathWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum TransactionIsolationLevel
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  ReadUncommitted @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  ReadCommitted @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  RepeatableRead @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
  Serializable @join__enumValue(graph: MANAGING) @join__enumValue(graph: PROFILING)
}

enum TypeOfDocument
  @join__type(graph: PROFILING)
{
  PROFILE_PRIVACY_POLICY @join__enumValue(graph: PROFILING)
  PROFILE_TERMS_OF_SERVICE @join__enumValue(graph: PROFILING)
}

input UpdateManyNotificationStatusInput
  @join__type(graph: PROFILING)
{
  """List of the NotificationStatus IDs to update"""
  notificationStatusIds: [UpdateNotificationStatusInput!]!
}

union UpdateManyNotificationStatusUnionResponse
  @join__type(graph: PROFILING)
  @join__unionMember(graph: PROFILING, member: "UpdateNotificationResponse")
  @join__unionMember(graph: PROFILING, member: "ErrorProfiling")
 = UpdateNotificationResponse | ErrorProfiling

type UpdateNotificationResponse
  @join__type(graph: PROFILING)
{
  count: Int!
}

input UpdateNotificationStatusInput
  @join__type(graph: PROFILING)
{
  """A NotificationStatus ID"""
  id: String!
}

type Venue
  @join__type(graph: PROFILING)
{
  id: ID!
  Profile: Profile!
  profileId: String!
  name: String
  Location: Location
  LiveOutVenue: LiveOutVenue
  VenueStats: VenueStats!
  venueStatsId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueContactInput
  @join__type(graph: PROFILING)
{
  type: String
  value: String!
}

input VenueCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String!
  name: String
  venueStatsId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateNestedOneWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLocationInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  connect: VenueWhereUniqueInput
}

input VenueCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutLocationInput!
}

input VenueCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueCreateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  Location: LocationCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
}

input VenueMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: VenueCountOrderByAggregateInput
  _max: VenueMaxOrderByAggregateInput
  _min: VenueMinOrderByAggregateInput
}

input VenueOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
  Location: LocationOrderByWithRelationInput
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  VenueStats: VenueStatsOrderByWithRelationInput
}

input VenueRelationFilter
  @join__type(graph: PROFILING)
{
  is: VenueWhereInput
  isNot: VenueWhereInput
}

enum VenueScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  name @join__enumValue(graph: PROFILING)
  venueStatsId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input VenueScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [VenueScalarWhereWithAggregatesInput!]
  OR: [VenueScalarWhereWithAggregatesInput!]
  NOT: [VenueScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  venueStatsId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type VenuesNearbyResponse
  @join__type(graph: PROFILING)
{
  venuesNearby: [ProfileVenue!]!
  searchArea: Area
}

type VenueStats
  @join__type(graph: PROFILING)
{
  id: ID!
  Venue: Venue
  Out(where: OutWhereInput, orderBy: [OutOrderByWithRelationInput!], cursor: OutWhereUniqueInput, take: Int, skip: Int, distinct: [OutScalarFieldEnum!]): [Out!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueStatsCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  Out: OutCreateNestedManyWithoutVenueStatsInput
}

input VenueStatsCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsCreateNestedOneWithoutOutInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutOutInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutOutInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateOrConnectWithoutOutInput
  @join__type(graph: PROFILING)
{
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutOutInput!
}

input VenueStatsCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsCreateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
}

input VenueStatsCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Out: OutCreateNestedManyWithoutVenueStatsInput
}

input VenueStatsMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: VenueStatsCountOrderByAggregateInput
  _max: VenueStatsMaxOrderByAggregateInput
  _min: VenueStatsMinOrderByAggregateInput
}

input VenueStatsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Venue: VenueOrderByWithRelationInput
  Out: OutOrderByRelationAggregateInput
}

input VenueStatsRelationFilter
  @join__type(graph: PROFILING)
{
  is: VenueStatsWhereInput
  isNot: VenueStatsWhereInput
}

enum VenueStatsScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  updatedAt @join__enumValue(graph: PROFILING)
}

input VenueStatsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [VenueStatsScalarWhereWithAggregatesInput!]
  OR: [VenueStatsScalarWhereWithAggregatesInput!]
  NOT: [VenueStatsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VenueStatsUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
  Out: OutUpdateManyWithoutVenueStatsNestedInput
}

input VenueStatsUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  upsert: VenueStatsUpsertWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutVenueInput
}

input VenueStatsUpdateOneWithoutOutNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutOutInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutOutInput
  upsert: VenueStatsUpsertWithoutOutInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutOutInput
}

input VenueStatsUpdateWithoutOutInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
}

input VenueStatsUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Out: OutUpdateManyWithoutVenueStatsNestedInput
}

input VenueStatsUpsertWithoutOutInput
  @join__type(graph: PROFILING)
{
  update: VenueStatsUpdateWithoutOutInput!
  create: VenueStatsCreateWithoutOutInput!
}

input VenueStatsUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: VenueStatsUpdateWithoutVenueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VenueStatsWhereInput!]
  OR: [VenueStatsWhereInput!]
  NOT: [VenueStatsWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Venue: VenueWhereInput
  Out: OutListRelationFilter
}

input VenueStatsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input VenueUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  upsert: VenueUpsertWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutLiveOutVenueInput
}

input VenueUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLocationInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  upsert: VenueUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutLocationInput
}

input VenueUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  upsert: VenueUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutProfileInput
}

input VenueUpdateOneWithoutVenueStatsNestedInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  upsert: VenueUpsertWithoutVenueStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutVenueStatsInput
}

input VenueUpdateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
}

input VenueUpdateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
}

input VenueUpsertWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutLiveOutVenueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutLocationInput!
  create: VenueCreateWithoutLocationInput!
}

input VenueUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutProfileInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueUpsertWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutVenueStatsInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
  id: StringFilter
  profileId: StringFilter
  name: StringNullableFilter
  venueStatsId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
  Location: LocationWhereInput
  LiveOutVenue: LiveOutVenueWhereInput
  VenueStats: VenueStatsWhereInput
}

input VenueWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  venueStatsId: String
}

type Vote
  @join__type(graph: PROFILING)
{
  id: ID!
  upvote: Boolean!
  Profile: Profile!
  profileId: String!
  ComingArea: ComingArea
  comingAreaId: String
  H3Index6VenueRecommendation: H3Index6VenueRecommendation
  h3Index6VenueRecommendationId: String
  createdAt: DateTime!
  H3Index5VenueRecommendation: H3Index5VenueRecommendation
  h3Index5VenueRecommendationId: String
}

input VoteCountOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  upvote: SortOrder
  profileId: SortOrder
  comingAreaId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input VoteCreateInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVoteInput!
  ComingArea: ComingAreaCreateNestedOneWithoutVoteInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutVoteInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutVoteInput
}

input VoteCreateManyComingAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  profileId: String!
  h3Index6VenueRecommendationId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input VoteCreateManyComingAreaInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [VoteCreateManyComingAreaInput!]!
  skipDuplicates: Boolean
}

input VoteCreateManyH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  profileId: String!
  comingAreaId: String
  h3Index6VenueRecommendationId: String
  createdAt: DateTime
}

input VoteCreateManyH3Index5VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [VoteCreateManyH3Index5VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input VoteCreateManyH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  profileId: String!
  comingAreaId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input VoteCreateManyH3Index6VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [VoteCreateManyH3Index6VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input VoteCreateManyInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  profileId: String!
  comingAreaId: String
  h3Index6VenueRecommendationId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input VoteCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  comingAreaId: String
  h3Index6VenueRecommendationId: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input VoteCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [VoteCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input VoteCreateNestedManyWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutComingAreaInput
  connectOrCreate: [VoteCreateOrConnectWithoutComingAreaInput!]
  createMany: VoteCreateManyComingAreaInputEnvelope
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateNestedManyWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [VoteCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  createMany: VoteCreateManyH3Index5VenueRecommendationInputEnvelope
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateNestedManyWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [VoteCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  createMany: VoteCreateManyH3Index6VenueRecommendationInputEnvelope
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutProfileInput
  connectOrCreate: [VoteCreateOrConnectWithoutProfileInput!]
  createMany: VoteCreateManyProfileInputEnvelope
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateOrConnectWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  create: VoteCreateWithoutComingAreaInput!
}

input VoteCreateOrConnectWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  create: VoteCreateWithoutH3Index5VenueRecommendationInput!
}

input VoteCreateOrConnectWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  create: VoteCreateWithoutH3Index6VenueRecommendationInput!
}

input VoteCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  create: VoteCreateWithoutProfileInput!
}

input VoteCreateWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVoteInput!
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutVoteInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutVoteInput
}

input VoteCreateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVoteInput!
  ComingArea: ComingAreaCreateNestedOneWithoutVoteInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutVoteInput
}

input VoteCreateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  createdAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVoteInput!
  ComingArea: ComingAreaCreateNestedOneWithoutVoteInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutVoteInput
}

input VoteCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  upvote: Boolean!
  createdAt: DateTime
  ComingArea: ComingAreaCreateNestedOneWithoutVoteInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutVoteInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutVoteInput
}

input VoteListRelationFilter
  @join__type(graph: PROFILING)
{
  every: VoteWhereInput
  some: VoteWhereInput
  none: VoteWhereInput
}

input VoteMaxOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  upvote: SortOrder
  profileId: SortOrder
  comingAreaId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input VoteMinOrderByAggregateInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  upvote: SortOrder
  profileId: SortOrder
  comingAreaId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
}

input VoteOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input VoteOrderByWithAggregationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  upvote: SortOrder
  profileId: SortOrder
  comingAreaId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  _count: VoteCountOrderByAggregateInput
  _max: VoteMaxOrderByAggregateInput
  _min: VoteMinOrderByAggregateInput
}

input VoteOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  upvote: SortOrder
  profileId: SortOrder
  comingAreaId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  ComingArea: ComingAreaOrderByWithRelationInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationOrderByWithRelationInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationOrderByWithRelationInput
}

enum VoteScalarFieldEnum
  @join__type(graph: PROFILING)
{
  id @join__enumValue(graph: PROFILING)
  upvote @join__enumValue(graph: PROFILING)
  profileId @join__enumValue(graph: PROFILING)
  comingAreaId @join__enumValue(graph: PROFILING)
  h3Index6VenueRecommendationId @join__enumValue(graph: PROFILING)
  createdAt @join__enumValue(graph: PROFILING)
  h3Index5VenueRecommendationId @join__enumValue(graph: PROFILING)
}

input VoteScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
  id: StringFilter
  upvote: BoolFilter
  profileId: StringFilter
  comingAreaId: StringNullableFilter
  h3Index6VenueRecommendationId: StringNullableFilter
  createdAt: DateTimeFilter
  h3Index5VenueRecommendationId: StringNullableFilter
}

input VoteScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING)
{
  AND: [VoteScalarWhereWithAggregatesInput!]
  OR: [VoteScalarWhereWithAggregatesInput!]
  NOT: [VoteScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  upvote: BoolWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  comingAreaId: StringNullableWithAggregatesFilter
  h3Index6VenueRecommendationId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  h3Index5VenueRecommendationId: StringNullableWithAggregatesFilter
}

input VoteUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVoteNestedInput
  ComingArea: ComingAreaUpdateOneWithoutVoteNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutVoteNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutVoteNestedInput
}

input VoteUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input VoteUpdateManyWithoutComingAreaNestedInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutComingAreaInput
  connectOrCreate: [VoteCreateOrConnectWithoutComingAreaInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutComingAreaInput!]
  createMany: VoteCreateManyComingAreaInputEnvelope
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutComingAreaInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutComingAreaInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [VoteCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  createMany: VoteCreateManyH3Index5VenueRecommendationInputEnvelope
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [VoteCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  createMany: VoteCreateManyH3Index6VenueRecommendationInputEnvelope
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING)
{
  create: VoteCreateWithoutProfileInput
  connectOrCreate: [VoteCreateOrConnectWithoutProfileInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: VoteCreateManyProfileInputEnvelope
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [VoteUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateManyWithWhereWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  where: VoteScalarWhereInput!
  data: VoteUpdateManyMutationInput!
}

input VoteUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteScalarWhereInput!
  data: VoteUpdateManyMutationInput!
}

input VoteUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteScalarWhereInput!
  data: VoteUpdateManyMutationInput!
}

input VoteUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VoteScalarWhereInput!
  data: VoteUpdateManyMutationInput!
}

input VoteUpdateWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVoteNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutVoteNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutVoteNestedInput
}

input VoteUpdateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVoteNestedInput
  ComingArea: ComingAreaUpdateOneWithoutVoteNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutVoteNestedInput
}

input VoteUpdateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVoteNestedInput
  ComingArea: ComingAreaUpdateOneWithoutVoteNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutVoteNestedInput
}

input VoteUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  upvote: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  ComingArea: ComingAreaUpdateOneWithoutVoteNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutVoteNestedInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutVoteNestedInput
}

input VoteUpdateWithWhereUniqueWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutComingAreaInput!
}

input VoteUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutH3Index5VenueRecommendationInput!
}

input VoteUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutH3Index6VenueRecommendationInput!
}

input VoteUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutProfileInput!
}

input VoteUpsertWithWhereUniqueWithoutComingAreaInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutComingAreaInput!
  create: VoteCreateWithoutComingAreaInput!
}

input VoteUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutH3Index5VenueRecommendationInput!
  create: VoteCreateWithoutH3Index5VenueRecommendationInput!
}

input VoteUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutH3Index6VenueRecommendationInput!
  create: VoteCreateWithoutH3Index6VenueRecommendationInput!
}

input VoteUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutProfileInput!
  create: VoteCreateWithoutProfileInput!
}

input VoteWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  id: StringFilter
  upvote: BoolFilter
  profileId: StringFilter
  comingAreaId: StringNullableFilter
  h3Index6VenueRecommendationId: StringNullableFilter
  createdAt: DateTimeFilter
  h3Index5VenueRecommendationId: StringNullableFilter
  Profile: ProfileWhereInput
  ComingArea: ComingAreaWhereInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationWhereInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationWhereInput
}

input VoteWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}
