schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION) {
  query: Query
  mutation: Mutation
}

directive @join__field(
  graph: join__Graph!
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

type Address @join__type(graph: PROFILING) {
  id: ID!
  formattedAddress: String!
  Location(
    where: LocationWhereInput
    orderBy: [LocationOrderByWithRelationInput!]
    cursor: LocationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LocationScalarFieldEnum!]
  ): [Location!]!
  AddressComponents(
    where: AddressComponentWhereInput
    orderBy: [AddressComponentOrderByWithRelationInput!]
    cursor: AddressComponentWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AddressComponentScalarFieldEnum!]
  ): [AddressComponent!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AddressComponent @join__type(graph: PROFILING) {
  id: ID!
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]!
  Address: Address
  addressId: String
}

input AddressComponentAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input AddressComponentCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  addressId: SortOrder
}

input AddressComponentCreateInput @join__type(graph: PROFILING) {
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
  Address: AddressCreateNestedOneWithoutAddressComponentsInput
}

input AddressComponentCreateManyAddressInput @join__type(graph: PROFILING) {
  id: Int
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentCreateManyAddressInputEnvelope
  @join__type(graph: PROFILING) {
  data: [AddressComponentCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input AddressComponentCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
  addressId: String
}

input AddressComponentCreateNestedManyWithoutAddressInput
  @join__type(graph: PROFILING) {
  create: AddressComponentCreateWithoutAddressInput
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  connect: [AddressComponentWhereUniqueInput!]
}

input AddressComponentCreateOrConnectWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: AddressComponentWhereUniqueInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentCreatetypesInput @join__type(graph: PROFILING) {
  set: [String!]!
}

input AddressComponentCreateWithoutAddressInput @join__type(graph: PROFILING) {
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]
}

input AddressComponentListRelationFilter @join__type(graph: PROFILING) {
  every: AddressComponentWhereInput
  some: AddressComponentWhereInput
  none: AddressComponentWhereInput
}

input AddressComponentMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  addressId: SortOrder
}

input AddressComponentMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  addressId: SortOrder
}

input AddressComponentOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input AddressComponentOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  addressId: SortOrder
  _count: AddressComponentCountOrderByAggregateInput
  _avg: AddressComponentAvgOrderByAggregateInput
  _max: AddressComponentMaxOrderByAggregateInput
  _min: AddressComponentMinOrderByAggregateInput
  _sum: AddressComponentSumOrderByAggregateInput
}

input AddressComponentOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  long_name: SortOrder
  short_name: SortOrder
  types: SortOrder
  Address: AddressOrderByWithRelationInput
  addressId: SortOrder
}

enum AddressComponentScalarFieldEnum @join__type(graph: PROFILING) {
  id
  h3Index15
  long_name
  short_name
  types
  addressId
}

input AddressComponentScalarWhereInput @join__type(graph: PROFILING) {
  AND: [AddressComponentScalarWhereInput!]
  OR: [AddressComponentScalarWhereInput!]
  NOT: [AddressComponentScalarWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  addressId: StringNullableFilter
}

input AddressComponentScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [AddressComponentScalarWhereWithAggregatesInput!]
  OR: [AddressComponentScalarWhereWithAggregatesInput!]
  NOT: [AddressComponentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  long_name: StringWithAggregatesFilter
  short_name: StringWithAggregatesFilter
  types: StringNullableListFilter
  addressId: StringNullableWithAggregatesFilter
}

input AddressComponentSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input AddressComponentUpdateInput @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
  Address: AddressUpdateOneWithoutAddressComponentsNestedInput
}

input AddressComponentUpdateManyMutationInput @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateManyWithoutAddressNestedInput
  @join__type(graph: PROFILING) {
  create: AddressComponentCreateWithoutAddressInput
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  upsert: [AddressComponentUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  set: [AddressComponentWhereUniqueInput!]
  disconnect: [AddressComponentWhereUniqueInput!]
  delete: [AddressComponentWhereUniqueInput!]
  connect: [AddressComponentWhereUniqueInput!]
  update: [AddressComponentUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [AddressComponentUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [AddressComponentScalarWhereInput!]
}

input AddressComponentUpdateManyWithWhereWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: AddressComponentScalarWhereInput!
  data: AddressComponentUpdateManyMutationInput!
}

input AddressComponentUpdatetypesInput @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input AddressComponentUpdateWithoutAddressInput @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: [String!]
}

input AddressComponentUpdateWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: AddressComponentWhereUniqueInput!
  data: AddressComponentUpdateWithoutAddressInput!
}

input AddressComponentUpsertWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: AddressComponentWhereUniqueInput!
  update: AddressComponentUpdateWithoutAddressInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentWhereInput @join__type(graph: PROFILING) {
  AND: [AddressComponentWhereInput!]
  OR: [AddressComponentWhereInput!]
  NOT: [AddressComponentWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  Address: AddressWhereInput
  addressId: StringNullableFilter
}

input AddressComponentWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

input AddressCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressCreateInput @join__type(graph: PROFILING) {
  id: String
  formattedAddress: String!
  Location: LocationCreateNestedManyWithoutAddressInput
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressCreateManyInput @join__type(graph: PROFILING) {
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressCreateNestedOneWithoutAddressComponentsInput
  @join__type(graph: PROFILING) {
  create: AddressCreateWithoutAddressComponentsInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutLocationInput @join__type(graph: PROFILING) {
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOrConnectWithoutAddressComponentsInput
  @join__type(graph: PROFILING) {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutAddressComponentsInput!
}

input AddressCreateOrConnectWithoutLocationInput @join__type(graph: PROFILING) {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressCreateWithoutAddressComponentsInput @join__type(graph: PROFILING) {
  id: String
  formattedAddress: String!
  Location: LocationCreateNestedManyWithoutAddressInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressCreateWithoutLocationInput @join__type(graph: PROFILING) {
  id: String
  formattedAddress: String!
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  formattedAddress: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
}

input AddressOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  formattedAddress: SortOrder
  Location: LocationOrderByRelationAggregateInput
  AddressComponents: AddressComponentOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressRelationFilter @join__type(graph: PROFILING) {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum @join__type(graph: PROFILING) {
  id
  formattedAddress
  createdAt
  updatedAt
}

input AddressScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  formattedAddress: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input AddressUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutAddressComponentsNestedInput
  @join__type(graph: PROFILING) {
  create: AddressCreateWithoutAddressComponentsInput
  connectOrCreate: AddressCreateOrConnectWithoutAddressComponentsInput
  upsert: AddressUpsertWithoutAddressComponentsInput
  disconnect: Boolean
  delete: Boolean
  connect: AddressWhereUniqueInput
  update: AddressUpdateWithoutAddressComponentsInput
}

input AddressUpdateOneWithoutLocationNestedInput @join__type(graph: PROFILING) {
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  upsert: AddressUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: AddressWhereUniqueInput
  update: AddressUpdateWithoutLocationInput
}

input AddressUpdateWithoutAddressComponentsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  Location: LocationUpdateManyWithoutAddressNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpdateWithoutLocationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  AddressComponents: AddressComponentUpdateManyWithoutAddressNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AddressUpsertWithoutAddressComponentsInput @join__type(graph: PROFILING) {
  update: AddressUpdateWithoutAddressComponentsInput!
  create: AddressCreateWithoutAddressComponentsInput!
}

input AddressUpsertWithoutLocationInput @join__type(graph: PROFILING) {
  update: AddressUpdateWithoutLocationInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressWhereInput @join__type(graph: PROFILING) {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: StringFilter
  formattedAddress: StringFilter
  Location: LocationListRelationFilter
  AddressComponents: AddressComponentListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input AddressWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

enum AppType @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  BARFRIENDS
  PETFRIENDS
}

type AuthenticationProvider @join__type(graph: PROFILING) {
  id: ID!
  Credentials: Credentials
  phones(
    where: PhoneWhereInput
    orderBy: [PhoneOrderByWithRelationInput!]
    cursor: PhoneWhereUniqueInput
    take: Int
    skip: Int
    distinct: [PhoneScalarFieldEnum!]
  ): [Phone!]!
  emails(
    where: EmailWhereInput
    orderBy: [EmailOrderByWithRelationInput!]
    cursor: EmailWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EmailScalarFieldEnum!]
  ): [Email!]!
  Password: Password
  codepassword: Code
}

input AuthenticationProviderCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input AuthenticationProviderCreateInput @join__type(graph: PROFILING) {
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateManyInput @join__type(graph: PROFILING) {
  id: String
}

input AuthenticationProviderCreateNestedManyWithoutEmailsInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutEmailsInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
}

input AuthenticationProviderCreateNestedManyWithoutPhonesInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutPhonesInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
}

input AuthenticationProviderCreateNestedOneWithoutCodepasswordInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutCodepasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateNestedOneWithoutPasswordInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutPasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
}

input AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderCreateOrConnectWithoutEmailsInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutEmailsInput!
}

input AuthenticationProviderCreateOrConnectWithoutPasswordInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutPasswordInput!
}

input AuthenticationProviderCreateOrConnectWithoutPhonesInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutPhonesInput!
}

input AuthenticationProviderCreateWithoutCodepasswordInput
  @join__type(graph: PROFILING) {
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  id: String
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutEmailsInput
  @join__type(graph: PROFILING) {
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPasswordInput
  @join__type(graph: PROFILING) {
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderCreateWithoutPhonesInput
  @join__type(graph: PROFILING) {
  id: String
  Credentials: CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderListRelationFilter @join__type(graph: PROFILING) {
  every: AuthenticationProviderWhereInput
  some: AuthenticationProviderWhereInput
  none: AuthenticationProviderWhereInput
}

input AuthenticationProviderMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input AuthenticationProviderMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input AuthenticationProviderOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input AuthenticationProviderOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  _count: AuthenticationProviderCountOrderByAggregateInput
  _max: AuthenticationProviderMaxOrderByAggregateInput
  _min: AuthenticationProviderMinOrderByAggregateInput
}

input AuthenticationProviderOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  phones: PhoneOrderByRelationAggregateInput
  emails: EmailOrderByRelationAggregateInput
  Password: PasswordOrderByWithRelationInput
  codepassword: CodeOrderByWithRelationInput
}

input AuthenticationProviderRelationFilter @join__type(graph: PROFILING) {
  is: AuthenticationProviderWhereInput
  isNot: AuthenticationProviderWhereInput
}

enum AuthenticationProviderScalarFieldEnum @join__type(graph: PROFILING) {
  id
}

input AuthenticationProviderScalarWhereInput @join__type(graph: PROFILING) {
  AND: [AuthenticationProviderScalarWhereInput!]
  OR: [AuthenticationProviderScalarWhereInput!]
  NOT: [AuthenticationProviderScalarWhereInput!]
  id: StringFilter
}

input AuthenticationProviderScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  OR: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  NOT: [AuthenticationProviderScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
}

input AuthenticationProviderUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
}

input AuthenticationProviderUpdateManyWithoutEmailsNestedInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutEmailsInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutEmailsInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  delete: [AuthenticationProviderWhereUniqueInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
}

input AuthenticationProviderUpdateManyWithoutPhonesNestedInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutPhonesInput
  connectOrCreate: [AuthenticationProviderCreateOrConnectWithoutPhonesInput!]
  upsert: [AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput!]
  set: [AuthenticationProviderWhereUniqueInput!]
  disconnect: [AuthenticationProviderWhereUniqueInput!]
  delete: [AuthenticationProviderWhereUniqueInput!]
  connect: [AuthenticationProviderWhereUniqueInput!]
  update: [AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput!]
  updateMany: [AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput!]
  deleteMany: [AuthenticationProviderScalarWhereInput!]
}

input AuthenticationProviderUpdateManyWithWhereWithoutEmailsInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderScalarWhereInput!
  data: AuthenticationProviderUpdateManyMutationInput!
}

input AuthenticationProviderUpdateManyWithWhereWithoutPhonesInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderScalarWhereInput!
  data: AuthenticationProviderUpdateManyMutationInput!
}

input AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutPasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutPasswordInput
  upsert: AuthenticationProviderUpsertWithoutPasswordInput
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutPasswordInput
}

input AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutCodepasswordInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCodepasswordInput
  upsert: AuthenticationProviderUpsertWithoutCodepasswordInput
  disconnect: Boolean
  delete: Boolean
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutCodepasswordInput
}

input AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  @join__type(graph: PROFILING) {
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  upsert: AuthenticationProviderUpsertWithoutCredentialsInput
  disconnect: Boolean
  delete: Boolean
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutCredentialsInput
}

input AuthenticationProviderUpdateWithoutCodepasswordInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutEmailsInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPasswordInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithoutPhonesInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  emails: EmailUpdateManyWithoutAuthenticationProviderNestedInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderNestedInput
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutEmailsInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  data: AuthenticationProviderUpdateWithoutEmailsInput!
}

input AuthenticationProviderUpdateWithWhereUniqueWithoutPhonesInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  data: AuthenticationProviderUpdateWithoutPhonesInput!
}

input AuthenticationProviderUpsertWithoutCodepasswordInput
  @join__type(graph: PROFILING) {
  update: AuthenticationProviderUpdateWithoutCodepasswordInput!
  create: AuthenticationProviderCreateWithoutCodepasswordInput!
}

input AuthenticationProviderUpsertWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  update: AuthenticationProviderUpdateWithoutCredentialsInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderUpsertWithoutPasswordInput
  @join__type(graph: PROFILING) {
  update: AuthenticationProviderUpdateWithoutPasswordInput!
  create: AuthenticationProviderCreateWithoutPasswordInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutEmailsInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  update: AuthenticationProviderUpdateWithoutEmailsInput!
  create: AuthenticationProviderCreateWithoutEmailsInput!
}

input AuthenticationProviderUpsertWithWhereUniqueWithoutPhonesInput
  @join__type(graph: PROFILING) {
  where: AuthenticationProviderWhereUniqueInput!
  update: AuthenticationProviderUpdateWithoutPhonesInput!
  create: AuthenticationProviderCreateWithoutPhonesInput!
}

input AuthenticationProviderWhereInput @join__type(graph: PROFILING) {
  AND: [AuthenticationProviderWhereInput!]
  OR: [AuthenticationProviderWhereInput!]
  NOT: [AuthenticationProviderWhereInput!]
  id: StringFilter
  Credentials: CredentialsWhereInput
  phones: PhoneListRelationFilter
  emails: EmailListRelationFilter
  Password: PasswordWhereInput
  codepassword: CodeWhereInput
}

input AuthenticationProviderWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input Authenticators @join__type(graph: PROFILING) {
  username: String
  EmailInput: EmailInput
  PhoneInput: PhoneInput
}

union AuthorizedProfilesResponseUnion @join__type(graph: PROFILING) =
    ProfilesResponse
  | ErrorProfiling

input AuthorizedProfilesWhereInput @join__type(graph: PROFILING) {
  profiles: CustomProfileWhereInput!
}

input BoolFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: Boolean
}

input BoolFilter @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

input BoolWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input ChatroomCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input ChatroomCreateInput @join__type(graph: PROFILING) {
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateManyInput @join__type(graph: PROFILING) {
  id: String
}

input ChatroomCreateNestedManyWithoutProfilesInput
  @join__type(graph: PROFILING) {
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  connect: [ChatroomWhereUniqueInput!]
}

input ChatroomCreateNestedOneWithoutMessagesInput
  @join__type(graph: PROFILING) {
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  connect: ChatroomWhereUniqueInput
}

input ChatroomCreateOrConnectWithoutMessagesInput
  @join__type(graph: PROFILING) {
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomCreateOrConnectWithoutProfilesInput
  @join__type(graph: PROFILING) {
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomCreateWithoutMessagesInput @join__type(graph: PROFILING) {
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateWithoutProfilesInput @join__type(graph: PROFILING) {
  id: String
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomListRelationFilter @join__type(graph: PROFILING) {
  every: ChatroomWhereInput
  some: ChatroomWhereInput
  none: ChatroomWhereInput
}

input ChatroomMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input ChatroomMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input ChatroomOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input ChatroomOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  _count: ChatroomCountOrderByAggregateInput
  _max: ChatroomMaxOrderByAggregateInput
  _min: ChatroomMinOrderByAggregateInput
}

input ChatroomOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profiles: ProfileOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
}

input ChatroomRelationFilter @join__type(graph: PROFILING) {
  is: ChatroomWhereInput
  isNot: ChatroomWhereInput
}

enum ChatroomScalarFieldEnum @join__type(graph: PROFILING) {
  id
}

input ChatroomScalarWhereInput @join__type(graph: PROFILING) {
  AND: [ChatroomScalarWhereInput!]
  OR: [ChatroomScalarWhereInput!]
  NOT: [ChatroomScalarWhereInput!]
  id: StringFilter
}

input ChatroomScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [ChatroomScalarWhereWithAggregatesInput!]
  OR: [ChatroomScalarWhereWithAggregatesInput!]
  NOT: [ChatroomScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
}

input ChatroomUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
}

input ChatroomUpdateManyWithoutProfilesNestedInput
  @join__type(graph: PROFILING) {
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: [ChatroomCreateOrConnectWithoutProfilesInput!]
  upsert: [ChatroomUpsertWithWhereUniqueWithoutProfilesInput!]
  set: [ChatroomWhereUniqueInput!]
  disconnect: [ChatroomWhereUniqueInput!]
  delete: [ChatroomWhereUniqueInput!]
  connect: [ChatroomWhereUniqueInput!]
  update: [ChatroomUpdateWithWhereUniqueWithoutProfilesInput!]
  updateMany: [ChatroomUpdateManyWithWhereWithoutProfilesInput!]
  deleteMany: [ChatroomScalarWhereInput!]
}

input ChatroomUpdateManyWithWhereWithoutProfilesInput
  @join__type(graph: PROFILING) {
  where: ChatroomScalarWhereInput!
  data: ChatroomUpdateManyMutationInput!
}

input ChatroomUpdateOneWithoutMessagesNestedInput
  @join__type(graph: PROFILING) {
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  upsert: ChatroomUpsertWithoutMessagesInput
  disconnect: Boolean
  delete: Boolean
  connect: ChatroomWhereUniqueInput
  update: ChatroomUpdateWithoutMessagesInput
}

input ChatroomUpdateWithoutMessagesInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithoutProfilesInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatroomNestedInput
}

input ChatroomUpdateWithWhereUniqueWithoutProfilesInput
  @join__type(graph: PROFILING) {
  where: ChatroomWhereUniqueInput!
  data: ChatroomUpdateWithoutProfilesInput!
}

input ChatroomUpsertWithoutMessagesInput @join__type(graph: PROFILING) {
  update: ChatroomUpdateWithoutMessagesInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomUpsertWithWhereUniqueWithoutProfilesInput
  @join__type(graph: PROFILING) {
  where: ChatroomWhereUniqueInput!
  update: ChatroomUpdateWithoutProfilesInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomWhereInput @join__type(graph: PROFILING) {
  AND: [ChatroomWhereInput!]
  OR: [ChatroomWhereInput!]
  NOT: [ChatroomWhereInput!]
  id: StringFilter
  profiles: ProfileListRelationFilter
  messages: MessageListRelationFilter
}

input ChatroomWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

type CityResponseObject @join__type(graph: PROFILING) {
  name: String!
  stateCode: String!
  countryCode: String!
  latitude: String
  longitude: String
}

type ClientDeviceManager @join__type(graph: MANAGING) {
  id: String!
  Device: Device
  DeviceProfile: ClientDeviceProfile
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientDeviceProfile @join__type(graph: MANAGING) {
  id: ID!
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  DeviceManager: DeviceManager!
  accesstoken: String
  RefreshToken: RefreshToken
  deviceManagerId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  refreshtoken: String!
  Profile: Profile!
}

type Code @join__type(graph: PROFILING) {
  id: ID!
  code: String!
}

input CodeCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeCreateInput @join__type(graph: PROFILING) {
  id: String
  code: String!
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCodepasswordInput
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeCreateManyInput @join__type(graph: PROFILING) {
  id: String
  code: String!
  authenitcationProviderId: String
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  connect: CodeWhereUniqueInput
}

input CodeCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: CodeWhereUniqueInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: String
  code: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeDataInput @join__type(graph: PROFILING) {
  """
  Length is the total numbers that you want the code to be.
  """
  length: Int
}

input CodeMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  code: SortOrder
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: CodeCountOrderByAggregateInput
  _max: CodeMaxOrderByAggregateInput
  _min: CodeMinOrderByAggregateInput
}

input CodeOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  code: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CodeRelationFilter @join__type(graph: PROFILING) {
  is: CodeWhereInput
  isNot: CodeWhereInput
}

union CodeResponse @join__type(graph: PROFILING) = Code | ErrorProfiling

enum CodeScalarFieldEnum @join__type(graph: PROFILING) {
  id
  code
  authenitcationProviderId
  canUseAsRecovery
  createdAt
  updatedAt
}

input CodeScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [CodeScalarWhereWithAggregatesInput!]
  OR: [CodeScalarWhereWithAggregatesInput!]
  NOT: [CodeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  code: StringWithAggregatesFilter
  authenitcationProviderId: StringNullableWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CodeUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCodepasswordNestedInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING) {
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  upsert: CodeUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: CodeWhereUniqueInput
  update: CodeUpdateWithoutAuthenticationProviderInput
}

input CodeUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  update: CodeUpdateWithoutAuthenticationProviderInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeWhereInput @join__type(graph: PROFILING) {
  AND: [CodeWhereInput!]
  OR: [CodeWhereInput!]
  NOT: [CodeWhereInput!]
  id: StringFilter
  code: StringFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenitcationProviderId: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CodeWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  authenitcationProviderId: String
}

input ContactInput @join__type(graph: PROFILING) {
  type: String
  value: String!
}

type Coords @join__type(graph: PROFILING) {
  latitude: Float
  longitude: Float
}

type CountryResponseObject @join__type(graph: PROFILING) {
  name: String!
  phonecode: String!
  isoCode: String!
  flag: String!
  currency: String!
  latitude: String!
  longitude: String!
}

input CreatePersonalDataInput @join__type(graph: PROFILING) {
  PrivacyPolicyId: ID
  emojimood: ID
  ServicesId: ID
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  password: String!
  username: String!
  fullname: String
  address: String!
  birthday: DateTime!
  photos: PhotoCreateManyProfileInputEnvelope
}

input CreateVenueDataInput @join__type(graph: PROFILING) {
  PrivacyPolicyId: ID
  ServicesId: ID
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  password: String!
  established: DateTime!
  venuename: String!
  venuelocalname: String!
  venueusername: String!
  address: String!
  ownername: String!
  contacts: [ContactInput!]!
  capacity: String!
  venuetypes: [String!]
  description: String
  birthday: DateTime
  photos: PhotoCreateManyProfileInputEnvelope
}

type Credentials @join__type(graph: PROFILING) {
  id: ID!
  LegalAgreement(
    where: LegalAgreementWhereInput
    orderBy: [LegalAgreementOrderByWithRelationInput!]
    cursor: LegalAgreementWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LegalAgreementScalarFieldEnum!]
  ): [LegalAgreement!]!
  AuthenticationProvider: AuthenticationProvider
  authenticationProviderId: String
  Profile: Profile!
  profileId: String!
  createdtAt: DateTime!
  updatedAt: DateTime!
}

input CredentialsCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsCreateInput @join__type(graph: PROFILING) {
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsCreateManyInput @join__type(graph: PROFILING) {
  id: String
  authenticationProviderId: String
  profileId: String!
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutAuthenticationProviderInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateNestedOneWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutLegalAgreementInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutAuthenticationProviderInput!
}

input CredentialsCreateOrConnectWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutLegalAgreementInput!
}

input CredentialsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsCreateWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  id: String
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  Profile: ProfileCreateNestedOneWithoutCredentialsInput!
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  createdtAt: DateTime
  updatedAt: DateTime
}

input CredentialsMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  authenticationProviderId: SortOrder
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
  _count: CredentialsCountOrderByAggregateInput
  _max: CredentialsMaxOrderByAggregateInput
  _min: CredentialsMinOrderByAggregateInput
}

input CredentialsOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenticationProviderId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsRelationFilter @join__type(graph: PROFILING) {
  is: CredentialsWhereInput
  isNot: CredentialsWhereInput
}

enum CredentialsScalarFieldEnum @join__type(graph: PROFILING) {
  id
  authenticationProviderId
  profileId
  createdtAt
  updatedAt
}

input CredentialsScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [CredentialsScalarWhereWithAggregatesInput!]
  OR: [CredentialsScalarWhereWithAggregatesInput!]
  NOT: [CredentialsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  authenticationProviderId: StringNullableWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdtAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CredentialsUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutAuthenticationProviderInput
  connectOrCreate: CredentialsCreateOrConnectWithoutAuthenticationProviderInput
  upsert: CredentialsUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutAuthenticationProviderInput
}

input CredentialsUpdateOneWithoutLegalAgreementNestedInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutLegalAgreementInput
  connectOrCreate: CredentialsCreateOrConnectWithoutLegalAgreementInput
  upsert: CredentialsUpsertWithoutLegalAgreementInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutLegalAgreementInput
}

input CredentialsUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  upsert: CredentialsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutProfileInput
}

input CredentialsUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  Profile: ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsNestedInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsNestedInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CredentialsUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  update: CredentialsUpdateWithoutAuthenticationProviderInput!
  create: CredentialsCreateWithoutAuthenticationProviderInput!
}

input CredentialsUpsertWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  update: CredentialsUpdateWithoutLegalAgreementInput!
  create: CredentialsCreateWithoutLegalAgreementInput!
}

input CredentialsUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: CredentialsUpdateWithoutProfileInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsWhereInput @join__type(graph: PROFILING) {
  AND: [CredentialsWhereInput!]
  OR: [CredentialsWhereInput!]
  NOT: [CredentialsWhereInput!]
  id: StringFilter
  LegalAgreement: LegalAgreementListRelationFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenticationProviderId: StringNullableFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  createdtAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CredentialsWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  authenticationProviderId: String
  profileId: String
}

input CustomCodeWhereInput @join__type(graph: PROFILING) {
  Authenticators: Authenticators
}

input CustomProfileWhereInput @join__type(graph: PROFILING) {
  email: String
  username: String
  Phone: PhoneInput
}

scalar DateTime @join__type(graph: MANAGING) @join__type(graph: PROFILING)

input DateTimeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: DateTime
}

input DateTimeFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input DateTimeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input DateTimeWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

type DetailInformation @join__type(graph: PROFILING) {
  id: ID!
  description: String
  capacity: Int
  established: DateTime
  Tags(
    where: TagWhereInput
    orderBy: [TagOrderByWithRelationInput!]
    cursor: TagWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TagScalarFieldEnum!]
  ): [Tag!]!
  Profile: Profile!
  profileId: String!
}

input DetailInformationAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  capacity: SortOrder
}

input DetailInformationCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationCreateInput @join__type(graph: PROFILING) {
  id: String
  description: String
  capacity: Int
  established: DateTime
  Tags: TagCreateNestedManyWithoutDetailInformationInput
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
}

input DetailInformationCreateManyInput @join__type(graph: PROFILING) {
  id: String
  description: String
  capacity: Int
  established: DateTime
  profileId: String!
}

input DetailInformationCreateNestedManyWithoutTagsInput
  @join__type(graph: PROFILING) {
  create: DetailInformationCreateWithoutTagsInput
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  connect: [DetailInformationWhereUniqueInput!]
}

input DetailInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  connect: DetailInformationWhereUniqueInput
}

input DetailInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: DetailInformationWhereUniqueInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationCreateOrConnectWithoutTagsInput
  @join__type(graph: PROFILING) {
  where: DetailInformationWhereUniqueInput!
  create: DetailInformationCreateWithoutTagsInput!
}

input DetailInformationCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  description: String
  capacity: Int
  established: DateTime
  Tags: TagCreateNestedManyWithoutDetailInformationInput
}

input DetailInformationCreateWithoutTagsInput @join__type(graph: PROFILING) {
  id: String
  description: String
  capacity: Int
  established: DateTime
  Profile: ProfileCreateNestedOneWithoutDetailInformationInput!
}

input DetailInformationListRelationFilter @join__type(graph: PROFILING) {
  every: DetailInformationWhereInput
  some: DetailInformationWhereInput
  none: DetailInformationWhereInput
}

input DetailInformationMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
}

input DetailInformationOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input DetailInformationOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  profileId: SortOrder
  _count: DetailInformationCountOrderByAggregateInput
  _avg: DetailInformationAvgOrderByAggregateInput
  _max: DetailInformationMaxOrderByAggregateInput
  _min: DetailInformationMinOrderByAggregateInput
  _sum: DetailInformationSumOrderByAggregateInput
}

input DetailInformationOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  Tags: TagOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input DetailInformationRelationFilter @join__type(graph: PROFILING) {
  is: DetailInformationWhereInput
  isNot: DetailInformationWhereInput
}

enum DetailInformationScalarFieldEnum @join__type(graph: PROFILING) {
  id
  description
  capacity
  established
  profileId
}

input DetailInformationScalarWhereInput @join__type(graph: PROFILING) {
  AND: [DetailInformationScalarWhereInput!]
  OR: [DetailInformationScalarWhereInput!]
  NOT: [DetailInformationScalarWhereInput!]
  id: StringFilter
  description: StringNullableFilter
  capacity: IntNullableFilter
  established: DateTimeNullableFilter
  profileId: StringFilter
}

input DetailInformationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [DetailInformationScalarWhereWithAggregatesInput!]
  OR: [DetailInformationScalarWhereWithAggregatesInput!]
  NOT: [DetailInformationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  capacity: IntNullableWithAggregatesFilter
  established: DateTimeNullableWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

input DetailInformationSumOrderByAggregateInput @join__type(graph: PROFILING) {
  capacity: SortOrder
}

input DetailInformationUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
}

input DetailInformationUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
}

input DetailInformationUpdateManyWithoutTagsNestedInput
  @join__type(graph: PROFILING) {
  create: DetailInformationCreateWithoutTagsInput
  connectOrCreate: [DetailInformationCreateOrConnectWithoutTagsInput!]
  upsert: [DetailInformationUpsertWithWhereUniqueWithoutTagsInput!]
  set: [DetailInformationWhereUniqueInput!]
  disconnect: [DetailInformationWhereUniqueInput!]
  delete: [DetailInformationWhereUniqueInput!]
  connect: [DetailInformationWhereUniqueInput!]
  update: [DetailInformationUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [DetailInformationUpdateManyWithWhereWithoutTagsInput!]
  deleteMany: [DetailInformationScalarWhereInput!]
}

input DetailInformationUpdateManyWithWhereWithoutTagsInput
  @join__type(graph: PROFILING) {
  where: DetailInformationScalarWhereInput!
  data: DetailInformationUpdateManyMutationInput!
}

input DetailInformationUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  upsert: DetailInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: DetailInformationWhereUniqueInput
  update: DetailInformationUpdateWithoutProfileInput
}

input DetailInformationUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithoutTagsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
}

input DetailInformationUpdateWithWhereUniqueWithoutTagsInput
  @join__type(graph: PROFILING) {
  where: DetailInformationWhereUniqueInput!
  data: DetailInformationUpdateWithoutTagsInput!
}

input DetailInformationUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: DetailInformationUpdateWithoutProfileInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationUpsertWithWhereUniqueWithoutTagsInput
  @join__type(graph: PROFILING) {
  where: DetailInformationWhereUniqueInput!
  update: DetailInformationUpdateWithoutTagsInput!
  create: DetailInformationCreateWithoutTagsInput!
}

input DetailInformationWhereInput @join__type(graph: PROFILING) {
  AND: [DetailInformationWhereInput!]
  OR: [DetailInformationWhereInput!]
  NOT: [DetailInformationWhereInput!]
  id: StringFilter
  description: StringNullableFilter
  capacity: IntNullableFilter
  established: DateTimeNullableFilter
  Tags: TagListRelationFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
}

input DetailInformationWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
}

type Device @join__type(graph: MANAGING) {
  id: ID!
  deviceType: String
  DeviceManager: DeviceManager!
  deviceManagerId: String!
  PushToken: PushToken
  pushTokenId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCountOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceCreateInput @join__type(graph: MANAGING) {
  id: String
  deviceType: String
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCreateManyInput @join__type(graph: MANAGING) {
  id: String
  deviceType: String
  deviceManagerId: String!
  pushTokenId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCreateNestedOneWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  create: DeviceCreateWithoutDeviceManagerInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  connect: DeviceWhereUniqueInput
}

input DeviceCreateNestedOneWithoutPushTokenInput @join__type(graph: MANAGING) {
  create: DeviceCreateWithoutPushTokenInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  connect: DeviceWhereUniqueInput
}

input DeviceCreateOrConnectWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  where: DeviceWhereUniqueInput!
  create: DeviceCreateWithoutDeviceManagerInput!
}

input DeviceCreateOrConnectWithoutPushTokenInput @join__type(graph: MANAGING) {
  where: DeviceWhereUniqueInput!
  create: DeviceCreateWithoutPushTokenInput!
}

input DeviceCreateWithoutDeviceManagerInput @join__type(graph: MANAGING) {
  id: String
  deviceType: String
  PushToken: PushTokenCreateNestedOneWithoutDeviceInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceCreateWithoutPushTokenInput @join__type(graph: MANAGING) {
  id: String
  deviceType: String
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
  createdAt: DateTime
  updatedAt: DateTime
}

type DeviceManager @join__type(graph: MANAGING) {
  id: ID!
  Device: Device
  DeviceProfile(
    where: DeviceProfileWhereInput
    orderBy: [DeviceProfileOrderByWithRelationInput!]
    cursor: DeviceProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DeviceProfileScalarFieldEnum!]
  ): [ClientDeviceProfile!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DeviceManagerCountOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerCreateInput @join__type(graph: MANAGING) {
  id: String
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceManagerCreateManyInput @join__type(graph: MANAGING) {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceManagerCreateNestedOneWithoutDeviceInput
  @join__type(graph: MANAGING) {
  create: DeviceManagerCreateWithoutDeviceInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  connect: DeviceManagerWhereUniqueInput
}

input DeviceManagerCreateNestedOneWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  create: DeviceManagerCreateWithoutDeviceProfileInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  connect: DeviceManagerWhereUniqueInput
}

input DeviceManagerCreateOrConnectWithoutDeviceInput
  @join__type(graph: MANAGING) {
  where: DeviceManagerWhereUniqueInput!
  create: DeviceManagerCreateWithoutDeviceInput!
}

input DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  where: DeviceManagerWhereUniqueInput!
  create: DeviceManagerCreateWithoutDeviceProfileInput!
}

input DeviceManagerCreateWithoutDeviceInput @join__type(graph: MANAGING) {
  id: String
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceManagerCreateWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  id: String
  Device: DeviceCreateNestedOneWithoutDeviceManagerInput
  createdAt: DateTime
  updatedAt: DateTime
}

type DeviceManagerDeviceProfiles @join__type(graph: MANAGING) {
  DeviceProfiles: [ClientDeviceProfile!]!
}

union DeviceManagerDeviceProfilesResponseUnion @join__type(graph: MANAGING) =
    DeviceManagerDeviceProfiles
  | ErrorManaging

input DeviceManagerMaxOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerMinOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerOrderByWithAggregationInput @join__type(graph: MANAGING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceManagerCountOrderByAggregateInput
  _max: DeviceManagerMaxOrderByAggregateInput
  _min: DeviceManagerMinOrderByAggregateInput
}

input DeviceManagerOrderByWithRelationInput @join__type(graph: MANAGING) {
  id: SortOrder
  Device: DeviceOrderByWithRelationInput
  DeviceProfile: DeviceProfileOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceManagerRelationFilter @join__type(graph: MANAGING) {
  is: DeviceManagerWhereInput
  isNot: DeviceManagerWhereInput
}

enum DeviceManagerScalarFieldEnum @join__type(graph: MANAGING) {
  id
  createdAt
  updatedAt
}

input DeviceManagerScalarWhereWithAggregatesInput @join__type(graph: MANAGING) {
  AND: [DeviceManagerScalarWhereWithAggregatesInput!]
  OR: [DeviceManagerScalarWhereWithAggregatesInput!]
  NOT: [DeviceManagerScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceManagerUpdateInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateManyMutationInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  @join__type(graph: MANAGING) {
  create: DeviceManagerCreateWithoutDeviceInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  upsert: DeviceManagerUpsertWithoutDeviceInput
  connect: DeviceManagerWhereUniqueInput
  update: DeviceManagerUpdateWithoutDeviceInput
}

input DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  @join__type(graph: MANAGING) {
  create: DeviceManagerCreateWithoutDeviceProfileInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceProfileInput
  upsert: DeviceManagerUpsertWithoutDeviceProfileInput
  connect: DeviceManagerWhereUniqueInput
  update: DeviceManagerUpdateWithoutDeviceProfileInput
}

input DeviceManagerUpdateWithoutDeviceInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpdateWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutDeviceManagerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceManagerUpsertWithoutDeviceInput @join__type(graph: MANAGING) {
  update: DeviceManagerUpdateWithoutDeviceInput!
  create: DeviceManagerCreateWithoutDeviceInput!
}

input DeviceManagerUpsertWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  update: DeviceManagerUpdateWithoutDeviceProfileInput!
  create: DeviceManagerCreateWithoutDeviceProfileInput!
}

input DeviceManagerWhereInput @join__type(graph: MANAGING) {
  AND: [DeviceManagerWhereInput!]
  OR: [DeviceManagerWhereInput!]
  NOT: [DeviceManagerWhereInput!]
  id: StringFilter
  Device: DeviceWhereInput
  DeviceProfile: DeviceProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DeviceManagerWhereUniqueInput @join__type(graph: MANAGING) {
  id: String
}

input DeviceMaxOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceMinOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceOrderByWithAggregationInput @join__type(graph: MANAGING) {
  id: SortOrder
  deviceType: SortOrder
  deviceManagerId: SortOrder
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceCountOrderByAggregateInput
  _max: DeviceMaxOrderByAggregateInput
  _min: DeviceMinOrderByAggregateInput
}

input DeviceOrderByWithRelationInput @join__type(graph: MANAGING) {
  id: SortOrder
  deviceType: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  deviceManagerId: SortOrder
  PushToken: PushTokenOrderByWithRelationInput
  pushTokenId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileCountOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileCreateInput @join__type(graph: MANAGING) {
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
  accesstoken: String
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateManyDeviceManagerInput @join__type(graph: MANAGING) {
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateManyDeviceManagerInputEnvelope
  @join__type(graph: MANAGING) {
  data: [DeviceProfileCreateManyDeviceManagerInput!]!
  skipDuplicates: Boolean
}

input DeviceProfileCreateManyInput @join__type(graph: MANAGING) {
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  deviceManagerId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  create: DeviceProfileCreateWithoutDeviceManagerInput
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  connect: [DeviceProfileWhereUniqueInput!]
}

input DeviceProfileCreateNestedOneWithoutRefreshTokenInput
  @join__type(graph: MANAGING) {
  create: DeviceProfileCreateWithoutRefreshTokenInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  connect: DeviceProfileWhereUniqueInput
}

input DeviceProfileCreateOrConnectWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  where: DeviceProfileWhereUniqueInput!
  create: DeviceProfileCreateWithoutDeviceManagerInput!
}

input DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  @join__type(graph: MANAGING) {
  where: DeviceProfileWhereUniqueInput!
  create: DeviceProfileCreateWithoutRefreshTokenInput!
}

input DeviceProfileCreateWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileCreateWithoutRefreshTokenInput @join__type(graph: MANAGING) {
  id: String
  AppType: AppType
  ProfileType: ProfileType
  profileId: String
  isActive: Boolean!
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceProfileInput!
  accesstoken: String
  createdAt: DateTime
  updatedAt: DateTime
}

input DeviceProfileListRelationFilter @join__type(graph: MANAGING) {
  every: DeviceProfileWhereInput
  some: DeviceProfileWhereInput
  none: DeviceProfileWhereInput
}

input DeviceProfileMaxOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileMinOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileOrderByRelationAggregateInput @join__type(graph: MANAGING) {
  _count: SortOrder
}

input DeviceProfileOrderByWithAggregationInput @join__type(graph: MANAGING) {
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  accesstoken: SortOrder
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DeviceProfileCountOrderByAggregateInput
  _max: DeviceProfileMaxOrderByAggregateInput
  _min: DeviceProfileMinOrderByAggregateInput
}

input DeviceProfileOrderByWithRelationInput @join__type(graph: MANAGING) {
  id: SortOrder
  AppType: SortOrder
  ProfileType: SortOrder
  profileId: SortOrder
  isActive: SortOrder
  DeviceManager: DeviceManagerOrderByWithRelationInput
  accesstoken: SortOrder
  RefreshToken: RefreshTokenOrderByWithRelationInput
  deviceManagerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DeviceProfileRelationFilter @join__type(graph: MANAGING) {
  is: DeviceProfileWhereInput
  isNot: DeviceProfileWhereInput
}

enum DeviceProfileScalarFieldEnum @join__type(graph: MANAGING) {
  id
  AppType
  ProfileType
  profileId
  isActive
  accesstoken
  deviceManagerId
  createdAt
  updatedAt
}

input DeviceProfileScalarWhereInput @join__type(graph: MANAGING) {
  AND: [DeviceProfileScalarWhereInput!]
  OR: [DeviceProfileScalarWhereInput!]
  NOT: [DeviceProfileScalarWhereInput!]
  id: StringFilter
  AppType: EnumAppTypeNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  profileId: StringNullableFilter
  isActive: BoolFilter
  accesstoken: StringNullableFilter
  deviceManagerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DeviceProfileScalarWhereWithAggregatesInput @join__type(graph: MANAGING) {
  AND: [DeviceProfileScalarWhereWithAggregatesInput!]
  OR: [DeviceProfileScalarWhereWithAggregatesInput!]
  NOT: [DeviceProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  AppType: EnumAppTypeNullableWithAggregatesFilter
  ProfileType: EnumProfileTypeNullableWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  accesstoken: StringNullableWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DeviceProfileUpdateInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateManyMutationInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateManyWithoutDeviceManagerNestedInput
  @join__type(graph: MANAGING) {
  create: DeviceProfileCreateWithoutDeviceManagerInput
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  upsert: [DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput!]
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  set: [DeviceProfileWhereUniqueInput!]
  disconnect: [DeviceProfileWhereUniqueInput!]
  delete: [DeviceProfileWhereUniqueInput!]
  connect: [DeviceProfileWhereUniqueInput!]
  update: [DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput!]
  updateMany: [DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput!]
  deleteMany: [DeviceProfileScalarWhereInput!]
}

input DeviceProfileUpdateManyWithWhereWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  where: DeviceProfileScalarWhereInput!
  data: DeviceProfileUpdateManyMutationInput!
}

input DeviceProfileUpdateOneWithoutRefreshTokenNestedInput
  @join__type(graph: MANAGING) {
  create: DeviceProfileCreateWithoutRefreshTokenInput
  connectOrCreate: DeviceProfileCreateOrConnectWithoutRefreshTokenInput
  upsert: DeviceProfileUpsertWithoutRefreshTokenInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceProfileWhereUniqueInput
  update: DeviceProfileUpdateWithoutRefreshTokenInput
}

input DeviceProfileUpdateWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  RefreshToken: RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateWithoutRefreshTokenInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  AppType: NullableEnumAppTypeFieldUpdateOperationsInput
  ProfileType: NullableEnumProfileTypeFieldUpdateOperationsInput
  profileId: NullableStringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceProfileNestedInput
  accesstoken: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DeviceProfileUpdateWithWhereUniqueWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  where: DeviceProfileWhereUniqueInput!
  data: DeviceProfileUpdateWithoutDeviceManagerInput!
}

input DeviceProfileUpsertWithoutRefreshTokenInput @join__type(graph: MANAGING) {
  update: DeviceProfileUpdateWithoutRefreshTokenInput!
  create: DeviceProfileCreateWithoutRefreshTokenInput!
}

input DeviceProfileUpsertWithWhereUniqueWithoutDeviceManagerInput
  @join__type(graph: MANAGING) {
  where: DeviceProfileWhereUniqueInput!
  update: DeviceProfileUpdateWithoutDeviceManagerInput!
  create: DeviceProfileCreateWithoutDeviceManagerInput!
}

input DeviceProfileWhereInput @join__type(graph: MANAGING) {
  AND: [DeviceProfileWhereInput!]
  OR: [DeviceProfileWhereInput!]
  NOT: [DeviceProfileWhereInput!]
  id: StringFilter
  AppType: EnumAppTypeNullableFilter
  ProfileType: EnumProfileTypeNullableFilter
  profileId: StringNullableFilter
  isActive: BoolFilter
  DeviceManager: DeviceManagerWhereInput
  accesstoken: StringNullableFilter
  RefreshToken: RefreshTokenWhereInput
  deviceManagerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DeviceProfileWhereUniqueInput @join__type(graph: MANAGING) {
  id: String
}

input DeviceRelationFilter @join__type(graph: MANAGING) {
  is: DeviceWhereInput
  isNot: DeviceWhereInput
}

enum DeviceScalarFieldEnum @join__type(graph: MANAGING) {
  id
  deviceType
  deviceManagerId
  pushTokenId
  createdAt
  updatedAt
}

input DeviceScalarWhereWithAggregatesInput @join__type(graph: MANAGING) {
  AND: [DeviceScalarWhereWithAggregatesInput!]
  OR: [DeviceScalarWhereWithAggregatesInput!]
  NOT: [DeviceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  deviceType: StringNullableWithAggregatesFilter
  deviceManagerId: StringWithAggregatesFilter
  pushTokenId: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input DeviceUpdateInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateManyMutationInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateOneWithoutDeviceManagerNestedInput
  @join__type(graph: MANAGING) {
  create: DeviceCreateWithoutDeviceManagerInput
  connectOrCreate: DeviceCreateOrConnectWithoutDeviceManagerInput
  upsert: DeviceUpsertWithoutDeviceManagerInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceWhereUniqueInput
  update: DeviceUpdateWithoutDeviceManagerInput
}

input DeviceUpdateOneWithoutPushTokenNestedInput @join__type(graph: MANAGING) {
  create: DeviceCreateWithoutPushTokenInput
  connectOrCreate: DeviceCreateOrConnectWithoutPushTokenInput
  upsert: DeviceUpsertWithoutPushTokenInput
  disconnect: Boolean
  delete: Boolean
  connect: DeviceWhereUniqueInput
  update: DeviceUpdateWithoutPushTokenInput
}

input DeviceUpdateWithoutDeviceManagerInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  PushToken: PushTokenUpdateOneWithoutDeviceNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpdateWithoutPushTokenInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  deviceType: NullableStringFieldUpdateOperationsInput
  DeviceManager: DeviceManagerUpdateOneRequiredWithoutDeviceNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DeviceUpsertWithoutDeviceManagerInput @join__type(graph: MANAGING) {
  update: DeviceUpdateWithoutDeviceManagerInput!
  create: DeviceCreateWithoutDeviceManagerInput!
}

input DeviceUpsertWithoutPushTokenInput @join__type(graph: MANAGING) {
  update: DeviceUpdateWithoutPushTokenInput!
  create: DeviceCreateWithoutPushTokenInput!
}

input DeviceWhereInput @join__type(graph: MANAGING) {
  AND: [DeviceWhereInput!]
  OR: [DeviceWhereInput!]
  NOT: [DeviceWhereInput!]
  id: StringFilter
  deviceType: StringNullableFilter
  DeviceManager: DeviceManagerWhereInput
  deviceManagerId: StringFilter
  PushToken: PushTokenWhereInput
  pushTokenId: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input DeviceWhereUniqueInput @join__type(graph: MANAGING) {
  id: String
  deviceManagerId: String
  pushTokenId: String
}

type Document @join__type(graph: PROFILING) {
  id: ID!
  LegalAgreement: [LegalAgreement!]!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

input DocumentAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input DocumentCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentCreateInput @join__type(graph: PROFILING) {
  content: String!
  TypeOfDocument: TypeOfDocument!
  LegalAgreement: LegalAgreementCreateNestedManyWithoutDocumentInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentCreateNestedOneWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOrConnectWithoutLegalAgreementInput
  @join__type(graph: PROFILING) {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentCreateWithoutLegalAgreementInput @join__type(graph: PROFILING) {
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DocumentCountOrderByAggregateInput
  _avg: DocumentAvgOrderByAggregateInput
  _max: DocumentMaxOrderByAggregateInput
  _min: DocumentMinOrderByAggregateInput
  _sum: DocumentSumOrderByAggregateInput
}

input DocumentOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentRelationFilter @join__type(graph: PROFILING) {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

enum DocumentScalarFieldEnum @join__type(graph: PROFILING) {
  id
  content
  TypeOfDocument
  createdAt
  updatedAt
}

input DocumentScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [DocumentScalarWhereWithAggregatesInput!]
  OR: [DocumentScalarWhereWithAggregatesInput!]
  NOT: [DocumentScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  content: StringWithAggregatesFilter
  TypeOfDocument: EnumTypeOfDocumentWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input DocumentSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input DocumentUpdateInput @join__type(graph: PROFILING) {
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutDocumentNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpdateManyMutationInput @join__type(graph: PROFILING) {
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  @join__type(graph: PROFILING) {
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  upsert: DocumentUpsertWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateWithoutLegalAgreementInput
}

input DocumentUpdateWithoutLegalAgreementInput @join__type(graph: PROFILING) {
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpsertWithoutLegalAgreementInput @join__type(graph: PROFILING) {
  update: DocumentUpdateWithoutLegalAgreementInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentWhereInput @join__type(graph: PROFILING) {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IntFilter
  content: StringFilter
  TypeOfDocument: EnumTypeOfDocumentFilter
  LegalAgreement: LegalAgreementListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DocumentWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Email @join__type(graph: PROFILING) {
  id: ID!
  email: String!
  AuthenticationProvider(
    where: AuthenticationProviderWhereInput
    orderBy: [AuthenticationProviderOrderByWithRelationInput!]
    cursor: AuthenticationProviderWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AuthenticationProviderScalarFieldEnum!]
  ): [AuthenticationProvider!]!
  canUseAsRecovery: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input EmailCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailCreateInput @join__type(graph: PROFILING) {
  email: String!
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutEmailsInput
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  create: EmailCreateWithoutAuthenticationProviderInput
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: EmailWhereUniqueInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailInput @join__type(graph: PROFILING) {
  email: String
}

input EmailListRelationFilter @join__type(graph: PROFILING) {
  every: EmailWhereInput
  some: EmailWhereInput
  none: EmailWhereInput
}

input EmailMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input EmailOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input EmailOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  email: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: EmailCountOrderByAggregateInput
  _avg: EmailAvgOrderByAggregateInput
  _max: EmailMaxOrderByAggregateInput
  _min: EmailMinOrderByAggregateInput
  _sum: EmailSumOrderByAggregateInput
}

input EmailOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  email: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum EmailScalarFieldEnum @join__type(graph: PROFILING) {
  id
  email
  canUseAsRecovery
  createdAt
  updatedAt
}

input EmailScalarWhereInput @join__type(graph: PROFILING) {
  AND: [EmailScalarWhereInput!]
  OR: [EmailScalarWhereInput!]
  NOT: [EmailScalarWhereInput!]
  id: IntFilter
  email: StringFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmailScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [EmailScalarWhereWithAggregatesInput!]
  OR: [EmailScalarWhereWithAggregatesInput!]
  NOT: [EmailScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  email: StringWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EmailSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input EmailUpdateInput @join__type(graph: PROFILING) {
  email: StringFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutEmailsNestedInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyMutationInput @join__type(graph: PROFILING) {
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING) {
  create: EmailCreateWithoutAuthenticationProviderInput
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  connect: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [EmailScalarWhereInput!]
}

input EmailUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: EmailScalarWhereInput!
  data: EmailUpdateManyMutationInput!
}

input EmailUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutAuthenticationProviderInput!
}

input EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutAuthenticationProviderInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailWhereInput @join__type(graph: PROFILING) {
  AND: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  id: IntFilter
  email: StringFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmailWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Emojimood @join__type(graph: PROFILING) {
  id: ID!
  emojiname: String
  emoji: String
  colors: [String!]!
}

input EmojimoodAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input EmojimoodCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodCreatecolorsInput @join__type(graph: PROFILING) {
  set: [String!]!
}

input EmojimoodCreateInput @join__type(graph: PROFILING) {
  colors: [String!]
  emojiname: String
  emoji: String
  Story: StoryCreateNestedManyWithoutEmojimoodInput
}

input EmojimoodCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  colors: [String!]
  emojiname: String
  emoji: String
}

input EmojimoodCreateNestedManyWithoutStoryInput @join__type(graph: PROFILING) {
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  connect: [EmojimoodWhereUniqueInput!]
}

input EmojimoodCreateOrConnectWithoutStoryInput @join__type(graph: PROFILING) {
  where: EmojimoodWhereUniqueInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodCreateWithoutStoryInput @join__type(graph: PROFILING) {
  colors: [String!]
  emojiname: String
  emoji: String
}

input EmojimoodListRelationFilter @join__type(graph: PROFILING) {
  every: EmojimoodWhereInput
  some: EmojimoodWhereInput
  none: EmojimoodWhereInput
}

input EmojimoodMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
}

input EmojimoodOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input EmojimoodOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
  _count: EmojimoodCountOrderByAggregateInput
  _avg: EmojimoodAvgOrderByAggregateInput
  _max: EmojimoodMaxOrderByAggregateInput
  _min: EmojimoodMinOrderByAggregateInput
  _sum: EmojimoodSumOrderByAggregateInput
}

input EmojimoodOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
  Story: StoryOrderByRelationAggregateInput
}

enum EmojimoodScalarFieldEnum @join__type(graph: PROFILING) {
  id
  colors
  emojiname
  emoji
}

input EmojimoodScalarWhereInput @join__type(graph: PROFILING) {
  AND: [EmojimoodScalarWhereInput!]
  OR: [EmojimoodScalarWhereInput!]
  NOT: [EmojimoodScalarWhereInput!]
  id: IntFilter
  colors: StringNullableListFilter
  emojiname: StringNullableFilter
  emoji: StringNullableFilter
}

input EmojimoodScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [EmojimoodScalarWhereWithAggregatesInput!]
  OR: [EmojimoodScalarWhereWithAggregatesInput!]
  NOT: [EmojimoodScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  colors: StringNullableListFilter
  emojiname: StringNullableWithAggregatesFilter
  emoji: StringNullableWithAggregatesFilter
}

input EmojimoodSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input EmojimoodUpdatecolorsInput @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input EmojimoodUpdateInput @join__type(graph: PROFILING) {
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  Story: StoryUpdateManyWithoutEmojimoodNestedInput
}

input EmojimoodUpdateManyMutationInput @join__type(graph: PROFILING) {
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateManyWithoutStoryNestedInput @join__type(graph: PROFILING) {
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: [EmojimoodCreateOrConnectWithoutStoryInput!]
  upsert: [EmojimoodUpsertWithWhereUniqueWithoutStoryInput!]
  set: [EmojimoodWhereUniqueInput!]
  disconnect: [EmojimoodWhereUniqueInput!]
  delete: [EmojimoodWhereUniqueInput!]
  connect: [EmojimoodWhereUniqueInput!]
  update: [EmojimoodUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [EmojimoodUpdateManyWithWhereWithoutStoryInput!]
  deleteMany: [EmojimoodScalarWhereInput!]
}

input EmojimoodUpdateManyWithWhereWithoutStoryInput
  @join__type(graph: PROFILING) {
  where: EmojimoodScalarWhereInput!
  data: EmojimoodUpdateManyMutationInput!
}

input EmojimoodUpdateWithoutStoryInput @join__type(graph: PROFILING) {
  colors: [String!]
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input EmojimoodUpdateWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING) {
  where: EmojimoodWhereUniqueInput!
  data: EmojimoodUpdateWithoutStoryInput!
}

input EmojimoodUpsertWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING) {
  where: EmojimoodWhereUniqueInput!
  update: EmojimoodUpdateWithoutStoryInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodWhereInput @join__type(graph: PROFILING) {
  AND: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  NOT: [EmojimoodWhereInput!]
  id: IntFilter
  colors: StringNullableListFilter
  emojiname: StringNullableFilter
  emoji: StringNullableFilter
  Story: StoryListRelationFilter
}

input EmojimoodWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

input EnumAppTypeNullableFilter @join__type(graph: MANAGING) {
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
}

input EnumAppTypeNullableWithAggregatesFilter @join__type(graph: MANAGING) {
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
  _count: NestedIntNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  _max: NestedEnumAppTypeNullableFilter
}

input EnumPhotoTypeNullableFilter @join__type(graph: PROFILING) {
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
}

input EnumPhotoTypeNullableWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
  _count: NestedIntNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
}

input EnumProfileTypeFieldUpdateOperationsInput @join__type(graph: PROFILING) {
  set: ProfileType
}

input EnumProfileTypeFilter @join__type(graph: PROFILING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input EnumProfileTypeNullableFilter @join__type(graph: MANAGING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input EnumProfileTypeNullableWithAggregatesFilter @join__type(graph: MANAGING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
}

input EnumProfileTypeWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntFilter
  _min: NestedEnumProfileTypeFilter
  _max: NestedEnumProfileTypeFilter
}

input EnumRelationshipStatusNullableListFilter @join__type(graph: PROFILING) {
  equals: [RelationshipStatus!]
  has: RelationshipStatus
  hasEvery: [RelationshipStatus!]
  hasSome: [RelationshipStatus!]
  isEmpty: Boolean
}

input EnumSecureDataTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING) {
  set: SecureDataType
}

input EnumSecureDataTypeFilter @join__type(graph: PROFILING) {
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
}

input EnumSecureDataTypeWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
  _count: NestedIntFilter
  _min: NestedEnumSecureDataTypeFilter
  _max: NestedEnumSecureDataTypeFilter
}

input EnumTagTypeFieldUpdateOperationsInput @join__type(graph: PROFILING) {
  set: TagType
}

input EnumTagTypeFilter @join__type(graph: PROFILING) {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: TagType
}

input EnumTagTypeWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: TagType
  _count: NestedIntFilter
  _min: NestedEnumTagTypeFilter
  _max: NestedEnumTagTypeFilter
}

input EnumTypeOfDocumentFieldUpdateOperationsInput
  @join__type(graph: PROFILING) {
  set: TypeOfDocument
}

input EnumTypeOfDocumentFilter @join__type(graph: PROFILING) {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
}

input EnumTypeOfDocumentWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
  _count: NestedIntFilter
  _min: NestedEnumTypeOfDocumentFilter
  _max: NestedEnumTypeOfDocumentFilter
}

"""
Long necks, cool patterns, taller than you.
"""
type ErrorManaging @join__type(graph: MANAGING) {
  errorCode: String!
  message: String!
}

"""
Long necks, cool patterns, taller than you.
"""
type ErrorProfiling @join__type(graph: PROFILING) {
  errorCode: String!
  message: String!
}

type ExploreResponse @join__type(graph: PROFILING) {
  people: [Personal!]!
  venues: [Venue!]!
  events: [Json!]
}

input FloatFieldUpdateOperationsInput @join__type(graph: PROFILING) {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FloatFilter @join__type(graph: PROFILING) {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type FriendRequest @join__type(graph: PROFILING) {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Notifications: [Notifications!]!
  NotificationStatus: NotificationStatus!
  notificationStatusId: String!
  senderProfileId: String!
  receiverProfileId: String!
  senderProfile: Profile!
  receiverProfile: Profile!
}

input FriendRequestCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestCreateInput @join__type(graph: PROFILING) {
  id: String
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
  senderProfileId: String!
  receiverProfileId: String!
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input FriendRequestCreateManyInput @join__type(graph: PROFILING) {
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  notificationStatusId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input FriendRequestCreateNestedManyWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  create: FriendRequestCreateWithoutNotificationsInput
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateNestedOneWithoutNotificationStatusInput
  @join__type(graph: PROFILING) {
  create: FriendRequestCreateWithoutNotificationStatusInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  connect: FriendRequestWhereUniqueInput
}

input FriendRequestCreateOrConnectWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  where: FriendRequestWhereUniqueInput!
  create: FriendRequestCreateWithoutNotificationsInput!
}

input FriendRequestCreateOrConnectWithoutNotificationStatusInput
  @join__type(graph: PROFILING) {
  where: FriendRequestWhereUniqueInput!
  create: FriendRequestCreateWithoutNotificationStatusInput!
}

input FriendRequestCreateWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  id: String
  senderProfileId: String!
  receiverProfileId: String!
  NotificationStatus: NotificationStatusCreateNestedOneWithoutFriendRequestInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input FriendRequestCreateWithoutNotificationStatusInput
  @join__type(graph: PROFILING) {
  id: String
  Notifications: NotificationsCreateNestedManyWithoutFriendRequestsInput
  senderProfileId: String!
  receiverProfileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input FriendRequestListRelationFilter @join__type(graph: PROFILING) {
  every: FriendRequestWhereInput
  some: FriendRequestWhereInput
  none: FriendRequestWhereInput
}

input FriendRequestMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input FriendRequestOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: FriendRequestCountOrderByAggregateInput
  _max: FriendRequestMaxOrderByAggregateInput
  _min: FriendRequestMinOrderByAggregateInput
}

input FriendRequestOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Notifications: NotificationsOrderByRelationAggregateInput
  senderProfileId: SortOrder
  receiverProfileId: SortOrder
  NotificationStatus: NotificationStatusOrderByWithRelationInput
  notificationStatusId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FriendRequestRelationFilter @join__type(graph: PROFILING) {
  is: FriendRequestWhereInput
  isNot: FriendRequestWhereInput
}

enum FriendRequestScalarFieldEnum @join__type(graph: PROFILING) {
  id
  senderProfileId
  receiverProfileId
  notificationStatusId
  createdAt
  updatedAt
}

input FriendRequestScalarWhereInput @join__type(graph: PROFILING) {
  AND: [FriendRequestScalarWhereInput!]
  OR: [FriendRequestScalarWhereInput!]
  NOT: [FriendRequestScalarWhereInput!]
  id: StringFilter
  senderProfileId: StringFilter
  receiverProfileId: StringFilter
  notificationStatusId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FriendRequestScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [FriendRequestScalarWhereWithAggregatesInput!]
  OR: [FriendRequestScalarWhereWithAggregatesInput!]
  NOT: [FriendRequestScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  senderProfileId: StringWithAggregatesFilter
  receiverProfileId: StringWithAggregatesFilter
  notificationStatusId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FriendRequestUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateManyWithoutNotificationsNestedInput
  @join__type(graph: PROFILING) {
  create: FriendRequestCreateWithoutNotificationsInput
  connectOrCreate: [FriendRequestCreateOrConnectWithoutNotificationsInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  connect: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput!]
  updateMany: [FriendRequestUpdateManyWithWhereWithoutNotificationsInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
}

input FriendRequestUpdateManyWithWhereWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  where: FriendRequestScalarWhereInput!
  data: FriendRequestUpdateManyMutationInput!
}

input FriendRequestUpdateOneWithoutNotificationStatusNestedInput
  @join__type(graph: PROFILING) {
  create: FriendRequestCreateWithoutNotificationStatusInput
  connectOrCreate: FriendRequestCreateOrConnectWithoutNotificationStatusInput
  upsert: FriendRequestUpsertWithoutNotificationStatusInput
  disconnect: Boolean
  delete: Boolean
  connect: FriendRequestWhereUniqueInput
  update: FriendRequestUpdateWithoutNotificationStatusInput
}

input FriendRequestUpdateWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  NotificationStatus: NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateWithoutNotificationStatusInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Notifications: NotificationsUpdateManyWithoutFriendRequestsNestedInput
  senderProfileId: StringFieldUpdateOperationsInput
  receiverProfileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutNotificationsInput!
}

input FriendRequestUpsertWithoutNotificationStatusInput
  @join__type(graph: PROFILING) {
  update: FriendRequestUpdateWithoutNotificationStatusInput!
  create: FriendRequestCreateWithoutNotificationStatusInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutNotificationsInput!
  create: FriendRequestCreateWithoutNotificationsInput!
}

input FriendRequestWhereInput @join__type(graph: PROFILING) {
  AND: [FriendRequestWhereInput!]
  OR: [FriendRequestWhereInput!]
  NOT: [FriendRequestWhereInput!]
  id: StringFilter
  Notifications: NotificationsListRelationFilter
  senderProfileId: StringFilter
  receiverProfileId: StringFilter
  NotificationStatus: NotificationStatusWhereInput
  notificationStatusId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FriendRequestWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  notificationStatusId: String
}

type Geometry @join__type(graph: PROFILING) {
  id: ID!
  type: String!
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: Location
}

input GeometryAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryCreateInput @join__type(graph: PROFILING) {
  type: String!
  h3Index15: String
  latitude: Float!
  longitude: Float!
  Location: LocationCreateNestedOneWithoutGeometryInput
}

input GeometryCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  type: String!
  h3Index15: String
  latitude: Float!
  longitude: Float!
}

input GeometryCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING) {
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING) {
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryCreateWithoutLocationInput @join__type(graph: PROFILING) {
  type: String!
  h3Index15: String
  latitude: Float!
  longitude: Float!
}

input GeometryMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  _count: GeometryCountOrderByAggregateInput
  _avg: GeometryAvgOrderByAggregateInput
  _max: GeometryMaxOrderByAggregateInput
  _min: GeometryMinOrderByAggregateInput
  _sum: GeometrySumOrderByAggregateInput
}

input GeometryOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  Location: LocationOrderByWithRelationInput
}

input GeometryRelationFilter @join__type(graph: PROFILING) {
  is: GeometryWhereInput
  isNot: GeometryWhereInput
}

enum GeometryScalarFieldEnum @join__type(graph: PROFILING) {
  id
  type
  h3Index15
  latitude
  longitude
}

input GeometryScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [GeometryScalarWhereWithAggregatesInput!]
  OR: [GeometryScalarWhereWithAggregatesInput!]
  NOT: [GeometryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  type: StringWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
}

input GeometrySumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  latitude: SortOrder
  longitude: SortOrder
}

input GeometryUpdateInput @join__type(graph: PROFILING) {
  type: StringFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutGeometryNestedInput
}

input GeometryUpdateManyMutationInput @join__type(graph: PROFILING) {
  type: StringFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input GeometryUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING) {
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  upsert: GeometryUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutLocationInput
}

input GeometryUpdateWithoutLocationInput @join__type(graph: PROFILING) {
  type: StringFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input GeometryUpsertWithoutLocationInput @join__type(graph: PROFILING) {
  update: GeometryUpdateWithoutLocationInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryWhereInput @join__type(graph: PROFILING) {
  AND: [GeometryWhereInput!]
  OR: [GeometryWhereInput!]
  NOT: [GeometryWhereInput!]
  id: IntFilter
  type: StringFilter
  h3Index15: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  Location: LocationWhereInput
}

input GeometryWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Group @join__type(graph: PROFILING) {
  id: ID!
  name: String!
  photos(
    where: PhotoWhereInput
    orderBy: [PhotoOrderByWithRelationInput!]
    cursor: PhotoWhereUniqueInput
    take: Int
    skip: Int
    distinct: [PhotoScalarFieldEnum!]
  ): [Photo!]!
  Profile(
    where: ProfileWhereInput
    orderBy: [ProfileOrderByWithRelationInput!]
    cursor: ProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProfileScalarFieldEnum!]
  ): [Profile!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GroupCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupCreateInput @join__type(graph: PROFILING) {
  id: String
  name: String!
  photos: PhotoCreateNestedManyWithoutGroupInput
  Profile: ProfileCreateNestedManyWithoutGroupsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateManyInput @join__type(graph: PROFILING) {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateNestedManyWithoutProfileInput @join__type(graph: PROFILING) {
  create: GroupCreateWithoutProfileInput
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateNestedOneWithoutPhotosInput @join__type(graph: PROFILING) {
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOrConnectWithoutPhotosInput @join__type(graph: PROFILING) {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupCreateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: String
  name: String!
  Profile: ProfileCreateNestedManyWithoutGroupsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  name: String!
  photos: PhotoCreateNestedManyWithoutGroupInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupListRelationFilter @join__type(graph: PROFILING) {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input GroupMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input GroupOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: GroupCountOrderByAggregateInput
  _max: GroupMaxOrderByAggregateInput
  _min: GroupMinOrderByAggregateInput
}

input GroupOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  Profile: ProfileOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input GroupRelationFilter @join__type(graph: PROFILING) {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

enum GroupScalarFieldEnum @join__type(graph: PROFILING) {
  id
  name
  createdAt
  updatedAt
}

input GroupScalarWhereInput @join__type(graph: PROFILING) {
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GroupScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [GroupScalarWhereWithAggregatesInput!]
  OR: [GroupScalarWhereWithAggregatesInput!]
  NOT: [GroupScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input GroupUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: GroupCreateWithoutProfileInput
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutProfileInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyMutationInput!
}

input GroupUpdateOneWithoutPhotosNestedInput @join__type(graph: PROFILING) {
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  upsert: GroupUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutPhotosInput
}

input GroupUpdateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateManyWithoutGroupsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutProfileInput!
}

input GroupUpsertWithoutPhotosInput @join__type(graph: PROFILING) {
  update: GroupUpdateWithoutPhotosInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutProfileInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupWhereInput @join__type(graph: PROFILING) {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: StringFilter
  name: StringFilter
  photos: PhotoListRelationFilter
  Profile: ProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GroupWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input H3Index5VenueRecommendationCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index5VenueRecommendationCreateInput @join__type(graph: PROFILING) {
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
  MetricsHomeCollection: MetricsHomeCollectionCreateNestedManyWithoutH3Index5VenueRecommendationInput
}

input H3Index5VenueRecommendationCreateManyInput @join__type(graph: PROFILING) {
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput
  @join__type(graph: PROFILING) {
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput
  connect: H3Index5VenueRecommendationWhereUniqueInput
}

input H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput
  @join__type(graph: PROFILING) {
  where: H3Index5VenueRecommendationWhereUniqueInput!
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput!
}

input H3Index5VenueRecommendationCreatevenuesProfileIdsInput
  @join__type(graph: PROFILING) {
  set: [String!]!
}

input H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput
  @join__type(graph: PROFILING) {
  id: String
  h3Index5: String!
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index5: SortOrder
}

input H3Index5VenueRecommendationMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index5: SortOrder
}

input H3Index5VenueRecommendationOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
  _count: H3Index5VenueRecommendationCountOrderByAggregateInput
  _max: H3Index5VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index5VenueRecommendationMinOrderByAggregateInput
}

input H3Index5VenueRecommendationOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index5: SortOrder
  venuesProfileIds: SortOrder
  MetricsHomeCollection: MetricsHomeCollectionOrderByRelationAggregateInput
}

input H3Index5VenueRecommendationRelationFilter @join__type(graph: PROFILING) {
  is: H3Index5VenueRecommendationWhereInput
  isNot: H3Index5VenueRecommendationWhereInput
}

enum H3Index5VenueRecommendationScalarFieldEnum @join__type(graph: PROFILING) {
  id
  h3Index5
  venuesProfileIds
}

input H3Index5VenueRecommendationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  NOT: [H3Index5VenueRecommendationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index5: StringWithAggregatesFilter
  venuesProfileIds: StringNullableListFilter
}

input H3Index5VenueRecommendationUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  MetricsHomeCollection: MetricsHomeCollectionUpdateManyWithoutH3Index5VenueRecommendationNestedInput
}

input H3Index5VenueRecommendationUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput
  @join__type(graph: PROFILING) {
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput
  connectOrCreate: H3Index5VenueRecommendationCreateOrConnectWithoutMetricsHomeCollectionInput
  upsert: H3Index5VenueRecommendationUpsertWithoutMetricsHomeCollectionInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index5VenueRecommendationWhereUniqueInput
  update: H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput
}

input H3Index5VenueRecommendationUpdatevenuesProfileIdsInput
  @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index5: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index5VenueRecommendationUpsertWithoutMetricsHomeCollectionInput
  @join__type(graph: PROFILING) {
  update: H3Index5VenueRecommendationUpdateWithoutMetricsHomeCollectionInput!
  create: H3Index5VenueRecommendationCreateWithoutMetricsHomeCollectionInput!
}

input H3Index5VenueRecommendationWhereInput @join__type(graph: PROFILING) {
  AND: [H3Index5VenueRecommendationWhereInput!]
  OR: [H3Index5VenueRecommendationWhereInput!]
  NOT: [H3Index5VenueRecommendationWhereInput!]
  id: StringFilter
  h3Index5: StringFilter
  venuesProfileIds: StringNullableListFilter
  MetricsHomeCollection: MetricsHomeCollectionListRelationFilter
}

input H3Index5VenueRecommendationWhereUniqueInput
  @join__type(graph: PROFILING) {
  id: String
  h3Index5: String
}

input H3Index6VenueRecommendationCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
}

input H3Index6VenueRecommendationCreateInput @join__type(graph: PROFILING) {
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
  MetricsCollection: MetricsHomeCollectionCreateNestedManyWithoutH3Index6VenueRecommendationInput
}

input H3Index6VenueRecommendationCreateManyInput @join__type(graph: PROFILING) {
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput
  @join__type(graph: PROFILING) {
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput
  connect: H3Index6VenueRecommendationWhereUniqueInput
}

input H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput
  @join__type(graph: PROFILING) {
  where: H3Index6VenueRecommendationWhereUniqueInput!
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput!
}

input H3Index6VenueRecommendationCreatevenuesProfileIdsInput
  @join__type(graph: PROFILING) {
  set: [String!]!
}

input H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput
  @join__type(graph: PROFILING) {
  id: String
  h3Index6: String!
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index6: SortOrder
}

input H3Index6VenueRecommendationMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index6: SortOrder
}

input H3Index6VenueRecommendationOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
  _count: H3Index6VenueRecommendationCountOrderByAggregateInput
  _max: H3Index6VenueRecommendationMaxOrderByAggregateInput
  _min: H3Index6VenueRecommendationMinOrderByAggregateInput
}

input H3Index6VenueRecommendationOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index6: SortOrder
  venuesProfileIds: SortOrder
  MetricsCollection: MetricsHomeCollectionOrderByRelationAggregateInput
}

input H3Index6VenueRecommendationRelationFilter @join__type(graph: PROFILING) {
  is: H3Index6VenueRecommendationWhereInput
  isNot: H3Index6VenueRecommendationWhereInput
}

enum H3Index6VenueRecommendationScalarFieldEnum @join__type(graph: PROFILING) {
  id
  h3Index6
  venuesProfileIds
}

input H3Index6VenueRecommendationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  OR: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  NOT: [H3Index6VenueRecommendationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index6: StringWithAggregatesFilter
  venuesProfileIds: StringNullableListFilter
}

input H3Index6VenueRecommendationUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
  MetricsCollection: MetricsHomeCollectionUpdateManyWithoutH3Index6VenueRecommendationNestedInput
}

input H3Index6VenueRecommendationUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput
  @join__type(graph: PROFILING) {
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput
  connectOrCreate: H3Index6VenueRecommendationCreateOrConnectWithoutMetricsCollectionInput
  upsert: H3Index6VenueRecommendationUpsertWithoutMetricsCollectionInput
  disconnect: Boolean
  delete: Boolean
  connect: H3Index6VenueRecommendationWhereUniqueInput
  update: H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput
}

input H3Index6VenueRecommendationUpdatevenuesProfileIdsInput
  @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index6: StringFieldUpdateOperationsInput
  venuesProfileIds: [String!]
}

input H3Index6VenueRecommendationUpsertWithoutMetricsCollectionInput
  @join__type(graph: PROFILING) {
  update: H3Index6VenueRecommendationUpdateWithoutMetricsCollectionInput!
  create: H3Index6VenueRecommendationCreateWithoutMetricsCollectionInput!
}

input H3Index6VenueRecommendationWhereInput @join__type(graph: PROFILING) {
  AND: [H3Index6VenueRecommendationWhereInput!]
  OR: [H3Index6VenueRecommendationWhereInput!]
  NOT: [H3Index6VenueRecommendationWhereInput!]
  id: StringFilter
  h3Index6: StringFilter
  venuesProfileIds: StringNullableListFilter
  MetricsCollection: MetricsHomeCollectionListRelationFilter
}

input H3Index6VenueRecommendationWhereUniqueInput
  @join__type(graph: PROFILING) {
  id: String
  h3Index6: String
}

type IdentifiableInformation @join__type(graph: PROFILING) {
  id: ID!
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime!
  updatedAt: DateTime!
  Profile: Profile!
  profileId: String!
}

input IdentifiableInformationCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationCreateInput @join__type(graph: PROFILING) {
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutIdentifiableInformationInput!
}

input IdentifiableInformationCreateManyInput @join__type(graph: PROFILING) {
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
  profileId: String!
}

input IdentifiableInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  connect: IdentifiableInformationWhereUniqueInput
}

input IdentifiableInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: IdentifiableInformationWhereUniqueInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationCreateWithoutProfileInput
  @join__type(graph: PROFILING) {
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IdentifiableInformationMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
}

input IdentifiableInformationOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profileId: SortOrder
  _count: IdentifiableInformationCountOrderByAggregateInput
  _max: IdentifiableInformationMaxOrderByAggregateInput
  _min: IdentifiableInformationMinOrderByAggregateInput
}

input IdentifiableInformationOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input IdentifiableInformationRelationFilter @join__type(graph: PROFILING) {
  is: IdentifiableInformationWhereInput
  isNot: IdentifiableInformationWhereInput
}

enum IdentifiableInformationScalarFieldEnum @join__type(graph: PROFILING) {
  id
  storageId
  username
  fullname
  firstname
  lastname
  nickname
  surname
  birthday
  gender
  lookfor
  hometown
  currenttown
  createdAt
  updatedAt
  profileId
}

input IdentifiableInformationScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  OR: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  NOT: [IdentifiableInformationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  storageId: StringNullableWithAggregatesFilter
  username: StringWithAggregatesFilter
  fullname: StringNullableWithAggregatesFilter
  firstname: StringNullableWithAggregatesFilter
  lastname: StringNullableWithAggregatesFilter
  nickname: StringNullableWithAggregatesFilter
  surname: StringNullableWithAggregatesFilter
  birthday: DateTimeNullableWithAggregatesFilter
  gender: StringNullableWithAggregatesFilter
  lookfor: StringNullableWithAggregatesFilter
  hometown: StringNullableWithAggregatesFilter
  currenttown: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

input IdentifiableInformationUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput
}

input IdentifiableInformationUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentifiableInformationUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  upsert: IdentifiableInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: IdentifiableInformationWhereUniqueInput
  update: IdentifiableInformationUpdateWithoutProfileInput
}

input IdentifiableInformationUpdateWithoutProfileInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentifiableInformationUpsertWithoutProfileInput
  @join__type(graph: PROFILING) {
  update: IdentifiableInformationUpdateWithoutProfileInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationWhereInput @join__type(graph: PROFILING) {
  AND: [IdentifiableInformationWhereInput!]
  OR: [IdentifiableInformationWhereInput!]
  NOT: [IdentifiableInformationWhereInput!]
  id: StringFilter
  storageId: StringNullableFilter
  username: StringFilter
  fullname: StringNullableFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  nickname: StringNullableFilter
  surname: StringNullableFilter
  birthday: DateTimeNullableFilter
  gender: StringNullableFilter
  lookfor: StringNullableFilter
  hometown: StringNullableFilter
  currenttown: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
}

input IdentifiableInformationWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  username: String
  profileId: String
}

input IntFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input IntFilter @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input IntNullableWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input IntWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

scalar join__FieldSet

enum join__Graph {
  MANAGING @join__graph(name: "managing", url: "http://localhost:5002/graphql")
  PROFILING
    @join__graph(name: "profiling", url: "http://localhost:5001/graphql")
}

type JoinedOut @join__type(graph: PROFILING) {
  id: ID!
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  LiveOutPersonal: LiveOutPersonal
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  VenueStats: VenueStats
  venueStatsId: String
  PersonalStats: PersonalStats
  personalStatsId: String
}

input JoinedOutCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  liveOutVenueId: SortOrder
  liveOutPersonalId: SortOrder
  leftAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
}

input JoinedOutCreateInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateManyInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
  personalStatsId: String
}

input JoinedOutCreateManyLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
  personalStatsId: String
}

input JoinedOutCreateManyLiveOutPersonalInputEnvelope
  @join__type(graph: PROFILING) {
  data: [JoinedOutCreateManyLiveOutPersonalInput!]!
  skipDuplicates: Boolean
}

input JoinedOutCreateManyLiveOutVenueInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
  personalStatsId: String
}

input JoinedOutCreateManyLiveOutVenueInputEnvelope
  @join__type(graph: PROFILING) {
  data: [JoinedOutCreateManyLiveOutVenueInput!]!
  skipDuplicates: Boolean
}

input JoinedOutCreateManyPersonalStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
}

input JoinedOutCreateManyPersonalStatsInputEnvelope
  @join__type(graph: PROFILING) {
  data: [JoinedOutCreateManyPersonalStatsInput!]!
  skipDuplicates: Boolean
}

input JoinedOutCreateManyVenueStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  personalStatsId: String
}

input JoinedOutCreateManyVenueStatsInputEnvelope @join__type(graph: PROFILING) {
  data: [JoinedOutCreateManyVenueStatsInput!]!
  skipDuplicates: Boolean
}

input JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutPersonalInput!]
  createMany: JoinedOutCreateManyLiveOutPersonalInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutLiveOutVenueInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutVenueInput!]
  createMany: JoinedOutCreateManyLiveOutVenueInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutPersonalStatsInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutPersonalStatsInput!]
  createMany: JoinedOutCreateManyPersonalStatsInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutVenueStatsInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutVenueStatsInput!]
  createMany: JoinedOutCreateManyVenueStatsInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutLiveOutPersonalInput!
}

input JoinedOutCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutLiveOutVenueInput!
}

input JoinedOutCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutPersonalStatsInput!
}

input JoinedOutCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutVenueStatsInput!
}

input JoinedOutCreateWithoutLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutListRelationFilter @join__type(graph: PROFILING) {
  every: JoinedOutWhereInput
  some: JoinedOutWhereInput
  none: JoinedOutWhereInput
}

input JoinedOutMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  liveOutVenueId: SortOrder
  liveOutPersonalId: SortOrder
  leftAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
}

input JoinedOutMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  liveOutVenueId: SortOrder
  liveOutPersonalId: SortOrder
  leftAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
}

input JoinedOutOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input JoinedOutOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  liveOutVenueId: SortOrder
  liveOutPersonalId: SortOrder
  leftAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  _count: JoinedOutCountOrderByAggregateInput
  _max: JoinedOutMaxOrderByAggregateInput
  _min: JoinedOutMinOrderByAggregateInput
}

input JoinedOutOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  liveOutVenueId: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  liveOutPersonalId: SortOrder
  leftAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
}

enum JoinedOutScalarFieldEnum @join__type(graph: PROFILING) {
  id
  personalProfileId
  venueProfileId
  liveOutVenueId
  liveOutPersonalId
  leftAt
  createdAt
  updatedAt
  venueStatsId
  personalStatsId
}

input JoinedOutScalarWhereInput @join__type(graph: PROFILING) {
  AND: [JoinedOutScalarWhereInput!]
  OR: [JoinedOutScalarWhereInput!]
  NOT: [JoinedOutScalarWhereInput!]
  id: StringFilter
  personalProfileId: StringNullableFilter
  venueProfileId: StringFilter
  liveOutVenueId: StringNullableFilter
  liveOutPersonalId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
}

input JoinedOutScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [JoinedOutScalarWhereWithAggregatesInput!]
  OR: [JoinedOutScalarWhereWithAggregatesInput!]
  NOT: [JoinedOutScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  personalProfileId: StringNullableWithAggregatesFilter
  venueProfileId: StringWithAggregatesFilter
  liveOutVenueId: StringNullableWithAggregatesFilter
  liveOutPersonalId: StringNullableWithAggregatesFilter
  leftAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  venueStatsId: StringNullableWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
}

input JoinedOutUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
}

input JoinedOutUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JoinedOutUpdateManyWithoutLiveOutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutPersonalInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
  createMany: JoinedOutCreateManyLiveOutPersonalInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutLiveOutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutLiveOutVenueInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutVenueInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
  createMany: JoinedOutCreateManyLiveOutVenueInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutPersonalStatsNestedInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutPersonalStatsInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutPersonalStatsInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
  createMany: JoinedOutCreateManyPersonalStatsInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutPersonalStatsInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutVenueStatsNestedInput
  @join__type(graph: PROFILING) {
  create: JoinedOutCreateWithoutVenueStatsInput
  connectOrCreate: [JoinedOutCreateOrConnectWithoutVenueStatsInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutVenueStatsInput!]
  createMany: JoinedOutCreateManyVenueStatsInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutVenueStatsInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithWhereWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateWithoutLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
}

input JoinedOutUpdateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
}

input JoinedOutUpdateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
}

input JoinedOutUpdateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
}

input JoinedOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutLiveOutPersonalInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutLiveOutVenueInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutPersonalStatsInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutVenueStatsInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutLiveOutPersonalInput!
  create: JoinedOutCreateWithoutLiveOutPersonalInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutLiveOutVenueInput!
  create: JoinedOutCreateWithoutLiveOutVenueInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutPersonalStatsInput!
  create: JoinedOutCreateWithoutPersonalStatsInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutVenueStatsInput!
  create: JoinedOutCreateWithoutVenueStatsInput!
}

input JoinedOutWhereInput @join__type(graph: PROFILING) {
  AND: [JoinedOutWhereInput!]
  OR: [JoinedOutWhereInput!]
  NOT: [JoinedOutWhereInput!]
  id: StringFilter
  personalProfileId: StringNullableFilter
  venueProfileId: StringFilter
  LiveOutVenue: LiveOutVenueWhereInput
  liveOutVenueId: StringNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  liveOutPersonalId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringNullableFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
}

input JoinedOutWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

scalar Json @join__type(graph: MANAGING) @join__type(graph: PROFILING)

input JsonNullableListFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type LegalAgreement @join__type(graph: PROFILING) {
  id: ID!
  aggreed: Boolean!
  Document: Document!
  documentId: Int!
  Credentials: Credentials
  credentialsId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LegalAgreementAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  documentId: SortOrder
}

input LegalAgreementCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementCreateInput @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInput @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  documentId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInputEnvelope
  @join__type(graph: PROFILING) {
  data: [LegalAgreementCreateManyCredentialsInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyDocumentInput @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  credentialsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyDocumentInputEnvelope
  @join__type(graph: PROFILING) {
  data: [LegalAgreementCreateManyDocumentInput!]!
  skipDuplicates: Boolean
}

input LegalAgreementCreateManyInput @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  documentId: Int!
  credentialsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateNestedManyWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  create: LegalAgreementCreateWithoutCredentialsInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  connect: [LegalAgreementWhereUniqueInput!]
}

input LegalAgreementCreateNestedManyWithoutDocumentInput
  @join__type(graph: PROFILING) {
  create: LegalAgreementCreateWithoutDocumentInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
  connect: [LegalAgreementWhereUniqueInput!]
}

input LegalAgreementCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementCreateOrConnectWithoutDocumentInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  create: LegalAgreementCreateWithoutDocumentInput!
}

input LegalAgreementCreateWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateWithoutDocumentInput @join__type(graph: PROFILING) {
  id: String
  aggreed: Boolean
  Credentials: CredentialsCreateNestedOneWithoutLegalAgreementInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementListRelationFilter @join__type(graph: PROFILING) {
  every: LegalAgreementWhereInput
  some: LegalAgreementWhereInput
  none: LegalAgreementWhereInput
}

input LegalAgreementMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LegalAgreementOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input LegalAgreementOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  aggreed: SortOrder
  documentId: SortOrder
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LegalAgreementCountOrderByAggregateInput
  _avg: LegalAgreementAvgOrderByAggregateInput
  _max: LegalAgreementMaxOrderByAggregateInput
  _min: LegalAgreementMinOrderByAggregateInput
  _sum: LegalAgreementSumOrderByAggregateInput
}

input LegalAgreementOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  aggreed: SortOrder
  Document: DocumentOrderByWithRelationInput
  documentId: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  credentialsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum LegalAgreementScalarFieldEnum @join__type(graph: PROFILING) {
  id
  aggreed
  documentId
  credentialsId
  createdAt
  updatedAt
}

input LegalAgreementScalarWhereInput @join__type(graph: PROFILING) {
  AND: [LegalAgreementScalarWhereInput!]
  OR: [LegalAgreementScalarWhereInput!]
  NOT: [LegalAgreementScalarWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  documentId: IntFilter
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LegalAgreementScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [LegalAgreementScalarWhereWithAggregatesInput!]
  OR: [LegalAgreementScalarWhereWithAggregatesInput!]
  NOT: [LegalAgreementScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  aggreed: BoolWithAggregatesFilter
  documentId: IntWithAggregatesFilter
  credentialsId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LegalAgreementSumOrderByAggregateInput @join__type(graph: PROFILING) {
  documentId: SortOrder
}

input LegalAgreementUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyWithoutCredentialsNestedInput
  @join__type(graph: PROFILING) {
  create: LegalAgreementCreateWithoutCredentialsInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  set: [LegalAgreementWhereUniqueInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  delete: [LegalAgreementWhereUniqueInput!]
  connect: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutCredentialsInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
}

input LegalAgreementUpdateManyWithoutDocumentNestedInput
  @join__type(graph: PROFILING) {
  create: LegalAgreementCreateWithoutDocumentInput
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutDocumentInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput!]
  createMany: LegalAgreementCreateManyDocumentInputEnvelope
  set: [LegalAgreementWhereUniqueInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  delete: [LegalAgreementWhereUniqueInput!]
  connect: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutDocumentInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
}

input LegalAgreementUpdateManyWithWhereWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementScalarWhereInput!
  data: LegalAgreementUpdateManyMutationInput!
}

input LegalAgreementUpdateManyWithWhereWithoutDocumentInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementScalarWhereInput!
  data: LegalAgreementUpdateManyMutationInput!
}

input LegalAgreementUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateWithoutDocumentInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  Credentials: CredentialsUpdateOneWithoutLegalAgreementNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  data: LegalAgreementUpdateWithoutCredentialsInput!
}

input LegalAgreementUpdateWithWhereUniqueWithoutDocumentInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  data: LegalAgreementUpdateWithoutDocumentInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  update: LegalAgreementUpdateWithoutCredentialsInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutDocumentInput
  @join__type(graph: PROFILING) {
  where: LegalAgreementWhereUniqueInput!
  update: LegalAgreementUpdateWithoutDocumentInput!
  create: LegalAgreementCreateWithoutDocumentInput!
}

input LegalAgreementWhereInput @join__type(graph: PROFILING) {
  AND: [LegalAgreementWhereInput!]
  OR: [LegalAgreementWhereInput!]
  NOT: [LegalAgreementWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  Document: DocumentWhereInput
  documentId: IntFilter
  Credentials: CredentialsWhereInput
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LegalAgreementWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LiveOutPersonal @join__type(graph: PROFILING) {
  id: ID!
  Personal: Personal!
  personalId: String!
  totaled(
    where: TotaledOutWhereInput
    orderBy: [TotaledOutOrderByWithRelationInput!]
    cursor: TotaledOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TotaledOutScalarFieldEnum!]
  ): [TotaledOut!]!
  joined(
    where: JoinedOutWhereInput
    orderBy: [JoinedOutOrderByWithRelationInput!]
    cursor: JoinedOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [JoinedOutScalarFieldEnum!]
  ): [JoinedOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutPersonalCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalCreateInput @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  totaled: TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  joined: JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalCreateManyInput @join__type(graph: PROFILING) {
  id: String
  personalId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalCreateNestedOneWithoutJoinedInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutJoinedInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutJoinedInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateNestedOneWithoutTotaledInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutTotaledInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutTotaledInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateOrConnectWithoutJoinedInput
  @join__type(graph: PROFILING) {
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutJoinedInput!
}

input LiveOutPersonalCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING) {
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalCreateOrConnectWithoutTotaledInput
  @join__type(graph: PROFILING) {
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutTotaledInput!
}

input LiveOutPersonalCreateWithoutJoinedInput @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  totaled: TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalCreateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: String
  totaled: TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  joined: JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalCreateWithoutTotaledInput @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  joined: JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutPersonalMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LiveOutPersonalCountOrderByAggregateInput
  _max: LiveOutPersonalMaxOrderByAggregateInput
  _min: LiveOutPersonalMinOrderByAggregateInput
}

input LiveOutPersonalOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Personal: PersonalOrderByWithRelationInput
  personalId: SortOrder
  totaled: TotaledOutOrderByRelationAggregateInput
  joined: JoinedOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalRelationFilter @join__type(graph: PROFILING) {
  is: LiveOutPersonalWhereInput
  isNot: LiveOutPersonalWhereInput
}

enum LiveOutPersonalScalarFieldEnum @join__type(graph: PROFILING) {
  id
  personalId
  createdAt
  updatedAt
}

input LiveOutPersonalScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  OR: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  NOT: [LiveOutPersonalScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  personalId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LiveOutPersonalUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  totaled: TotaledOutUpdateManyWithoutLiveOutPersonalNestedInput
  joined: JoinedOutUpdateManyWithoutLiveOutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateOneWithoutJoinedNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutJoinedInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutJoinedInput
  upsert: LiveOutPersonalUpsertWithoutJoinedInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutJoinedInput
}

input LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  upsert: LiveOutPersonalUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutPersonalInput
}

input LiveOutPersonalUpdateOneWithoutTotaledNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutPersonalCreateWithoutTotaledInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutTotaledInput
  upsert: LiveOutPersonalUpsertWithoutTotaledInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutTotaledInput
}

input LiveOutPersonalUpdateWithoutJoinedInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  totaled: TotaledOutUpdateManyWithoutLiveOutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  totaled: TotaledOutUpdateManyWithoutLiveOutPersonalNestedInput
  joined: JoinedOutUpdateManyWithoutLiveOutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpdateWithoutTotaledInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  joined: JoinedOutUpdateManyWithoutLiveOutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutPersonalUpsertWithoutJoinedInput @join__type(graph: PROFILING) {
  update: LiveOutPersonalUpdateWithoutJoinedInput!
  create: LiveOutPersonalCreateWithoutJoinedInput!
}

input LiveOutPersonalUpsertWithoutPersonalInput @join__type(graph: PROFILING) {
  update: LiveOutPersonalUpdateWithoutPersonalInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalUpsertWithoutTotaledInput @join__type(graph: PROFILING) {
  update: LiveOutPersonalUpdateWithoutTotaledInput!
  create: LiveOutPersonalCreateWithoutTotaledInput!
}

input LiveOutPersonalWhereInput @join__type(graph: PROFILING) {
  AND: [LiveOutPersonalWhereInput!]
  OR: [LiveOutPersonalWhereInput!]
  NOT: [LiveOutPersonalWhereInput!]
  id: StringFilter
  Personal: PersonalWhereInput
  personalId: StringFilter
  totaled: TotaledOutListRelationFilter
  joined: JoinedOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LiveOutPersonalWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  personalId: String
}

type LiveOutVenue @join__type(graph: PROFILING) {
  id: ID!
  Venue: Venue!
  venueId: String!
  joined(
    where: JoinedOutWhereInput
    orderBy: [JoinedOutOrderByWithRelationInput!]
    cursor: JoinedOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [JoinedOutScalarFieldEnum!]
  ): [JoinedOut!]!
  totaled(
    where: TotaledOutWhereInput
    orderBy: [TotaledOutOrderByWithRelationInput!]
    cursor: TotaledOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TotaledOutScalarFieldEnum!]
  ): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutVenueCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueCreateInput @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  joined: JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  totaled: TotaledOutCreateNestedManyWithoutLiveOutVenueInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueCreateManyInput @join__type(graph: PROFILING) {
  id: String
  venueId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueCreateNestedOneWithoutJoinedInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutJoinedInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutJoinedInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateNestedOneWithoutTotaledInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutTotaledInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutTotaledInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateOrConnectWithoutJoinedInput
  @join__type(graph: PROFILING) {
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutJoinedInput!
}

input LiveOutVenueCreateOrConnectWithoutTotaledInput
  @join__type(graph: PROFILING) {
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutTotaledInput!
}

input LiveOutVenueCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING) {
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueCreateWithoutJoinedInput @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  totaled: TotaledOutCreateNestedManyWithoutLiveOutVenueInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueCreateWithoutTotaledInput @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  joined: JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueCreateWithoutVenueInput @join__type(graph: PROFILING) {
  id: String
  joined: JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  totaled: TotaledOutCreateNestedManyWithoutLiveOutVenueInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LiveOutVenueMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LiveOutVenueCountOrderByAggregateInput
  _max: LiveOutVenueMaxOrderByAggregateInput
  _min: LiveOutVenueMinOrderByAggregateInput
}

input LiveOutVenueOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
  joined: JoinedOutOrderByRelationAggregateInput
  totaled: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueRelationFilter @join__type(graph: PROFILING) {
  is: LiveOutVenueWhereInput
  isNot: LiveOutVenueWhereInput
}

enum LiveOutVenueScalarFieldEnum @join__type(graph: PROFILING) {
  id
  venueId
  createdAt
  updatedAt
}

input LiveOutVenueScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [LiveOutVenueScalarWhereWithAggregatesInput!]
  OR: [LiveOutVenueScalarWhereWithAggregatesInput!]
  NOT: [LiveOutVenueScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  venueId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LiveOutVenueUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  joined: JoinedOutUpdateManyWithoutLiveOutVenueNestedInput
  totaled: TotaledOutUpdateManyWithoutLiveOutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateOneWithoutJoinedNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutJoinedInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutJoinedInput
  upsert: LiveOutVenueUpsertWithoutJoinedInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutJoinedInput
}

input LiveOutVenueUpdateOneWithoutTotaledNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutTotaledInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutTotaledInput
  upsert: LiveOutVenueUpsertWithoutTotaledInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutTotaledInput
}

input LiveOutVenueUpdateOneWithoutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  upsert: LiveOutVenueUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutVenueInput
}

input LiveOutVenueUpdateWithoutJoinedInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  totaled: TotaledOutUpdateManyWithoutLiveOutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateWithoutTotaledInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  joined: JoinedOutUpdateManyWithoutLiveOutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpdateWithoutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  joined: JoinedOutUpdateManyWithoutLiveOutVenueNestedInput
  totaled: TotaledOutUpdateManyWithoutLiveOutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LiveOutVenueUpsertWithoutJoinedInput @join__type(graph: PROFILING) {
  update: LiveOutVenueUpdateWithoutJoinedInput!
  create: LiveOutVenueCreateWithoutJoinedInput!
}

input LiveOutVenueUpsertWithoutTotaledInput @join__type(graph: PROFILING) {
  update: LiveOutVenueUpdateWithoutTotaledInput!
  create: LiveOutVenueCreateWithoutTotaledInput!
}

input LiveOutVenueUpsertWithoutVenueInput @join__type(graph: PROFILING) {
  update: LiveOutVenueUpdateWithoutVenueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueWhereInput @join__type(graph: PROFILING) {
  AND: [LiveOutVenueWhereInput!]
  OR: [LiveOutVenueWhereInput!]
  NOT: [LiveOutVenueWhereInput!]
  id: StringFilter
  Venue: VenueWhereInput
  venueId: StringFilter
  joined: JoinedOutListRelationFilter
  totaled: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LiveOutVenueWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  venueId: String
}

type LiveVenueTotals @join__type(graph: PROFILING) {
  totaled: [TotaledOut!]!
  joined: [JoinedOut!]!
}

type Location @join__type(graph: PROFILING) {
  id: ID!
  h3Index: String!
  plusCode: PluseCode
  pluseCodeId: String
  Address: Address
  addressId: String
  Geometry: Geometry
  geometryId: Int
  Venue: Venue
  venueId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LocationAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  geometryId: SortOrder
}

input LocationCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationCreateInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateManyAddressInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  pluseCodeId: String
  geometryId: Int
  venueId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateManyAddressInputEnvelope @join__type(graph: PROFILING) {
  data: [LocationCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input LocationCreateManyInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  pluseCodeId: String
  addressId: String
  geometryId: Int
  venueId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateNestedManyWithoutAddressInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutAddressInput
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  createMany: LocationCreateManyAddressInputEnvelope
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateNestedOneWithoutGeometryInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutGeometryInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  connect: LocationWhereUniqueInput
}

input LocationCreateNestedOneWithoutPlusCodeInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutPlusCodeInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  connect: LocationWhereUniqueInput
}

input LocationCreateNestedOneWithoutVenueInput @join__type(graph: PROFILING) {
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOrConnectWithoutAddressInput @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutAddressInput!
}

input LocationCreateOrConnectWithoutGeometryInput
  @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutGeometryInput!
}

input LocationCreateOrConnectWithoutPlusCodeInput
  @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutPlusCodeInput!
}

input LocationCreateOrConnectWithoutVenueInput @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationCreateWithoutAddressInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateWithoutGeometryInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateWithoutPlusCodeInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  Venue: VenueCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationCreateWithoutVenueInput @join__type(graph: PROFILING) {
  id: String
  h3Index: String!
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationListRelationFilter @join__type(graph: PROFILING) {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input LocationMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input LocationOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index: SortOrder
  pluseCodeId: SortOrder
  addressId: SortOrder
  geometryId: SortOrder
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: LocationCountOrderByAggregateInput
  _avg: LocationAvgOrderByAggregateInput
  _max: LocationMaxOrderByAggregateInput
  _min: LocationMinOrderByAggregateInput
  _sum: LocationSumOrderByAggregateInput
}

input LocationOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index: SortOrder
  plusCode: PluseCodeOrderByWithRelationInput
  pluseCodeId: SortOrder
  Address: AddressOrderByWithRelationInput
  addressId: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  geometryId: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationRelationFilter @join__type(graph: PROFILING) {
  is: LocationWhereInput
  isNot: LocationWhereInput
}

enum LocationScalarFieldEnum @join__type(graph: PROFILING) {
  id
  h3Index
  pluseCodeId
  addressId
  geometryId
  venueId
  createdAt
  updatedAt
}

input LocationScalarWhereInput @join__type(graph: PROFILING) {
  AND: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  NOT: [LocationScalarWhereInput!]
  id: StringFilter
  h3Index: StringFilter
  pluseCodeId: StringNullableFilter
  addressId: StringNullableFilter
  geometryId: IntNullableFilter
  venueId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LocationScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [LocationScalarWhereWithAggregatesInput!]
  OR: [LocationScalarWhereWithAggregatesInput!]
  NOT: [LocationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  h3Index: StringWithAggregatesFilter
  pluseCodeId: StringNullableWithAggregatesFilter
  addressId: StringNullableWithAggregatesFilter
  geometryId: IntNullableWithAggregatesFilter
  venueId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input LocationSumOrderByAggregateInput @join__type(graph: PROFILING) {
  geometryId: SortOrder
}

input LocationUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateManyWithoutAddressNestedInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutAddressInput
  connectOrCreate: [LocationCreateOrConnectWithoutAddressInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: LocationCreateManyAddressInputEnvelope
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [LocationUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [LocationScalarWhereInput!]
}

input LocationUpdateManyWithWhereWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: LocationScalarWhereInput!
  data: LocationUpdateManyMutationInput!
}

input LocationUpdateOneWithoutGeometryNestedInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutGeometryInput
  connectOrCreate: LocationCreateOrConnectWithoutGeometryInput
  upsert: LocationUpsertWithoutGeometryInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutGeometryInput
}

input LocationUpdateOneWithoutPlusCodeNestedInput
  @join__type(graph: PROFILING) {
  create: LocationCreateWithoutPlusCodeInput
  connectOrCreate: LocationCreateOrConnectWithoutPlusCodeInput
  upsert: LocationUpsertWithoutPlusCodeInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutPlusCodeInput
}

input LocationUpdateOneWithoutVenueNestedInput @join__type(graph: PROFILING) {
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  upsert: LocationUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutVenueInput
}

input LocationUpdateWithoutAddressInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateWithoutGeometryInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateWithoutPlusCodeInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  Venue: VenueUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateWithoutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationNestedInput
  Address: AddressUpdateOneWithoutLocationNestedInput
  Geometry: GeometryUpdateOneWithoutLocationNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LocationUpdateWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutAddressInput!
}

input LocationUpsertWithoutGeometryInput @join__type(graph: PROFILING) {
  update: LocationUpdateWithoutGeometryInput!
  create: LocationCreateWithoutGeometryInput!
}

input LocationUpsertWithoutPlusCodeInput @join__type(graph: PROFILING) {
  update: LocationUpdateWithoutPlusCodeInput!
  create: LocationCreateWithoutPlusCodeInput!
}

input LocationUpsertWithoutVenueInput @join__type(graph: PROFILING) {
  update: LocationUpdateWithoutVenueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationUpsertWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING) {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutAddressInput!
  create: LocationCreateWithoutAddressInput!
}

input LocationWhereInput @join__type(graph: PROFILING) {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: StringFilter
  h3Index: StringFilter
  plusCode: PluseCodeWhereInput
  pluseCodeId: StringNullableFilter
  Address: AddressWhereInput
  addressId: StringNullableFilter
  Geometry: GeometryWhereInput
  geometryId: IntNullableFilter
  Venue: VenueWhereInput
  venueId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LocationWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  pluseCodeId: String
  geometryId: Int
  venueId: String
}

input MessageCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageCreateInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  responses: MessageCreateNestedManyWithoutResponseInput
  response: MessageCreateNestedOneWithoutResponsesInput
  senderId: String!
}

input MessageCreateManyChatroomInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  responseId: String
  senderId: String!
}

input MessageCreateManyChatroomInputEnvelope @join__type(graph: PROFILING) {
  data: [MessageCreateManyChatroomInput!]!
  skipDuplicates: Boolean
}

input MessageCreateManyInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  chatroomId: String
  responseId: String
  senderId: String!
}

input MessageCreateManyResponseInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  chatroomId: String
  senderId: String!
}

input MessageCreateManyResponseInputEnvelope @join__type(graph: PROFILING) {
  data: [MessageCreateManyResponseInput!]!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutChatroomInput
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutResponseInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutResponseInput
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedOneWithoutResponsesInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateOrConnectWithoutChatroomInput @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageCreateOrConnectWithoutResponseInput @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageCreateOrConnectWithoutResponsesInput
  @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageCreateWithoutChatroomInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  responses: MessageCreateNestedManyWithoutResponseInput
  response: MessageCreateNestedOneWithoutResponsesInput
  senderId: String!
}

input MessageCreateWithoutResponseInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  responses: MessageCreateNestedManyWithoutResponseInput
  senderId: String!
}

input MessageCreateWithoutResponsesInput @join__type(graph: PROFILING) {
  id: String
  message: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  response: MessageCreateNestedOneWithoutResponsesInput
  senderId: String!
}

input MessageListRelationFilter @join__type(graph: PROFILING) {
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input MessageMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
}

input MessageOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input MessageOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  message: SortOrder
  chatroomId: SortOrder
  responseId: SortOrder
  senderId: SortOrder
  _count: MessageCountOrderByAggregateInput
  _max: MessageMaxOrderByAggregateInput
  _min: MessageMinOrderByAggregateInput
}

input MessageOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  message: SortOrder
  Chatroom: ChatroomOrderByWithRelationInput
  chatroomId: SortOrder
  responses: MessageOrderByRelationAggregateInput
  response: MessageOrderByWithRelationInput
  responseId: SortOrder
  senderId: SortOrder
}

input MessageRelationFilter @join__type(graph: PROFILING) {
  is: MessageWhereInput
  isNot: MessageWhereInput
}

enum MessageScalarFieldEnum @join__type(graph: PROFILING) {
  id
  message
  chatroomId
  responseId
  senderId
}

input MessageScalarWhereInput @join__type(graph: PROFILING) {
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  id: StringFilter
  message: StringFilter
  chatroomId: StringNullableFilter
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [MessageScalarWhereWithAggregatesInput!]
  OR: [MessageScalarWhereWithAggregatesInput!]
  NOT: [MessageScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  chatroomId: StringNullableWithAggregatesFilter
  responseId: StringNullableWithAggregatesFilter
  senderId: StringWithAggregatesFilter
}

input MessageUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutChatroomNestedInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutChatroomInput
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithoutResponseNestedInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutResponseInput
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutResponseInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutResponseInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateManyWithWhereWithoutResponseInput
  @join__type(graph: PROFILING) {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateOneWithoutResponsesNestedInput
  @join__type(graph: PROFILING) {
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  upsert: MessageUpsertWithoutResponsesInput
  disconnect: Boolean
  delete: Boolean
  connect: MessageWhereUniqueInput
  update: MessageUpdateWithoutResponsesInput
}

input MessageUpdateWithoutChatroomInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithoutResponseInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  responses: MessageUpdateManyWithoutResponseNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithoutResponsesInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesNestedInput
  response: MessageUpdateOneWithoutResponsesNestedInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChatroomInput!
}

input MessageUpdateWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutResponseInput!
}

input MessageUpsertWithoutResponsesInput @join__type(graph: PROFILING) {
  update: MessageUpdateWithoutResponsesInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChatroomInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageUpsertWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING) {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutResponseInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageWhereInput @join__type(graph: PROFILING) {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: StringFilter
  message: StringFilter
  Chatroom: ChatroomWhereInput
  chatroomId: StringNullableFilter
  responses: MessageListRelationFilter
  response: MessageWhereInput
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input MetricsHomeCollectionAvgOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input MetricsHomeCollectionCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
}

input MetricsHomeCollectionCreateInput @join__type(graph: PROFILING) {
  h3Index15: String
  createdAt: DateTime
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput
}

input MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  id: Int
  h3Index15: String
  createdAt: DateTime
  h3Index6VenueRecommendationId: String
}

input MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING) {
  data: [MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  id: Int
  h3Index15: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
}

input MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope
  @join__type(graph: PROFILING) {
  data: [MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInput!]!
  skipDuplicates: Boolean
}

input MetricsHomeCollectionCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  h3Index15: String
  createdAt: DateTime
  h3Index5VenueRecommendationId: String
  h3Index6VenueRecommendationId: String
}

input MetricsHomeCollectionCreateNestedManyWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  createMany: MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope
  connect: [MetricsHomeCollectionWhereUniqueInput!]
}

input MetricsHomeCollectionCreateNestedManyWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  createMany: MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope
  connect: [MetricsHomeCollectionWhereUniqueInput!]
}

input MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput!
}

input MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput!
}

input MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  h3Index15: String
  createdAt: DateTime
  H3Index6VenueRecommendation: H3Index6VenueRecommendationCreateNestedOneWithoutMetricsCollectionInput
}

input MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  h3Index15: String
  createdAt: DateTime
  H3Index5VenueRecommendation: H3Index5VenueRecommendationCreateNestedOneWithoutMetricsHomeCollectionInput
}

input MetricsHomeCollectionListRelationFilter @join__type(graph: PROFILING) {
  every: MetricsHomeCollectionWhereInput
  some: MetricsHomeCollectionWhereInput
  none: MetricsHomeCollectionWhereInput
}

input MetricsHomeCollectionMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
}

input MetricsHomeCollectionMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
}

input MetricsHomeCollectionOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input MetricsHomeCollectionOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  createdAt: SortOrder
  h3Index5VenueRecommendationId: SortOrder
  h3Index6VenueRecommendationId: SortOrder
  _count: MetricsHomeCollectionCountOrderByAggregateInput
  _avg: MetricsHomeCollectionAvgOrderByAggregateInput
  _max: MetricsHomeCollectionMaxOrderByAggregateInput
  _min: MetricsHomeCollectionMinOrderByAggregateInput
  _sum: MetricsHomeCollectionSumOrderByAggregateInput
}

input MetricsHomeCollectionOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  h3Index15: SortOrder
  createdAt: SortOrder
  H3Index5VenueRecommendation: H3Index5VenueRecommendationOrderByWithRelationInput
  h3Index5VenueRecommendationId: SortOrder
  H3Index6VenueRecommendation: H3Index6VenueRecommendationOrderByWithRelationInput
  h3Index6VenueRecommendationId: SortOrder
}

enum MetricsHomeCollectionScalarFieldEnum @join__type(graph: PROFILING) {
  id
  h3Index15
  createdAt
  h3Index5VenueRecommendationId
  h3Index6VenueRecommendationId
}

input MetricsHomeCollectionScalarWhereInput @join__type(graph: PROFILING) {
  AND: [MetricsHomeCollectionScalarWhereInput!]
  OR: [MetricsHomeCollectionScalarWhereInput!]
  NOT: [MetricsHomeCollectionScalarWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  createdAt: DateTimeFilter
  h3Index5VenueRecommendationId: StringNullableFilter
  h3Index6VenueRecommendationId: StringNullableFilter
}

input MetricsHomeCollectionScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
  OR: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
  NOT: [MetricsHomeCollectionScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  h3Index15: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  h3Index5VenueRecommendationId: StringNullableWithAggregatesFilter
  h3Index6VenueRecommendationId: StringNullableWithAggregatesFilter
}

input MetricsHomeCollectionSumOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input MetricsHomeCollectionUpdateInput @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput
}

input MetricsHomeCollectionUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MetricsHomeCollectionUpdateManyWithoutH3Index5VenueRecommendationNestedInput
  @join__type(graph: PROFILING) {
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index5VenueRecommendationInput!]
  upsert: [MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  createMany: MetricsHomeCollectionCreateManyH3Index5VenueRecommendationInputEnvelope
  set: [MetricsHomeCollectionWhereUniqueInput!]
  disconnect: [MetricsHomeCollectionWhereUniqueInput!]
  delete: [MetricsHomeCollectionWhereUniqueInput!]
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  update: [MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput!]
  updateMany: [MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput!]
  deleteMany: [MetricsHomeCollectionScalarWhereInput!]
}

input MetricsHomeCollectionUpdateManyWithoutH3Index6VenueRecommendationNestedInput
  @join__type(graph: PROFILING) {
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput
  connectOrCreate: [MetricsHomeCollectionCreateOrConnectWithoutH3Index6VenueRecommendationInput!]
  upsert: [MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  createMany: MetricsHomeCollectionCreateManyH3Index6VenueRecommendationInputEnvelope
  set: [MetricsHomeCollectionWhereUniqueInput!]
  disconnect: [MetricsHomeCollectionWhereUniqueInput!]
  delete: [MetricsHomeCollectionWhereUniqueInput!]
  connect: [MetricsHomeCollectionWhereUniqueInput!]
  update: [MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput!]
  updateMany: [MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput!]
  deleteMany: [MetricsHomeCollectionScalarWhereInput!]
}

input MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionScalarWhereInput!
  data: MetricsHomeCollectionUpdateManyMutationInput!
}

input MetricsHomeCollectionUpdateManyWithWhereWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionScalarWhereInput!
  data: MetricsHomeCollectionUpdateManyMutationInput!
}

input MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index6VenueRecommendation: H3Index6VenueRecommendationUpdateOneWithoutMetricsCollectionNestedInput
}

input MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  h3Index15: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  H3Index5VenueRecommendation: H3Index5VenueRecommendationUpdateOneWithoutMetricsHomeCollectionNestedInput
}

input MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  data: MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput!
}

input MetricsHomeCollectionUpdateWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  data: MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput!
}

input MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index5VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  update: MetricsHomeCollectionUpdateWithoutH3Index5VenueRecommendationInput!
  create: MetricsHomeCollectionCreateWithoutH3Index5VenueRecommendationInput!
}

input MetricsHomeCollectionUpsertWithWhereUniqueWithoutH3Index6VenueRecommendationInput
  @join__type(graph: PROFILING) {
  where: MetricsHomeCollectionWhereUniqueInput!
  update: MetricsHomeCollectionUpdateWithoutH3Index6VenueRecommendationInput!
  create: MetricsHomeCollectionCreateWithoutH3Index6VenueRecommendationInput!
}

input MetricsHomeCollectionWhereInput @join__type(graph: PROFILING) {
  AND: [MetricsHomeCollectionWhereInput!]
  OR: [MetricsHomeCollectionWhereInput!]
  NOT: [MetricsHomeCollectionWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  createdAt: DateTimeFilter
  H3Index5VenueRecommendation: H3Index5VenueRecommendationWhereInput
  h3Index5VenueRecommendationId: StringNullableFilter
  H3Index6VenueRecommendation: H3Index6VenueRecommendationWhereInput
  h3Index6VenueRecommendationId: StringNullableFilter
}

input MetricsHomeCollectionWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Mutation @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  checkManaging: Boolean! @join__field(graph: MANAGING)
  createADeviceManager(profileId: String!): ClientDeviceManager!
    @join__field(graph: MANAGING)
  switchDeviceProfile(
    profileId: String!
    profileType: ProfileType
  ): RefreshDeviceManagerDeviceManagerResponseUnion!
    @join__field(graph: MANAGING)
  refreshDeviceManager: RefreshDeviceManagerDeviceManagerResponseUnion!
    @join__field(graph: MANAGING)
  removeDeviceProfileFromDeviceManager(
    profileId: String!
    profileType: ProfileType
  ): Boolean! @join__field(graph: MANAGING)
  upsertDevicePushToken(
    androidToken: String
    appleToken: String
    expoToken: String
  ): Boolean! @join__field(graph: MANAGING)
  checkThePink: Boolean! @join__field(graph: PROFILING)
  sendAuthenticatorDeviceOwnerCode(
    where: CustomCodeWhereInput
    data: CodeDataInput
  ): CodeResponse! @join__field(graph: PROFILING)
  sendAuthenticatorForgotPasswordCode(
    where: CustomCodeWhereInput
    data: CodeDataInput
  ): CodeResponse! @join__field(graph: PROFILING)
  createFriendRequest(
    senderProfileId: String!
    receiversProfileId: [String!]!
  ): Boolean! @join__field(graph: PROFILING)
  deleteFriendRequest(friendRequestId: String!): Boolean!
    @join__field(graph: PROFILING)
  removeFriend(relationshipId: String!): Boolean! @join__field(graph: PROFILING)
  acceptFriendRequest(
    venueIdMetAt: String
    friendRequestId: String!
  ): Relationship! @join__field(graph: PROFILING)
  declineFriendRequest(friendRequestId: String!): Boolean!
    @join__field(graph: PROFILING)
  qrAddFriend(qrCodeProfileId: String!, dataHash: String!): Relationship!
    @join__field(graph: PROFILING)
  addPersonalTotalsVenue(
    profileIdVenue: String
    profileIdPersonal: String
  ): Boolean! @join__field(graph: PROFILING)
  removePersonalTotalsVenue(
    profileIdVenue: String
    profileIdPersonal: String
  ): Boolean! @join__field(graph: PROFILING)
  addPersonalJoinsVenue(
    profileIdVenue: String
    profileIdPersonal: String
  ): Boolean! @join__field(graph: PROFILING)
  removePersonalJoinsVenue(
    profileIdVenue: String
    profileIdPersonal: String
  ): Boolean! @join__field(graph: PROFILING)
  createGuestProfile: ProfileResponseUnion! @join__field(graph: PROFILING)
  createVenueProfile(data: CreateVenueDataInput): ProfileResponseUnion!
    @join__field(graph: PROFILING)
  createPersonalProfile(data: CreatePersonalDataInput): ProfileResponseUnion!
    @join__field(graph: PROFILING)
  updateProfileIdentifiableInformation(
    data: IdentifiableInformationUpdateInput!
  ): ProfileResponseUnion! @join__field(graph: PROFILING)
  updateOneProfile(
    where: ProfileWhereUniqueInput!
    data: ProfileUpdateInput!
  ): Profile @join__field(graph: PROFILING)
  updateStoryPhotos(
    storyId: String
    photos: PhotoCreateManyProfileInputEnvelope
    disconnectId: String
  ): Boolean! @join__field(graph: PROFILING)
  updateStoryEmojimood(storyId: String, emojimoodId: Int!): Boolean!
    @join__field(graph: PROFILING)
  updateThemeManagerSwitchTheme(id: String!, themeId: String!): ProfileTheme!
    @join__field(graph: PROFILING)
}

input NestedBoolFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

input NestedBoolWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedDateTimeFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedEnumAppTypeNullableFilter @join__type(graph: MANAGING) {
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
}

input NestedEnumAppTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING) {
  equals: AppType
  in: [AppType!]
  notIn: [AppType!]
  not: AppType
  _count: NestedIntNullableFilter
  _min: NestedEnumAppTypeNullableFilter
  _max: NestedEnumAppTypeNullableFilter
}

input NestedEnumPhotoTypeNullableFilter @join__type(graph: PROFILING) {
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
}

input NestedEnumPhotoTypeNullableWithAggregatesFilter
  @join__type(graph: PROFILING) {
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: PhotoType
  _count: NestedIntNullableFilter
  _min: NestedEnumPhotoTypeNullableFilter
  _max: NestedEnumPhotoTypeNullableFilter
}

input NestedEnumProfileTypeFilter @join__type(graph: PROFILING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input NestedEnumProfileTypeNullableFilter @join__type(graph: MANAGING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
}

input NestedEnumProfileTypeNullableWithAggregatesFilter
  @join__type(graph: MANAGING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntNullableFilter
  _min: NestedEnumProfileTypeNullableFilter
  _max: NestedEnumProfileTypeNullableFilter
}

input NestedEnumProfileTypeWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: ProfileType
  _count: NestedIntFilter
  _min: NestedEnumProfileTypeFilter
  _max: NestedEnumProfileTypeFilter
}

input NestedEnumSecureDataTypeFilter @join__type(graph: PROFILING) {
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
}

input NestedEnumSecureDataTypeWithAggregatesFilter
  @join__type(graph: PROFILING) {
  equals: SecureDataType
  in: [SecureDataType!]
  notIn: [SecureDataType!]
  not: SecureDataType
  _count: NestedIntFilter
  _min: NestedEnumSecureDataTypeFilter
  _max: NestedEnumSecureDataTypeFilter
}

input NestedEnumTagTypeFilter @join__type(graph: PROFILING) {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: TagType
}

input NestedEnumTagTypeWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: TagType
  _count: NestedIntFilter
  _min: NestedEnumTagTypeFilter
  _max: NestedEnumTagTypeFilter
}

input NestedEnumTypeOfDocumentFilter @join__type(graph: PROFILING) {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
}

input NestedEnumTypeOfDocumentWithAggregatesFilter
  @join__type(graph: PROFILING) {
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: TypeOfDocument
  _count: NestedIntFilter
  _min: NestedEnumTypeOfDocumentFilter
  _max: NestedEnumTypeOfDocumentFilter
}

input NestedFloatFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatNullableFilter @join__type(graph: PROFILING) {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedIntFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedStringFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

union NotificationFriendRequestStatusResponse @join__type(graph: PROFILING) =
    ErrorProfiling
  | RejectedFriendsResponse
  | FriendRequest
  | Relationship

type NotificationResponse @join__type(graph: PROFILING) {
  friendRequestNotifications: [FriendRequest!]
}

type Notifications @join__type(graph: PROFILING) {
  id: ID!
  Profile: Profile!
  profileId: String!
  FriendRequests(
    where: FriendRequestWhereInput
    orderBy: [FriendRequestOrderByWithRelationInput!]
    cursor: FriendRequestWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FriendRequestScalarFieldEnum!]
  ): [FriendRequest!]!
}

input NotificationsCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
}

input NotificationsCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
}

input NotificationsCreateNestedManyWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  create: NotificationsCreateWithoutFriendRequestsInput
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  connect: [NotificationsWhereUniqueInput!]
}

input NotificationsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: NotificationsCreateWithoutProfileInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  connect: NotificationsWhereUniqueInput
}

input NotificationsCreateOrConnectWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  where: NotificationsWhereUniqueInput!
  create: NotificationsCreateWithoutFriendRequestsInput!
}

input NotificationsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: NotificationsWhereUniqueInput!
  create: NotificationsCreateWithoutProfileInput!
}

input NotificationsCreateWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutNotificationsInput!
}

input NotificationsCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  FriendRequests: FriendRequestCreateNestedManyWithoutNotificationsInput
}

input NotificationsListRelationFilter @join__type(graph: PROFILING) {
  every: NotificationsWhereInput
  some: NotificationsWhereInput
  none: NotificationsWhereInput
}

input NotificationsMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
}

input NotificationsOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input NotificationsOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  _count: NotificationsCountOrderByAggregateInput
  _max: NotificationsMaxOrderByAggregateInput
  _min: NotificationsMinOrderByAggregateInput
}

input NotificationsOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  FriendRequests: FriendRequestOrderByRelationAggregateInput
}

input NotificationsRelationFilter @join__type(graph: PROFILING) {
  is: NotificationsWhereInput
  isNot: NotificationsWhereInput
}

enum NotificationsScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
}

input NotificationsScalarWhereInput @join__type(graph: PROFILING) {
  AND: [NotificationsScalarWhereInput!]
  OR: [NotificationsScalarWhereInput!]
  NOT: [NotificationsScalarWhereInput!]
  id: StringFilter
  profileId: StringFilter
}

input NotificationsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [NotificationsScalarWhereWithAggregatesInput!]
  OR: [NotificationsScalarWhereWithAggregatesInput!]
  NOT: [NotificationsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
}

type NotificationStatus @join__type(graph: PROFILING) {
  id: ID!
  FriendRequest: FriendRequest
  isAccepted: Boolean!
  isChecked: Boolean!
  isAnswered: Boolean!
  isCanceled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NotificationStatusCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusCreateInput @join__type(graph: PROFILING) {
  id: String
  FriendRequest: FriendRequestCreateNestedOneWithoutNotificationStatusInput
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationStatusCreateManyInput @join__type(graph: PROFILING) {
  id: String
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationStatusCreateNestedOneWithoutFriendRequestInput
  @join__type(graph: PROFILING) {
  create: NotificationStatusCreateWithoutFriendRequestInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  connect: NotificationStatusWhereUniqueInput
}

input NotificationStatusCreateOrConnectWithoutFriendRequestInput
  @join__type(graph: PROFILING) {
  where: NotificationStatusWhereUniqueInput!
  create: NotificationStatusCreateWithoutFriendRequestInput!
}

input NotificationStatusCreateWithoutFriendRequestInput
  @join__type(graph: PROFILING) {
  id: String
  isAccepted: Boolean
  isChecked: Boolean
  isAnswered: Boolean
  isCanceled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationStatusMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: NotificationStatusCountOrderByAggregateInput
  _max: NotificationStatusMaxOrderByAggregateInput
  _min: NotificationStatusMinOrderByAggregateInput
}

input NotificationStatusOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  FriendRequest: FriendRequestOrderByWithRelationInput
  isAccepted: SortOrder
  isChecked: SortOrder
  isAnswered: SortOrder
  isCanceled: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NotificationStatusRelationFilter @join__type(graph: PROFILING) {
  is: NotificationStatusWhereInput
  isNot: NotificationStatusWhereInput
}

enum NotificationStatusScalarFieldEnum @join__type(graph: PROFILING) {
  id
  isAccepted
  isChecked
  isAnswered
  isCanceled
  createdAt
  updatedAt
}

input NotificationStatusScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [NotificationStatusScalarWhereWithAggregatesInput!]
  OR: [NotificationStatusScalarWhereWithAggregatesInput!]
  NOT: [NotificationStatusScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isAccepted: BoolWithAggregatesFilter
  isChecked: BoolWithAggregatesFilter
  isAnswered: BoolWithAggregatesFilter
  isCanceled: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input NotificationStatusUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  FriendRequest: FriendRequestUpdateOneWithoutNotificationStatusNestedInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpdateOneRequiredWithoutFriendRequestNestedInput
  @join__type(graph: PROFILING) {
  create: NotificationStatusCreateWithoutFriendRequestInput
  connectOrCreate: NotificationStatusCreateOrConnectWithoutFriendRequestInput
  upsert: NotificationStatusUpsertWithoutFriendRequestInput
  connect: NotificationStatusWhereUniqueInput
  update: NotificationStatusUpdateWithoutFriendRequestInput
}

input NotificationStatusUpdateWithoutFriendRequestInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isAccepted: BoolFieldUpdateOperationsInput
  isChecked: BoolFieldUpdateOperationsInput
  isAnswered: BoolFieldUpdateOperationsInput
  isCanceled: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationStatusUpsertWithoutFriendRequestInput
  @join__type(graph: PROFILING) {
  update: NotificationStatusUpdateWithoutFriendRequestInput!
  create: NotificationStatusCreateWithoutFriendRequestInput!
}

input NotificationStatusWhereInput @join__type(graph: PROFILING) {
  AND: [NotificationStatusWhereInput!]
  OR: [NotificationStatusWhereInput!]
  NOT: [NotificationStatusWhereInput!]
  id: StringFilter
  FriendRequest: FriendRequestWhereInput
  isAccepted: BoolFilter
  isChecked: BoolFilter
  isAnswered: BoolFilter
  isCanceled: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NotificationStatusWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input NotificationsUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
}

input NotificationsUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
}

input NotificationsUpdateManyWithoutFriendRequestsNestedInput
  @join__type(graph: PROFILING) {
  create: NotificationsCreateWithoutFriendRequestsInput
  connectOrCreate: [NotificationsCreateOrConnectWithoutFriendRequestsInput!]
  upsert: [NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput!]
  set: [NotificationsWhereUniqueInput!]
  disconnect: [NotificationsWhereUniqueInput!]
  delete: [NotificationsWhereUniqueInput!]
  connect: [NotificationsWhereUniqueInput!]
  update: [NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput!]
  updateMany: [NotificationsUpdateManyWithWhereWithoutFriendRequestsInput!]
  deleteMany: [NotificationsScalarWhereInput!]
}

input NotificationsUpdateManyWithWhereWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  where: NotificationsScalarWhereInput!
  data: NotificationsUpdateManyMutationInput!
}

input NotificationsUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: NotificationsCreateWithoutProfileInput
  connectOrCreate: NotificationsCreateOrConnectWithoutProfileInput
  upsert: NotificationsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: NotificationsWhereUniqueInput
  update: NotificationsUpdateWithoutProfileInput
}

input NotificationsUpdateWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationsUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  FriendRequests: FriendRequestUpdateManyWithoutNotificationsNestedInput
}

input NotificationsUpdateWithWhereUniqueWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  where: NotificationsWhereUniqueInput!
  data: NotificationsUpdateWithoutFriendRequestsInput!
}

input NotificationsUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: NotificationsUpdateWithoutProfileInput!
  create: NotificationsCreateWithoutProfileInput!
}

input NotificationsUpsertWithWhereUniqueWithoutFriendRequestsInput
  @join__type(graph: PROFILING) {
  where: NotificationsWhereUniqueInput!
  update: NotificationsUpdateWithoutFriendRequestsInput!
  create: NotificationsCreateWithoutFriendRequestsInput!
}

input NotificationsWhereInput @join__type(graph: PROFILING) {
  AND: [NotificationsWhereInput!]
  OR: [NotificationsWhereInput!]
  NOT: [NotificationsWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  FriendRequests: FriendRequestListRelationFilter
}

input NotificationsWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
}

input NullableBoolFieldUpdateOperationsInput @join__type(graph: PROFILING) {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: DateTime
}

input NullableEnumAppTypeFieldUpdateOperationsInput
  @join__type(graph: MANAGING) {
  set: AppType
}

input NullableEnumPhotoTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING) {
  set: PhotoType
}

input NullableEnumProfileTypeFieldUpdateOperationsInput
  @join__type(graph: MANAGING) {
  set: ProfileType
}

input NullableIntFieldUpdateOperationsInput @join__type(graph: PROFILING) {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: String
}

type Password @join__type(graph: PROFILING) {
  id: ID!
  password: String!
  AuthenticationProvider: AuthenticationProvider!
  authenitcationProviderId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PasswordCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordCreateInput @join__type(graph: PROFILING) {
  id: String
  password: String!
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutPasswordInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordCreateManyInput @join__type(graph: PROFILING) {
  id: String
  password: String!
  authenitcationProviderId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  connect: PasswordWhereUniqueInput
}

input PasswordCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: PasswordWhereUniqueInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: String
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  password: SortOrder
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PasswordCountOrderByAggregateInput
  _max: PasswordMaxOrderByAggregateInput
  _min: PasswordMinOrderByAggregateInput
}

input PasswordOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  password: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordRelationFilter @join__type(graph: PROFILING) {
  is: PasswordWhereInput
  isNot: PasswordWhereInput
}

enum PasswordScalarFieldEnum @join__type(graph: PROFILING) {
  id
  password
  authenitcationProviderId
  createdAt
  updatedAt
}

input PasswordScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PasswordScalarWhereWithAggregatesInput!]
  OR: [PasswordScalarWhereWithAggregatesInput!]
  NOT: [PasswordScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  authenitcationProviderId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PasswordUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneRequiredWithoutPasswordNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpdateOneWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING) {
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  upsert: PasswordUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: PasswordWhereUniqueInput
  update: PasswordUpdateWithoutAuthenticationProviderInput
}

input PasswordUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  update: PasswordUpdateWithoutAuthenticationProviderInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordWhereInput @join__type(graph: PROFILING) {
  AND: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  id: StringFilter
  password: StringFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenitcationProviderId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PasswordWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  authenitcationProviderId: String
}

input PathAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  latitude: SortOrder
  longitude: SortOrder
}

input PathCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathCreateInput @join__type(graph: PROFILING) {
  id: String
  TonightPath: TonightPathCreateNestedOneWithoutPathInput
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathCreateManyInput @join__type(graph: PROFILING) {
  id: String
  TonightPathId: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathCreateManyTonightPathInput @join__type(graph: PROFILING) {
  id: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathCreateManyTonightPathInputEnvelope @join__type(graph: PROFILING) {
  data: [PathCreateManyTonightPathInput!]!
  skipDuplicates: Boolean
}

input PathCreateNestedManyWithoutTonightPathInput
  @join__type(graph: PROFILING) {
  create: PathCreateWithoutTonightPathInput
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  createMany: PathCreateManyTonightPathInputEnvelope
  connect: [PathWhereUniqueInput!]
}

input PathCreateOrConnectWithoutTonightPathInput @join__type(graph: PROFILING) {
  where: PathWhereUniqueInput!
  create: PathCreateWithoutTonightPathInput!
}

input PathCreateWithoutTonightPathInput @join__type(graph: PROFILING) {
  id: String
  latitude: Float!
  longitude: Float!
  createdAt: DateTime
}

input PathListRelationFilter @join__type(graph: PROFILING) {
  every: PathWhereInput
  some: PathWhereInput
  none: PathWhereInput
}

input PathMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

input PathOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input PathOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
  _count: PathCountOrderByAggregateInput
  _avg: PathAvgOrderByAggregateInput
  _max: PathMaxOrderByAggregateInput
  _min: PathMinOrderByAggregateInput
  _sum: PathSumOrderByAggregateInput
}

input PathOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  TonightPath: TonightPathOrderByWithRelationInput
  TonightPathId: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  createdAt: SortOrder
}

enum PathScalarFieldEnum @join__type(graph: PROFILING) {
  id
  TonightPathId
  latitude
  longitude
  createdAt
}

input PathScalarWhereInput @join__type(graph: PROFILING) {
  AND: [PathScalarWhereInput!]
  OR: [PathScalarWhereInput!]
  NOT: [PathScalarWhereInput!]
  id: StringFilter
  TonightPathId: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  createdAt: DateTimeFilter
}

input PathScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PathScalarWhereWithAggregatesInput!]
  OR: [PathScalarWhereWithAggregatesInput!]
  NOT: [PathScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  TonightPathId: StringNullableWithAggregatesFilter
  latitude: FloatWithAggregatesFilter
  longitude: FloatWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input PathSumOrderByAggregateInput @join__type(graph: PROFILING) {
  latitude: SortOrder
  longitude: SortOrder
}

input PathUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  TonightPath: TonightPathUpdateOneWithoutPathNestedInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateManyWithoutTonightPathNestedInput
  @join__type(graph: PROFILING) {
  create: PathCreateWithoutTonightPathInput
  connectOrCreate: [PathCreateOrConnectWithoutTonightPathInput!]
  upsert: [PathUpsertWithWhereUniqueWithoutTonightPathInput!]
  createMany: PathCreateManyTonightPathInputEnvelope
  set: [PathWhereUniqueInput!]
  disconnect: [PathWhereUniqueInput!]
  delete: [PathWhereUniqueInput!]
  connect: [PathWhereUniqueInput!]
  update: [PathUpdateWithWhereUniqueWithoutTonightPathInput!]
  updateMany: [PathUpdateManyWithWhereWithoutTonightPathInput!]
  deleteMany: [PathScalarWhereInput!]
}

input PathUpdateManyWithWhereWithoutTonightPathInput
  @join__type(graph: PROFILING) {
  where: PathScalarWhereInput!
  data: PathUpdateManyMutationInput!
}

input PathUpdateWithoutTonightPathInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input PathUpdateWithWhereUniqueWithoutTonightPathInput
  @join__type(graph: PROFILING) {
  where: PathWhereUniqueInput!
  data: PathUpdateWithoutTonightPathInput!
}

input PathUpsertWithWhereUniqueWithoutTonightPathInput
  @join__type(graph: PROFILING) {
  where: PathWhereUniqueInput!
  update: PathUpdateWithoutTonightPathInput!
  create: PathCreateWithoutTonightPathInput!
}

input PathWhereInput @join__type(graph: PROFILING) {
  AND: [PathWhereInput!]
  OR: [PathWhereInput!]
  NOT: [PathWhereInput!]
  id: StringFilter
  TonightPath: TonightPathWhereInput
  TonightPathId: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  createdAt: DateTimeFilter
}

input PathWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

enum Permission @join__type(graph: PROFILING) {
  OWNER
  ADMINISTATOR
  GENERAL
}

type Personal @join__type(graph: PROFILING) {
  id: ID!
  Profile: Profile!
  profileId: String!
  PersonalStats: PersonalStats
  personalStatsId: String
  LiveOutPersonal: LiveOutPersonal
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  personalStatsId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalCreateNestedOneWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutProfileInput @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalCreateWithoutLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalCreateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  personalStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PersonalCountOrderByAggregateInput
  _max: PersonalMaxOrderByAggregateInput
  _min: PersonalMinOrderByAggregateInput
}

input PersonalOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalRelationFilter @join__type(graph: PROFILING) {
  is: PersonalWhereInput
  isNot: PersonalWhereInput
}

enum PersonalScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  personalStatsId
  createdAt
  updatedAt
}

input PersonalScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PersonalScalarWhereWithAggregatesInput!]
  OR: [PersonalScalarWhereWithAggregatesInput!]
  NOT: [PersonalScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type PersonalStats @join__type(graph: PROFILING) {
  id: ID!
  Personal: Personal
  joinedVenueHistory(
    where: JoinedOutWhereInput
    orderBy: [JoinedOutOrderByWithRelationInput!]
    cursor: JoinedOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [JoinedOutScalarFieldEnum!]
  ): [JoinedOut!]!
  totaledVenueHistory(
    where: TotaledOutWhereInput
    orderBy: [TotaledOutOrderByWithRelationInput!]
    cursor: TotaledOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TotaledOutScalarFieldEnum!]
  ): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalStatsCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsCreateInput @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutPersonalStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsCreateManyInput @join__type(graph: PROFILING) {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput!
}

input PersonalStatsCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING) {
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput!
}

input PersonalStatsCreateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutPersonalStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsCreateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: String
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutPersonalStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsCreateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: String
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutPersonalStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalStatsMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PersonalStatsCountOrderByAggregateInput
  _max: PersonalStatsMaxOrderByAggregateInput
  _min: PersonalStatsMinOrderByAggregateInput
}

input PersonalStatsOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Personal: PersonalOrderByWithRelationInput
  joinedVenueHistory: JoinedOutOrderByRelationAggregateInput
  totaledVenueHistory: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsRelationFilter @join__type(graph: PROFILING) {
  is: PersonalStatsWhereInput
  isNot: PersonalStatsWhereInput
}

enum PersonalStatsScalarFieldEnum @join__type(graph: PROFILING) {
  id
  createdAt
  updatedAt
}

input PersonalStatsScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [PersonalStatsScalarWhereWithAggregatesInput!]
  OR: [PersonalStatsScalarWhereWithAggregatesInput!]
  NOT: [PersonalStatsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PersonalStatsUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutPersonalStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutPersonalStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  upsert: PersonalStatsUpsertWithoutJoinedVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutJoinedVenueHistoryInput
}

input PersonalStatsUpdateOneWithoutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  upsert: PersonalStatsUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutPersonalInput
}

input PersonalStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  @join__type(graph: PROFILING) {
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  upsert: PersonalStatsUpsertWithoutTotaledVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutTotaledVenueHistoryInput
}

input PersonalStatsUpdateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutPersonalStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutPersonalStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutPersonalStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpdateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsNestedInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutPersonalStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalStatsUpsertWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  update: PersonalStatsUpdateWithoutJoinedVenueHistoryInput!
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput!
}

input PersonalStatsUpsertWithoutPersonalInput @join__type(graph: PROFILING) {
  update: PersonalStatsUpdateWithoutPersonalInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsUpsertWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  update: PersonalStatsUpdateWithoutTotaledVenueHistoryInput!
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput!
}

input PersonalStatsWhereInput @join__type(graph: PROFILING) {
  AND: [PersonalStatsWhereInput!]
  OR: [PersonalStatsWhereInput!]
  NOT: [PersonalStatsWhereInput!]
  id: StringFilter
  Personal: PersonalWhereInput
  joinedVenueHistory: JoinedOutListRelationFilter
  totaledVenueHistory: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PersonalStatsWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input PersonalUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateOneRequiredWithoutLiveOutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  upsert: PersonalUpsertWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutLiveOutPersonalInput
}

input PersonalUpdateOneWithoutPersonalStatsNestedInput
  @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  upsert: PersonalUpsertWithoutPersonalStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutPersonalStatsInput
}

input PersonalUpdateOneWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  upsert: PersonalUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutProfileInput
}

input PersonalUpdateWithoutLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalNestedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PersonalUpsertWithoutLiveOutPersonalInput @join__type(graph: PROFILING) {
  update: PersonalUpdateWithoutLiveOutPersonalInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalUpsertWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  update: PersonalUpdateWithoutPersonalStatsInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: PersonalUpdateWithoutProfileInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalWhereInput @join__type(graph: PROFILING) {
  AND: [PersonalWhereInput!]
  OR: [PersonalWhereInput!]
  NOT: [PersonalWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PersonalWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
  personalStatsId: String
}

type Phone @join__type(graph: PROFILING) {
  id: ID!
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  AuthenticationProvider(
    where: AuthenticationProviderWhereInput
    orderBy: [AuthenticationProviderOrderByWithRelationInput!]
    cursor: AuthenticationProviderWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AuthenticationProviderScalarFieldEnum!]
  ): [AuthenticationProvider!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhoneAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input PhoneCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneCreateInput @join__type(graph: PROFILING) {
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  AuthenticationProvider: AuthenticationProviderCreateNestedManyWithoutPhonesInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  create: PhoneCreateWithoutAuthenticationProviderInput
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [PhoneWhereUniqueInput!]
}

input PhoneCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: PhoneWhereUniqueInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneInput @join__type(graph: PROFILING) {
  """
  Accepted phone formats: 5193334444 or +15193334444
  """
  number: String
  countryCode: String
  countryCallingCode: String
  completeNumber: String
}

input PhoneListRelationFilter @join__type(graph: PROFILING) {
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input PhoneMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input PhoneOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PhoneCountOrderByAggregateInput
  _avg: PhoneAvgOrderByAggregateInput
  _max: PhoneMaxOrderByAggregateInput
  _min: PhoneMinOrderByAggregateInput
  _sum: PhoneSumOrderByAggregateInput
}

input PhoneOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  number: SortOrder
  completeNumber: SortOrder
  countryCode: SortOrder
  canUseAsRecovery: SortOrder
  countryCallingCode: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum PhoneScalarFieldEnum @join__type(graph: PROFILING) {
  id
  number
  completeNumber
  countryCode
  canUseAsRecovery
  countryCallingCode
  createdAt
  updatedAt
}

input PhoneScalarWhereInput @join__type(graph: PROFILING) {
  AND: [PhoneScalarWhereInput!]
  OR: [PhoneScalarWhereInput!]
  NOT: [PhoneScalarWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhoneScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PhoneScalarWhereWithAggregatesInput!]
  OR: [PhoneScalarWhereWithAggregatesInput!]
  NOT: [PhoneScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  number: StringWithAggregatesFilter
  completeNumber: StringNullableWithAggregatesFilter
  countryCode: StringNullableWithAggregatesFilter
  canUseAsRecovery: BoolNullableWithAggregatesFilter
  countryCallingCode: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PhoneSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input PhoneUpdateInput @join__type(graph: PROFILING) {
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  AuthenticationProvider: AuthenticationProviderUpdateManyWithoutPhonesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyMutationInput @join__type(graph: PROFILING) {
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyWithoutAuthenticationProviderNestedInput
  @join__type(graph: PROFILING) {
  create: PhoneCreateWithoutAuthenticationProviderInput
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [PhoneWhereUniqueInput!]
  disconnect: [PhoneWhereUniqueInput!]
  delete: [PhoneWhereUniqueInput!]
  connect: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [PhoneScalarWhereInput!]
}

input PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: PhoneScalarWhereInput!
  data: PhoneUpdateManyMutationInput!
}

input PhoneUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateWithoutAuthenticationProviderInput!
}

input PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING) {
  where: PhoneWhereUniqueInput!
  update: PhoneUpdateWithoutAuthenticationProviderInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneWhereInput @join__type(graph: PROFILING) {
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhoneWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Photo @join__type(graph: PROFILING) {
  id: ID!
  url: String!
  active: Boolean!
  blurhash: String
  ratio: String
  type: String
  position: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhotoAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  width: SortOrder
  height: SortOrder
  position: SortOrder
}

input PhotoCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoCreateInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  Story: StoryCreateNestedOneWithoutPhotosInput
  Group: GroupCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyGroupInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyGroupInputEnvelope @join__type(graph: PROFILING) {
  data: [PhotoCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  groupId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyProfileInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  storyId: String
  groupId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyProfileInputEnvelope @join__type(graph: PROFILING) {
  data: [PhotoCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateManyStoryInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  groupId: String
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyStoryInputEnvelope @join__type(graph: PROFILING) {
  data: [PhotoCreateManyStoryInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutGroupInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutGroupInput
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutProfileInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutProfileInput
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutStoryInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutStoryInput
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  createMany: PhotoCreateManyStoryInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateOrConnectWithoutGroupInput @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoCreateOrConnectWithoutStoryInput @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoCreateWithoutGroupInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  Story: StoryCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  Story: StoryCreateNestedOneWithoutPhotosInput
  Group: GroupCreateNestedOneWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateWithoutStoryInput @join__type(graph: PROFILING) {
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  position: Int
  active: Boolean
  Group: GroupCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoListRelationFilter @join__type(graph: PROFILING) {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input PhotoMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PhotoOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input PhotoOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  storyId: SortOrder
  groupId: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PhotoCountOrderByAggregateInput
  _avg: PhotoAvgOrderByAggregateInput
  _max: PhotoMaxOrderByAggregateInput
  _min: PhotoMinOrderByAggregateInput
  _sum: PhotoSumOrderByAggregateInput
}

input PhotoOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  url: SortOrder
  width: SortOrder
  height: SortOrder
  blurhash: SortOrder
  ratio: SortOrder
  type: SortOrder
  position: SortOrder
  active: SortOrder
  Story: StoryOrderByWithRelationInput
  storyId: SortOrder
  Group: GroupOrderByWithRelationInput
  groupId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum PhotoScalarFieldEnum @join__type(graph: PROFILING) {
  id
  url
  width
  height
  blurhash
  ratio
  type
  position
  active
  storyId
  groupId
  profileId
  createdAt
  updatedAt
}

input PhotoScalarWhereInput @join__type(graph: PROFILING) {
  AND: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  NOT: [PhotoScalarWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  position: IntNullableFilter
  active: BoolFilter
  storyId: StringNullableFilter
  groupId: StringNullableFilter
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PhotoScalarWhereWithAggregatesInput!]
  OR: [PhotoScalarWhereWithAggregatesInput!]
  NOT: [PhotoScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  url: StringWithAggregatesFilter
  width: IntNullableWithAggregatesFilter
  height: IntNullableWithAggregatesFilter
  blurhash: StringNullableWithAggregatesFilter
  ratio: StringNullableWithAggregatesFilter
  type: EnumPhotoTypeNullableWithAggregatesFilter
  position: IntNullableWithAggregatesFilter
  active: BoolWithAggregatesFilter
  storyId: StringNullableWithAggregatesFilter
  groupId: StringNullableWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PhotoSumOrderByAggregateInput @join__type(graph: PROFILING) {
  width: SortOrder
  height: SortOrder
  position: SortOrder
}

enum PhotoType @join__type(graph: PROFILING) {
  BANNER
  LOGO
}

input PhotoUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateManyWithoutGroupNestedInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutGroupInput
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutProfileInput
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutStoryNestedInput @join__type(graph: PROFILING) {
  create: PhotoCreateWithoutStoryInput
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutStoryInput!]
  createMany: PhotoCreateManyStoryInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutStoryInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithWhereWithoutGroupInput @join__type(graph: PROFILING) {
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutStoryInput @join__type(graph: PROFILING) {
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateWithoutGroupInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  Story: StoryUpdateOneWithoutPhotosNestedInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateWithoutStoryInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  position: NullableIntFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosNestedInput
  Profile: ProfileUpdateOneWithoutPhotosNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutGroupInput!
}

input PhotoUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutProfileInput!
}

input PhotoUpdateWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutStoryInput!
}

input PhotoUpsertWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutGroupInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutProfileInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoUpsertWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING) {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutStoryInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoWhereInput @join__type(graph: PROFILING) {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  position: IntNullableFilter
  active: BoolFilter
  Story: StoryWhereInput
  storyId: StringNullableFilter
  Group: GroupWhereInput
  groupId: StringNullableFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

type PlaceType @join__type(graph: PROFILING) {
  name: String!
  isoCode: String!
  coords: Coords!
}

type PluseCode @join__type(graph: PROFILING) {
  id: ID!
  globalCode: String!
  compoundCode: String
  Location: Location
}

input PluseCodeCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeCreateInput @join__type(graph: PROFILING) {
  id: String
  globalCode: String!
  compoundCode: String
  Location: LocationCreateNestedOneWithoutPlusCodeInput
}

input PluseCodeCreateManyInput @join__type(graph: PROFILING) {
  id: String
  globalCode: String!
  compoundCode: String
}

input PluseCodeCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING) {
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  connect: PluseCodeWhereUniqueInput
}

input PluseCodeCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING) {
  where: PluseCodeWhereUniqueInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeCreateWithoutLocationInput @join__type(graph: PROFILING) {
  id: String
  globalCode: String!
  compoundCode: String
}

input PluseCodeMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
}

input PluseCodeOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
  _count: PluseCodeCountOrderByAggregateInput
  _max: PluseCodeMaxOrderByAggregateInput
  _min: PluseCodeMinOrderByAggregateInput
}

input PluseCodeOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
  Location: LocationOrderByWithRelationInput
}

input PluseCodeRelationFilter @join__type(graph: PROFILING) {
  is: PluseCodeWhereInput
  isNot: PluseCodeWhereInput
}

enum PluseCodeScalarFieldEnum @join__type(graph: PROFILING) {
  id
  globalCode
  compoundCode
}

input PluseCodeScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [PluseCodeScalarWhereWithAggregatesInput!]
  OR: [PluseCodeScalarWhereWithAggregatesInput!]
  NOT: [PluseCodeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  globalCode: StringWithAggregatesFilter
  compoundCode: StringNullableWithAggregatesFilter
}

input PluseCodeUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutPlusCodeNestedInput
}

input PluseCodeUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
}

input PluseCodeUpdateOneWithoutLocationNestedInput
  @join__type(graph: PROFILING) {
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  upsert: PluseCodeUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: PluseCodeWhereUniqueInput
  update: PluseCodeUpdateWithoutLocationInput
}

input PluseCodeUpdateWithoutLocationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
}

input PluseCodeUpsertWithoutLocationInput @join__type(graph: PROFILING) {
  update: PluseCodeUpdateWithoutLocationInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeWhereInput @join__type(graph: PROFILING) {
  AND: [PluseCodeWhereInput!]
  OR: [PluseCodeWhereInput!]
  NOT: [PluseCodeWhereInput!]
  id: StringFilter
  globalCode: StringFilter
  compoundCode: StringNullableFilter
  Location: LocationWhereInput
}

input PluseCodeWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input PopularSearchServiceCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
}

input PopularSearchServiceCreateInput @join__type(graph: PROFILING) {
  id: String
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceCreateManyInput @join__type(graph: PROFILING) {
  id: String
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceCreatepopularPersonalsInput
  @join__type(graph: PROFILING) {
  set: [Json!]!
}

input PopularSearchServiceCreatepopularVenuesInput
  @join__type(graph: PROFILING) {
  set: [Json!]!
}

input PopularSearchServiceMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input PopularSearchServiceMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
}

input PopularSearchServiceOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
  _count: PopularSearchServiceCountOrderByAggregateInput
  _max: PopularSearchServiceMaxOrderByAggregateInput
  _min: PopularSearchServiceMinOrderByAggregateInput
}

input PopularSearchServiceOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  popularVenues: SortOrder
  popularPersonals: SortOrder
}

enum PopularSearchServiceScalarFieldEnum @join__type(graph: PROFILING) {
  id
  popularVenues
  popularPersonals
}

input PopularSearchServiceScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  OR: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  NOT: [PopularSearchServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  popularVenues: JsonNullableListFilter
  popularPersonals: JsonNullableListFilter
}

input PopularSearchServiceUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  popularVenues: [Json!]
  popularPersonals: [Json!]
}

input PopularSearchServiceUpdatepopularPersonalsInput
  @join__type(graph: PROFILING) {
  set: [Json!]
  push: Json
}

input PopularSearchServiceUpdatepopularVenuesInput
  @join__type(graph: PROFILING) {
  set: [Json!]
  push: Json
}

input PopularSearchServiceWhereInput @join__type(graph: PROFILING) {
  AND: [PopularSearchServiceWhereInput!]
  OR: [PopularSearchServiceWhereInput!]
  NOT: [PopularSearchServiceWhereInput!]
  id: StringFilter
  popularVenues: JsonNullableListFilter
  popularPersonals: JsonNullableListFilter
}

input PopularSearchServiceWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

"""
Returns the Profile latest Privacy and Terms of Service documents to the client.
"""
type PrivacyAndTermsDocumentResponse @join__type(graph: PROFILING) {
  privacy: Document!
  termsofservice: Document!
}

type Profile
  @join__type(graph: MANAGING, key: "id", extension: true)
  @join__type(graph: PROFILING, key: "id") {
  id: String
    @join__field(graph: MANAGING, type: "String")
    @join__field(graph: PROFILING, type: "String!")
  bfsprofileid: String! @join__field(graph: PROFILING)
  photos: [Photo!]! @join__field(graph: PROFILING)
  tonightStory: Story @join__field(graph: PROFILING)
  Credentials: Credentials! @join__field(graph: PROFILING)
  Relationships: [Relationship!]! @join__field(graph: PROFILING)
  Personal: Personal @join__field(graph: PROFILING)
  Venue: Venue @join__field(graph: PROFILING)
  IdentifiableInformation: IdentifiableInformation
    @join__field(graph: PROFILING)
  DetailInformation: DetailInformation @join__field(graph: PROFILING)
  ProfileType: ProfileType! @join__field(graph: PROFILING)
  ThemeManager: ThemeManager @join__field(graph: PROFILING)
  createdAt: DateTime! @join__field(graph: PROFILING)
  updatedAt: DateTime! @join__field(graph: PROFILING)
}

input ProfileCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileCreateDeviceManagerInput @join__type(graph: PROFILING) {
  set: [String!]!
}

input ProfileCreateInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateManyInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutChatroomInput
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedManyWithoutGroupsInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutGroupsInput
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedOneWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutCredentialsInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutDetailInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutIdentifiableInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutNotificationsInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutPersonalInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutPhotosInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutProfileSearchesServiceInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutProfileSearchesServiceInput
  connectOrCreate: ProfileCreateOrConnectWithoutProfileSearchesServiceInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutRelationshipsInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutRelationshipsInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutSecuredDataKeysInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutSettingsInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutSettingsInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutStorysInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutStorysInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutThemeManagerInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutVenueInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOrConnectWithoutChatroomInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutCredentialsInput!
}

input ProfileCreateOrConnectWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutDetailInformationInput!
}

input ProfileCreateOrConnectWithoutGroupsInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutGroupsInput!
}

input ProfileCreateOrConnectWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutIdentifiableInformationInput!
}

input ProfileCreateOrConnectWithoutNotificationsInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutNotificationsInput!
}

input ProfileCreateOrConnectWithoutPersonalInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileCreateOrConnectWithoutPhotosInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileCreateOrConnectWithoutProfileSearchesServiceInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutProfileSearchesServiceInput!
}

input ProfileCreateOrConnectWithoutRelationshipsInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutRelationshipsInput!
}

input ProfileCreateOrConnectWithoutSecuredDataKeysInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutSecuredDataKeysInput!
}

input ProfileCreateOrConnectWithoutSettingsInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutSettingsInput!
}

input ProfileCreateOrConnectWithoutStorysInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutStorysInput!
}

input ProfileCreateOrConnectWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutThemeManagerInput!
}

input ProfileCreateOrConnectWithoutVenueInput @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileCreateWithoutChatroomInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutCredentialsInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutDetailInformationInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutGroupsInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutNotificationsInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutProfileSearchesServiceInput
  @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutRelationshipsInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutSecuredDataKeysInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutSettingsInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
}

input ProfileCreateWithoutStorysInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutThemeManagerInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutVenueInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
  DeviceManager: [String!]
  Personal: PersonalCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Notifications: NotificationsCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Storys: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Groups: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  SecuredDataKeys: SecuredDataKeysCreateNestedManyWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  ProfileType: ProfileType
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileInput
  createdAt: DateTime
  updatedAt: DateTime
  Chatroom: ChatroomCreateNestedManyWithoutProfilesInput
  Settings: SettingsCreateNestedOneWithoutProfileInput
}

input ProfileListRelationFilter @join__type(graph: PROFILING) {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input ProfileMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  bfsprofileid: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  bfsprofileid: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ProfileOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input ProfileOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ProfileCountOrderByAggregateInput
  _max: ProfileMaxOrderByAggregateInput
  _min: ProfileMinOrderByAggregateInput
}

input ProfileOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  Personal: PersonalOrderByWithRelationInput
  Venue: VenueOrderByWithRelationInput
  DetailInformation: DetailInformationOrderByWithRelationInput
  IdentifiableInformation: IdentifiableInformationOrderByWithRelationInput
  Notifications: NotificationsOrderByWithRelationInput
  photos: PhotoOrderByRelationAggregateInput
  Storys: StoryOrderByRelationAggregateInput
  Relationships: RelationshipOrderByRelationAggregateInput
  Groups: GroupOrderByRelationAggregateInput
  Credentials: CredentialsOrderByWithRelationInput
  SecuredDataKeys: SecuredDataKeysOrderByRelationAggregateInput
  ProfileSearchesService: ProfileSearchesServiceOrderByWithRelationInput
  ProfileType: SortOrder
  ThemeManager: ThemeManagerOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
  Chatroom: ChatroomOrderByRelationAggregateInput
  Settings: SettingsOrderByWithRelationInput
}

input ProfileRelationFilter @join__type(graph: PROFILING) {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

union ProfileResponseUnion @join__type(graph: PROFILING) =
    Profile
  | ErrorProfiling

enum ProfileScalarFieldEnum @join__type(graph: PROFILING) {
  id
  bfsprofileid
  DeviceManager
  ProfileType
  createdAt
  updatedAt
}

input ProfileScalarWhereInput @join__type(graph: PROFILING) {
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProfileScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [ProfileScalarWhereWithAggregatesInput!]
  OR: [ProfileScalarWhereWithAggregatesInput!]
  NOT: [ProfileScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  bfsprofileid: StringWithAggregatesFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ProfileSearchesServiceCountOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutProfileSearchesServiceInput!
  searches: [Json!]
}

input ProfileSearchesServiceCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  searches: [Json!]
}

input ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: ProfileSearchesServiceCreateWithoutProfileInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  connect: ProfileSearchesServiceWhereUniqueInput
}

input ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: ProfileSearchesServiceWhereUniqueInput!
  create: ProfileSearchesServiceCreateWithoutProfileInput!
}

input ProfileSearchesServiceCreatesearchesInput @join__type(graph: PROFILING) {
  set: [Json!]!
}

input ProfileSearchesServiceCreateWithoutProfileInput
  @join__type(graph: PROFILING) {
  id: String
  searches: [Json!]
}

input ProfileSearchesServiceMaxOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
}

input ProfileSearchesServiceMinOrderByAggregateInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
}

input ProfileSearchesServiceOrderByWithAggregationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  searches: SortOrder
  _count: ProfileSearchesServiceCountOrderByAggregateInput
  _max: ProfileSearchesServiceMaxOrderByAggregateInput
  _min: ProfileSearchesServiceMinOrderByAggregateInput
}

input ProfileSearchesServiceOrderByWithRelationInput
  @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceRelationFilter @join__type(graph: PROFILING) {
  is: ProfileSearchesServiceWhereInput
  isNot: ProfileSearchesServiceWhereInput
}

enum ProfileSearchesServiceScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  searches
}

input ProfileSearchesServiceScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  OR: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  NOT: [ProfileSearchesServiceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  searches: JsonNullableListFilter
}

input ProfileSearchesServiceUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutProfileSearchesServiceNestedInput
  searches: [Json!]
}

input ProfileSearchesServiceUpdateManyMutationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
}

input ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileSearchesServiceCreateWithoutProfileInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  upsert: ProfileSearchesServiceUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileSearchesServiceWhereUniqueInput
  update: ProfileSearchesServiceUpdateWithoutProfileInput
}

input ProfileSearchesServiceUpdatesearchesInput @join__type(graph: PROFILING) {
  set: [Json!]
  push: Json
}

input ProfileSearchesServiceUpdateWithoutProfileInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  searches: [Json!]
}

input ProfileSearchesServiceUpsertWithoutProfileInput
  @join__type(graph: PROFILING) {
  update: ProfileSearchesServiceUpdateWithoutProfileInput!
  create: ProfileSearchesServiceCreateWithoutProfileInput!
}

input ProfileSearchesServiceWhereInput @join__type(graph: PROFILING) {
  AND: [ProfileSearchesServiceWhereInput!]
  OR: [ProfileSearchesServiceWhereInput!]
  NOT: [ProfileSearchesServiceWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  searches: JsonNullableListFilter
}

input ProfileSearchesServiceWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
}

type ProfilesResponse @join__type(graph: PROFILING) {
  username: [Profile!]!
  phone: [Profile!]!
  email: [Profile!]!
}

type ProfileTheme @join__type(graph: PROFILING) {
  id: ID!
  Theme: Theme!
  themeId: String!
  themeManagerId: String
  isActive: Boolean!
  ThemeManager: ThemeManager!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProfileThemeCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeCreateInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  themeId: String!
  themeManagerId: String
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  themeManagerId: String
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeInputEnvelope @join__type(graph: PROFILING) {
  data: [ProfileThemeCreateManyThemeInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateManyThemeManagerInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  themeId: String!
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateManyThemeManagerInputEnvelope
  @join__type(graph: PROFILING) {
  data: [ProfileThemeCreateManyThemeManagerInput!]!
  skipDuplicates: Boolean
}

input ProfileThemeCreateNestedManyWithoutThemeInput
  @join__type(graph: PROFILING) {
  create: ProfileThemeCreateWithoutThemeInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  createMany: ProfileThemeCreateManyThemeInputEnvelope
  connect: [ProfileThemeWhereUniqueInput!]
}

input ProfileThemeCreateNestedManyWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  create: ProfileThemeCreateWithoutThemeManagerInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
  connect: [ProfileThemeWhereUniqueInput!]
}

input ProfileThemeCreateOrConnectWithoutThemeInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  create: ProfileThemeCreateWithoutThemeInput!
}

input ProfileThemeCreateOrConnectWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  create: ProfileThemeCreateWithoutThemeManagerInput!
}

input ProfileThemeCreateWithoutThemeInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  ThemeManager: ThemeManagerCreateNestedOneWithoutProfileThemeInput
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeCreateWithoutThemeManagerInput @join__type(graph: PROFILING) {
  id: String
  isActive: Boolean!
  Theme: ThemeCreateNestedOneWithoutProfileThemeInput!
  updatedAt: DateTime
  createdAt: DateTime
}

input ProfileThemeListRelationFilter @join__type(graph: PROFILING) {
  every: ProfileThemeWhereInput
  some: ProfileThemeWhereInput
  none: ProfileThemeWhereInput
}

input ProfileThemeMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ProfileThemeOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input ProfileThemeOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  isActive: SortOrder
  themeId: SortOrder
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  _count: ProfileThemeCountOrderByAggregateInput
  _max: ProfileThemeMaxOrderByAggregateInput
  _min: ProfileThemeMinOrderByAggregateInput
}

input ProfileThemeOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  isActive: SortOrder
  Theme: ThemeOrderByWithRelationInput
  themeId: SortOrder
  ThemeManager: ThemeManagerOrderByWithRelationInput
  themeManagerId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

enum ProfileThemeScalarFieldEnum @join__type(graph: PROFILING) {
  id
  isActive
  themeId
  themeManagerId
  updatedAt
  createdAt
}

input ProfileThemeScalarWhereInput @join__type(graph: PROFILING) {
  AND: [ProfileThemeScalarWhereInput!]
  OR: [ProfileThemeScalarWhereInput!]
  NOT: [ProfileThemeScalarWhereInput!]
  id: StringFilter
  isActive: BoolFilter
  themeId: StringFilter
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
}

input ProfileThemeScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [ProfileThemeScalarWhereWithAggregatesInput!]
  OR: [ProfileThemeScalarWhereWithAggregatesInput!]
  NOT: [ProfileThemeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  themeId: StringWithAggregatesFilter
  themeManagerId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input ProfileThemeUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileThemeCreateWithoutThemeManagerInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeManagerInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput!]
  createMany: ProfileThemeCreateManyThemeManagerInputEnvelope
  set: [ProfileThemeWhereUniqueInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  delete: [ProfileThemeWhereUniqueInput!]
  connect: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
}

input ProfileThemeUpdateManyWithoutThemeNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileThemeCreateWithoutThemeInput
  connectOrCreate: [ProfileThemeCreateOrConnectWithoutThemeInput!]
  upsert: [ProfileThemeUpsertWithWhereUniqueWithoutThemeInput!]
  createMany: ProfileThemeCreateManyThemeInputEnvelope
  set: [ProfileThemeWhereUniqueInput!]
  disconnect: [ProfileThemeWhereUniqueInput!]
  delete: [ProfileThemeWhereUniqueInput!]
  connect: [ProfileThemeWhereUniqueInput!]
  update: [ProfileThemeUpdateWithWhereUniqueWithoutThemeInput!]
  updateMany: [ProfileThemeUpdateManyWithWhereWithoutThemeInput!]
  deleteMany: [ProfileThemeScalarWhereInput!]
}

input ProfileThemeUpdateManyWithWhereWithoutThemeInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeScalarWhereInput!
  data: ProfileThemeUpdateManyMutationInput!
}

input ProfileThemeUpdateManyWithWhereWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeScalarWhereInput!
  data: ProfileThemeUpdateManyMutationInput!
}

input ProfileThemeUpdateWithoutThemeInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateWithoutThemeManagerInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  Theme: ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  data: ProfileThemeUpdateWithoutThemeInput!
}

input ProfileThemeUpdateWithWhereUniqueWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  data: ProfileThemeUpdateWithoutThemeManagerInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  update: ProfileThemeUpdateWithoutThemeInput!
  create: ProfileThemeCreateWithoutThemeInput!
}

input ProfileThemeUpsertWithWhereUniqueWithoutThemeManagerInput
  @join__type(graph: PROFILING) {
  where: ProfileThemeWhereUniqueInput!
  update: ProfileThemeUpdateWithoutThemeManagerInput!
  create: ProfileThemeCreateWithoutThemeManagerInput!
}

input ProfileThemeWhereInput @join__type(graph: PROFILING) {
  AND: [ProfileThemeWhereInput!]
  OR: [ProfileThemeWhereInput!]
  NOT: [ProfileThemeWhereInput!]
  id: StringFilter
  isActive: BoolFilter
  Theme: ThemeWhereInput
  themeId: StringFilter
  ThemeManager: ThemeManagerWhereInput
  themeManagerId: StringNullableFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
}

input ProfileThemeWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

enum ProfileType @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  PERSONAL
  VENUE
  GUEST
}

input ProfileUpdateDeviceManagerInput @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input ProfileUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProfileUpdateManyWithoutChatroomNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutChatroomInput
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutChatroomInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithoutGroupsNestedInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutGroupsInput
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupsInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutGroupsInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutGroupsInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutGroupsInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateManyWithWhereWithoutGroupsInput
  @join__type(graph: PROFILING) {
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateOneRequiredWithoutCredentialsNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutCredentialsInput
  connectOrCreate: ProfileCreateOrConnectWithoutCredentialsInput
  upsert: ProfileUpsertWithoutCredentialsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutCredentialsInput
}

input ProfileUpdateOneRequiredWithoutDetailInformationNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutDetailInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutDetailInformationInput
  upsert: ProfileUpsertWithoutDetailInformationInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutDetailInformationInput
}

input ProfileUpdateOneRequiredWithoutIdentifiableInformationNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutIdentifiableInformationInput
  connectOrCreate: ProfileCreateOrConnectWithoutIdentifiableInformationInput
  upsert: ProfileUpsertWithoutIdentifiableInformationInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutIdentifiableInformationInput
}

input ProfileUpdateOneRequiredWithoutNotificationsNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutNotificationsInput
  connectOrCreate: ProfileCreateOrConnectWithoutNotificationsInput
  upsert: ProfileUpsertWithoutNotificationsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutNotificationsInput
}

input ProfileUpdateOneRequiredWithoutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  upsert: ProfileUpsertWithoutPersonalInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPersonalInput
}

input ProfileUpdateOneRequiredWithoutProfileSearchesServiceNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutProfileSearchesServiceInput
  connectOrCreate: ProfileCreateOrConnectWithoutProfileSearchesServiceInput
  upsert: ProfileUpsertWithoutProfileSearchesServiceInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutProfileSearchesServiceInput
}

input ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutSecuredDataKeysInput
  connectOrCreate: ProfileCreateOrConnectWithoutSecuredDataKeysInput
  upsert: ProfileUpsertWithoutSecuredDataKeysInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutSecuredDataKeysInput
}

input ProfileUpdateOneRequiredWithoutSettingsNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutSettingsInput
  connectOrCreate: ProfileCreateOrConnectWithoutSettingsInput
  upsert: ProfileUpsertWithoutSettingsInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutSettingsInput
}

input ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutThemeManagerInput
  connectOrCreate: ProfileCreateOrConnectWithoutThemeManagerInput
  upsert: ProfileUpsertWithoutThemeManagerInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutThemeManagerInput
}

input ProfileUpdateOneRequiredWithoutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  upsert: ProfileUpsertWithoutVenueInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutVenueInput
}

input ProfileUpdateOneWithoutPhotosNestedInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  upsert: ProfileUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPhotosInput
}

input ProfileUpdateOneWithoutRelationshipsNestedInput
  @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutRelationshipsInput
  connectOrCreate: ProfileCreateOrConnectWithoutRelationshipsInput
  upsert: ProfileUpsertWithoutRelationshipsInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutRelationshipsInput
}

input ProfileUpdateOneWithoutStorysNestedInput @join__type(graph: PROFILING) {
  create: ProfileCreateWithoutStorysInput
  connectOrCreate: ProfileCreateOrConnectWithoutStorysInput
  upsert: ProfileUpsertWithoutStorysInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutStorysInput
}

input ProfileUpdateWithoutChatroomInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutCredentialsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutDetailInformationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutGroupsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutNotificationsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutPersonalInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutProfileSearchesServiceInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutRelationshipsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutSecuredDataKeysInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutSettingsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
}

input ProfileUpdateWithoutStorysInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutThemeManagerInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  Venue: VenueUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithoutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  DeviceManager: [String!]
  Personal: PersonalUpdateOneWithoutProfileNestedInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileNestedInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileNestedInput
  Notifications: NotificationsUpdateOneWithoutProfileNestedInput
  photos: PhotoUpdateManyWithoutProfileNestedInput
  Storys: StoryUpdateManyWithoutProfileNestedInput
  Relationships: RelationshipUpdateManyWithoutProfileNestedInput
  Groups: GroupUpdateManyWithoutProfileNestedInput
  Credentials: CredentialsUpdateOneWithoutProfileNestedInput
  SecuredDataKeys: SecuredDataKeysUpdateManyWithoutProfileNestedInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileNestedInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  ThemeManager: ThemeManagerUpdateOneWithoutProfileNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateManyWithoutProfilesNestedInput
  Settings: SettingsUpdateOneWithoutProfileNestedInput
}

input ProfileUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutChatroomInput!
}

input ProfileUpdateWithWhereUniqueWithoutGroupsInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutGroupsInput!
}

input ProfileUpsertWithoutCredentialsInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutCredentialsInput!
  create: ProfileCreateWithoutCredentialsInput!
}

input ProfileUpsertWithoutDetailInformationInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutDetailInformationInput!
  create: ProfileCreateWithoutDetailInformationInput!
}

input ProfileUpsertWithoutIdentifiableInformationInput
  @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutIdentifiableInformationInput!
  create: ProfileCreateWithoutIdentifiableInformationInput!
}

input ProfileUpsertWithoutNotificationsInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutNotificationsInput!
  create: ProfileCreateWithoutNotificationsInput!
}

input ProfileUpsertWithoutPersonalInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutPersonalInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileUpsertWithoutPhotosInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutPhotosInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileUpsertWithoutProfileSearchesServiceInput
  @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutProfileSearchesServiceInput!
  create: ProfileCreateWithoutProfileSearchesServiceInput!
}

input ProfileUpsertWithoutRelationshipsInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutRelationshipsInput!
  create: ProfileCreateWithoutRelationshipsInput!
}

input ProfileUpsertWithoutSecuredDataKeysInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutSecuredDataKeysInput!
  create: ProfileCreateWithoutSecuredDataKeysInput!
}

input ProfileUpsertWithoutSettingsInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutSettingsInput!
  create: ProfileCreateWithoutSettingsInput!
}

input ProfileUpsertWithoutStorysInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutStorysInput!
  create: ProfileCreateWithoutStorysInput!
}

input ProfileUpsertWithoutThemeManagerInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutThemeManagerInput!
  create: ProfileCreateWithoutThemeManagerInput!
}

input ProfileUpsertWithoutVenueInput @join__type(graph: PROFILING) {
  update: ProfileUpdateWithoutVenueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutChatroomInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileUpsertWithWhereUniqueWithoutGroupsInput
  @join__type(graph: PROFILING) {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutGroupsInput!
  create: ProfileCreateWithoutGroupsInput!
}

input ProfileWhereInput @join__type(graph: PROFILING) {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  Personal: PersonalWhereInput
  Venue: VenueWhereInput
  DetailInformation: DetailInformationWhereInput
  IdentifiableInformation: IdentifiableInformationWhereInput
  Notifications: NotificationsWhereInput
  photos: PhotoListRelationFilter
  Storys: StoryListRelationFilter
  Relationships: RelationshipListRelationFilter
  Groups: GroupListRelationFilter
  Credentials: CredentialsWhereInput
  SecuredDataKeys: SecuredDataKeysListRelationFilter
  ProfileSearchesService: ProfileSearchesServiceWhereInput
  ProfileType: EnumProfileTypeFilter
  ThemeManager: ThemeManagerWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Chatroom: ChatroomListRelationFilter
  Settings: SettingsWhereInput
}

input ProfileWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  bfsprofileid: String
}

type PushToken @join__type(graph: MANAGING) {
  id: ID!
  isExpired: Boolean!
  expoToken: String
  androidToken: String
  appleToken: String
  Device: Device
  receipts: [Json!]!
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenCountOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenCreateInput @join__type(graph: MANAGING) {
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  Device: DeviceCreateNestedOneWithoutPushTokenInput
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenCreateManyInput @join__type(graph: MANAGING) {
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenCreateNestedOneWithoutDeviceInput @join__type(graph: MANAGING) {
  create: PushTokenCreateWithoutDeviceInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  connect: PushTokenWhereUniqueInput
}

input PushTokenCreateOrConnectWithoutDeviceInput @join__type(graph: MANAGING) {
  where: PushTokenWhereUniqueInput!
  create: PushTokenCreateWithoutDeviceInput!
}

input PushTokenCreatereceiptsInput @join__type(graph: MANAGING) {
  set: [Json!]!
}

input PushTokenCreateWithoutDeviceInput @join__type(graph: MANAGING) {
  id: String
  isExpired: Boolean
  expoToken: String
  androidToken: String
  appleToken: String
  receipts: [Json!]
  createdAt: DateTime
  updatedAt: DateTime
}

input PushTokenMaxOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenMinOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenOrderByWithAggregationInput @join__type(graph: MANAGING) {
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: PushTokenCountOrderByAggregateInput
  _max: PushTokenMaxOrderByAggregateInput
  _min: PushTokenMinOrderByAggregateInput
}

input PushTokenOrderByWithRelationInput @join__type(graph: MANAGING) {
  id: SortOrder
  isExpired: SortOrder
  expoToken: SortOrder
  androidToken: SortOrder
  appleToken: SortOrder
  Device: DeviceOrderByWithRelationInput
  receipts: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PushTokenRelationFilter @join__type(graph: MANAGING) {
  is: PushTokenWhereInput
  isNot: PushTokenWhereInput
}

enum PushTokenScalarFieldEnum @join__type(graph: MANAGING) {
  id
  isExpired
  expoToken
  androidToken
  appleToken
  receipts
  createdAt
  updatedAt
}

input PushTokenScalarWhereWithAggregatesInput @join__type(graph: MANAGING) {
  AND: [PushTokenScalarWhereWithAggregatesInput!]
  OR: [PushTokenScalarWhereWithAggregatesInput!]
  NOT: [PushTokenScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  isExpired: BoolWithAggregatesFilter
  expoToken: StringNullableWithAggregatesFilter
  androidToken: StringNullableWithAggregatesFilter
  appleToken: StringNullableWithAggregatesFilter
  receipts: JsonNullableListFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input PushTokenUpdateInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  Device: DeviceUpdateOneWithoutPushTokenNestedInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpdateManyMutationInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpdateOneWithoutDeviceNestedInput @join__type(graph: MANAGING) {
  create: PushTokenCreateWithoutDeviceInput
  connectOrCreate: PushTokenCreateOrConnectWithoutDeviceInput
  upsert: PushTokenUpsertWithoutDeviceInput
  disconnect: Boolean
  delete: Boolean
  connect: PushTokenWhereUniqueInput
  update: PushTokenUpdateWithoutDeviceInput
}

input PushTokenUpdatereceiptsInput @join__type(graph: MANAGING) {
  set: [Json!]
  push: Json
}

input PushTokenUpdateWithoutDeviceInput @join__type(graph: MANAGING) {
  id: StringFieldUpdateOperationsInput
  isExpired: BoolFieldUpdateOperationsInput
  expoToken: NullableStringFieldUpdateOperationsInput
  androidToken: NullableStringFieldUpdateOperationsInput
  appleToken: NullableStringFieldUpdateOperationsInput
  receipts: [Json!]
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PushTokenUpsertWithoutDeviceInput @join__type(graph: MANAGING) {
  update: PushTokenUpdateWithoutDeviceInput!
  create: PushTokenCreateWithoutDeviceInput!
}

input PushTokenWhereInput @join__type(graph: MANAGING) {
  AND: [PushTokenWhereInput!]
  OR: [PushTokenWhereInput!]
  NOT: [PushTokenWhereInput!]
  id: StringFilter
  isExpired: BoolFilter
  expoToken: StringNullableFilter
  androidToken: StringNullableFilter
  appleToken: StringNullableFilter
  Device: DeviceWhereInput
  receipts: JsonNullableListFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PushTokenWhereUniqueInput @join__type(graph: MANAGING) {
  id: String
}

type Query @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  getADeviceManager: DeviceManagerDeviceProfilesResponseUnion!
    @join__field(graph: MANAGING)
  authorizedProfiles(
    where: AuthorizedProfilesWhereInput!
  ): AuthorizedProfilesResponseUnion @join__field(graph: PROFILING)
  checkUsername(username: String!): Boolean! @join__field(graph: PROFILING)
  privacyTermsDocuments: PrivacyAndTermsDocumentResponse!
    @join__field(graph: PROFILING)
  sendAuthenticatorDeviceOwnerCode: Boolean! @join__field(graph: PROFILING)
  loginPassword(username: String!, password: String!): Boolean!
    @join__field(graph: PROFILING)
  getNotifications: NotificationResponse! @join__field(graph: PROFILING)
  getRelationshipFriendRequestStatus(
    profileId: String!
  ): NotificationFriendRequestStatusResponse! @join__field(graph: PROFILING)
  getSecureFriendQRCodeData: String! @join__field(graph: PROFILING)
  getLiveVenueTotals(profileIdVenue: String): LiveVenueTotals!
    @join__field(graph: PROFILING)
  venues(
    where: VenueWhereInput
    orderBy: [VenueOrderByWithRelationInput!]
    cursor: VenueWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VenueScalarFieldEnum!]
  ): [Venue!]! @join__field(graph: PROFILING)
  venue(
    where: VenueWhereInput
    orderBy: [VenueOrderByWithRelationInput!]
    cursor: VenueWhereUniqueInput
    take: Int
    skip: Int
    distinct: [VenueScalarFieldEnum!]
  ): Venue @join__field(graph: PROFILING)
  profiles(
    where: ProfileWhereInput
    orderBy: [ProfileOrderByWithRelationInput!]
    cursor: ProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProfileScalarFieldEnum!]
  ): [Profile!]! @join__field(graph: PROFILING)
  profile(
    where: ProfileWhereInput
    orderBy: [ProfileOrderByWithRelationInput!]
    cursor: ProfileWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProfileScalarFieldEnum!]
  ): Profile @join__field(graph: PROFILING)
  H3IndexLatLng(cell: String!): [Float!]! @join__field(graph: PROFILING)
  H3IndexGrid(cell: String!, ringSize: Int!): [String!]!
    @join__field(graph: PROFILING)
  venuesNearby(
    latitude: Float!
    longitude: Float!
    countryIsoCode: String!
    stateIsoCode: String!
    kRing: Int
  ): VenuesNearbyResponse! @join__field(graph: PROFILING)
  getAllCountries: [CountryResponseObject!]! @join__field(graph: PROFILING)
  getAllStatesByCountry(countryIsoCode: String!): [StateResponseObject!]!
    @join__field(graph: PROFILING)
  getAllCitiesByState(
    countryIsoCode: String!
    stateIsoCode: String!
  ): [CityResponseObject!]! @join__field(graph: PROFILING)
  exploreSearch(search: String!): ExploreResponse!
    @join__field(graph: PROFILING)
  emojimoods(
    where: EmojimoodWhereInput
    orderBy: [EmojimoodOrderByWithRelationInput!]
    cursor: EmojimoodWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EmojimoodScalarFieldEnum!]
  ): [Emojimood!]! @join__field(graph: PROFILING)
  emojimood(where: EmojimoodWhereUniqueInput!): Emojimood
    @join__field(graph: PROFILING)
  getAllThemes: [Theme!]! @join__field(graph: PROFILING)
}

enum QueryMode @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  default
  insensitive
}

union RefreshDeviceManagerDeviceManagerResponseUnion
  @join__type(graph: MANAGING) =
    ClientDeviceManager
  | ErrorManaging

type RefreshToken @join__type(graph: MANAGING) {
  id: ID!
  token: String!
  DeviceProfile: ClientDeviceProfile
  DeviceProfileId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RefreshTokenAvgOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
}

input RefreshTokenCountOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenCreateInput @join__type(graph: MANAGING) {
  token: String!
  DeviceProfile: DeviceProfileCreateNestedOneWithoutRefreshTokenInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenCreateManyInput @join__type(graph: MANAGING) {
  id: Int
  token: String!
  DeviceProfileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  create: RefreshTokenCreateWithoutDeviceProfileInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  connect: RefreshTokenWhereUniqueInput
}

input RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  @join__type(graph: MANAGING) {
  where: RefreshTokenWhereUniqueInput!
  create: RefreshTokenCreateWithoutDeviceProfileInput!
}

input RefreshTokenCreateWithoutDeviceProfileInput @join__type(graph: MANAGING) {
  token: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenMaxOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenMinOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenOrderByWithAggregationInput @join__type(graph: MANAGING) {
  id: SortOrder
  token: SortOrder
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RefreshTokenCountOrderByAggregateInput
  _avg: RefreshTokenAvgOrderByAggregateInput
  _max: RefreshTokenMaxOrderByAggregateInput
  _min: RefreshTokenMinOrderByAggregateInput
  _sum: RefreshTokenSumOrderByAggregateInput
}

input RefreshTokenOrderByWithRelationInput @join__type(graph: MANAGING) {
  id: SortOrder
  token: SortOrder
  DeviceProfile: DeviceProfileOrderByWithRelationInput
  DeviceProfileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RefreshTokenRelationFilter @join__type(graph: MANAGING) {
  is: RefreshTokenWhereInput
  isNot: RefreshTokenWhereInput
}

enum RefreshTokenScalarFieldEnum @join__type(graph: MANAGING) {
  id
  token
  DeviceProfileId
  createdAt
  updatedAt
}

input RefreshTokenScalarWhereWithAggregatesInput @join__type(graph: MANAGING) {
  AND: [RefreshTokenScalarWhereWithAggregatesInput!]
  OR: [RefreshTokenScalarWhereWithAggregatesInput!]
  NOT: [RefreshTokenScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  token: StringWithAggregatesFilter
  DeviceProfileId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input RefreshTokenSumOrderByAggregateInput @join__type(graph: MANAGING) {
  id: SortOrder
}

input RefreshTokenUpdateInput @join__type(graph: MANAGING) {
  token: StringFieldUpdateOperationsInput
  DeviceProfile: DeviceProfileUpdateOneWithoutRefreshTokenNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpdateManyMutationInput @join__type(graph: MANAGING) {
  token: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpdateOneWithoutDeviceProfileNestedInput
  @join__type(graph: MANAGING) {
  create: RefreshTokenCreateWithoutDeviceProfileInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  upsert: RefreshTokenUpsertWithoutDeviceProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: RefreshTokenWhereUniqueInput
  update: RefreshTokenUpdateWithoutDeviceProfileInput
}

input RefreshTokenUpdateWithoutDeviceProfileInput @join__type(graph: MANAGING) {
  token: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RefreshTokenUpsertWithoutDeviceProfileInput @join__type(graph: MANAGING) {
  update: RefreshTokenUpdateWithoutDeviceProfileInput!
  create: RefreshTokenCreateWithoutDeviceProfileInput!
}

input RefreshTokenWhereInput @join__type(graph: MANAGING) {
  AND: [RefreshTokenWhereInput!]
  OR: [RefreshTokenWhereInput!]
  NOT: [RefreshTokenWhereInput!]
  id: IntFilter
  token: StringFilter
  DeviceProfile: DeviceProfileWhereInput
  DeviceProfileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RefreshTokenWhereUniqueInput @join__type(graph: MANAGING) {
  id: Int
  token: String
  DeviceProfileId: String
}

type RejectedFriendsResponse @join__type(graph: PROFILING) {
  friends: Boolean!
}

type Relationship @join__type(graph: PROFILING) {
  id: ID!
  Profile: Profile
  profileId: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]!
  venueMetAt: String
  createdAt: DateTime!
  updatedAt: DateTime!
  friendProfile: Profile!
}

input RelationshipCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutRelationshipsInput
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipCreateManyProfileInput @join__type(graph: PROFILING) {
  id: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipCreateManyProfileInputEnvelope @join__type(graph: PROFILING) {
  data: [RelationshipCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input RelationshipCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: RelationshipCreateWithoutProfileInput
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  connect: [RelationshipWhereUniqueInput!]
}

input RelationshipCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: RelationshipWhereUniqueInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipCreateRelationshipStatusInput @join__type(graph: PROFILING) {
  set: [RelationshipStatus!]!
}

input RelationshipCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  friendProfileId: String!
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RelationshipListRelationFilter @join__type(graph: PROFILING) {
  every: RelationshipWhereInput
  some: RelationshipWhereInput
  none: RelationshipWhereInput
}

input RelationshipMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RelationshipOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input RelationshipOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RelationshipCountOrderByAggregateInput
  _max: RelationshipMaxOrderByAggregateInput
  _min: RelationshipMinOrderByAggregateInput
}

input RelationshipOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  friendProfileId: SortOrder
  RelationshipStatus: SortOrder
  venueMetAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum RelationshipScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  friendProfileId
  RelationshipStatus
  venueMetAt
  createdAt
  updatedAt
}

input RelationshipScalarWhereInput @join__type(graph: PROFILING) {
  AND: [RelationshipScalarWhereInput!]
  OR: [RelationshipScalarWhereInput!]
  NOT: [RelationshipScalarWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  friendProfileId: StringFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RelationshipScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [RelationshipScalarWhereWithAggregatesInput!]
  OR: [RelationshipScalarWhereWithAggregatesInput!]
  NOT: [RelationshipScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  friendProfileId: StringWithAggregatesFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum RelationshipStatus @join__type(graph: PROFILING) {
  FRIENDS
  DATING
}

input RelationshipUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneWithoutRelationshipsNestedInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationshipUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationshipUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: RelationshipCreateWithoutProfileInput
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  upsert: [RelationshipUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  set: [RelationshipWhereUniqueInput!]
  disconnect: [RelationshipWhereUniqueInput!]
  delete: [RelationshipWhereUniqueInput!]
  connect: [RelationshipWhereUniqueInput!]
  update: [RelationshipUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [RelationshipUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [RelationshipScalarWhereInput!]
}

input RelationshipUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: RelationshipScalarWhereInput!
  data: RelationshipUpdateManyMutationInput!
}

input RelationshipUpdateRelationshipStatusInput @join__type(graph: PROFILING) {
  set: [RelationshipStatus!]
  push: [RelationshipStatus!]
}

input RelationshipUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  friendProfileId: StringFieldUpdateOperationsInput
  RelationshipStatus: [RelationshipStatus!]
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationshipUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: RelationshipWhereUniqueInput!
  data: RelationshipUpdateWithoutProfileInput!
}

input RelationshipUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: RelationshipWhereUniqueInput!
  update: RelationshipUpdateWithoutProfileInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipWhereInput @join__type(graph: PROFILING) {
  AND: [RelationshipWhereInput!]
  OR: [RelationshipWhereInput!]
  NOT: [RelationshipWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  friendProfileId: StringFilter
  RelationshipStatus: EnumRelationshipStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RelationshipWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

type SearchAreaResponse @join__type(graph: PROFILING) {
  country: PlaceType!
  city: PlaceType!
  state: PlaceType!
  coords: Coords!
}

enum SecureDataType @join__type(graph: PROFILING) {
  FRIENDING
  JOINING
}

input SecuredDataKeysAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  used: SortOrder
}

input SecuredDataKeysCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysCreateInput @join__type(graph: PROFILING) {
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  Profile: ProfileCreateNestedOneWithoutSecuredDataKeysInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysCreateManyInput @join__type(graph: PROFILING) {
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysCreateManyProfileInput @join__type(graph: PROFILING) {
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING) {
  data: [SecuredDataKeysCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input SecuredDataKeysCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: SecuredDataKeysCreateWithoutProfileInput
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
  connect: [SecuredDataKeysWhereUniqueInput!]
}

input SecuredDataKeysCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: SecuredDataKeysWhereUniqueInput!
  create: SecuredDataKeysCreateWithoutProfileInput!
}

input SecuredDataKeysCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  SecureDataType: SecureDataType!
  key: String!
  used: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SecuredDataKeysListRelationFilter @join__type(graph: PROFILING) {
  every: SecuredDataKeysWhereInput
  some: SecuredDataKeysWhereInput
  none: SecuredDataKeysWhereInput
}

input SecuredDataKeysMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SecuredDataKeysOrderByRelationAggregateInput
  @join__type(graph: PROFILING) {
  _count: SortOrder
}

input SecuredDataKeysOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: SecuredDataKeysCountOrderByAggregateInput
  _avg: SecuredDataKeysAvgOrderByAggregateInput
  _max: SecuredDataKeysMaxOrderByAggregateInput
  _min: SecuredDataKeysMinOrderByAggregateInput
  _sum: SecuredDataKeysSumOrderByAggregateInput
}

input SecuredDataKeysOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  SecureDataType: SortOrder
  key: SortOrder
  used: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum SecuredDataKeysScalarFieldEnum @join__type(graph: PROFILING) {
  id
  SecureDataType
  key
  used
  profileId
  createdAt
  updatedAt
}

input SecuredDataKeysScalarWhereInput @join__type(graph: PROFILING) {
  AND: [SecuredDataKeysScalarWhereInput!]
  OR: [SecuredDataKeysScalarWhereInput!]
  NOT: [SecuredDataKeysScalarWhereInput!]
  id: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  key: StringFilter
  used: IntFilter
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SecuredDataKeysScalarWhereWithAggregatesInput
  @join__type(graph: PROFILING) {
  AND: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  OR: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  NOT: [SecuredDataKeysScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  SecureDataType: EnumSecureDataTypeWithAggregatesFilter
  key: StringWithAggregatesFilter
  used: IntWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SecuredDataKeysSumOrderByAggregateInput @join__type(graph: PROFILING) {
  used: SortOrder
}

input SecuredDataKeysUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSecuredDataKeysNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateManyWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: SecuredDataKeysCreateWithoutProfileInput
  connectOrCreate: [SecuredDataKeysCreateOrConnectWithoutProfileInput!]
  upsert: [SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: SecuredDataKeysCreateManyProfileInputEnvelope
  set: [SecuredDataKeysWhereUniqueInput!]
  disconnect: [SecuredDataKeysWhereUniqueInput!]
  delete: [SecuredDataKeysWhereUniqueInput!]
  connect: [SecuredDataKeysWhereUniqueInput!]
  update: [SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [SecuredDataKeysUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [SecuredDataKeysScalarWhereInput!]
}

input SecuredDataKeysUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: SecuredDataKeysScalarWhereInput!
  data: SecuredDataKeysUpdateManyMutationInput!
}

input SecuredDataKeysUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  SecureDataType: EnumSecureDataTypeFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  used: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SecuredDataKeysUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: SecuredDataKeysWhereUniqueInput!
  data: SecuredDataKeysUpdateWithoutProfileInput!
}

input SecuredDataKeysUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: SecuredDataKeysWhereUniqueInput!
  update: SecuredDataKeysUpdateWithoutProfileInput!
  create: SecuredDataKeysCreateWithoutProfileInput!
}

input SecuredDataKeysWhereInput @join__type(graph: PROFILING) {
  AND: [SecuredDataKeysWhereInput!]
  OR: [SecuredDataKeysWhereInput!]
  NOT: [SecuredDataKeysWhereInput!]
  id: StringFilter
  SecureDataType: EnumSecureDataTypeFilter
  key: StringFilter
  used: IntFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SecuredDataKeysWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  key: String
}

input SettingsCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutSettingsInput!
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsCreateNestedOneWithoutProfileInput @join__type(graph: PROFILING) {
  create: SettingsCreateWithoutProfileInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  connect: SettingsWhereUniqueInput
}

input SettingsCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: SettingsWhereUniqueInput!
  create: SettingsCreateWithoutProfileInput!
}

input SettingsCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  messagePushNotifications: Boolean!
  eventPushNotifications: Boolean!
  PushNotifications: Boolean!
}

input SettingsMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
  _count: SettingsCountOrderByAggregateInput
  _max: SettingsMaxOrderByAggregateInput
  _min: SettingsMinOrderByAggregateInput
}

input SettingsOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  messagePushNotifications: SortOrder
  eventPushNotifications: SortOrder
  PushNotifications: SortOrder
}

input SettingsRelationFilter @join__type(graph: PROFILING) {
  is: SettingsWhereInput
  isNot: SettingsWhereInput
}

enum SettingsScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  messagePushNotifications
  eventPushNotifications
  PushNotifications
}

input SettingsScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [SettingsScalarWhereWithAggregatesInput!]
  OR: [SettingsScalarWhereWithAggregatesInput!]
  NOT: [SettingsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  messagePushNotifications: BoolWithAggregatesFilter
  eventPushNotifications: BoolWithAggregatesFilter
  PushNotifications: BoolWithAggregatesFilter
}

input SettingsUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutSettingsNestedInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpdateOneWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: SettingsCreateWithoutProfileInput
  connectOrCreate: SettingsCreateOrConnectWithoutProfileInput
  upsert: SettingsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: SettingsWhereUniqueInput
  update: SettingsUpdateWithoutProfileInput
}

input SettingsUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  messagePushNotifications: BoolFieldUpdateOperationsInput
  eventPushNotifications: BoolFieldUpdateOperationsInput
  PushNotifications: BoolFieldUpdateOperationsInput
}

input SettingsUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: SettingsUpdateWithoutProfileInput!
  create: SettingsCreateWithoutProfileInput!
}

input SettingsWhereInput @join__type(graph: PROFILING) {
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  messagePushNotifications: BoolFilter
  eventPushNotifications: BoolFilter
  PushNotifications: BoolFilter
}

input SettingsWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
}

enum SortOrder @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  asc
  desc
}

type StateResponseObject @join__type(graph: PROFILING) {
  name: String!
  isoCode: String!
  countryCode: String!
  latitude: String
  longitude: String
}

type Story @join__type(graph: PROFILING) {
  id: ID!
  date: DateTime!
  Profile: Profile!
  emojimood: [Emojimood!]!
  photos: [Photo!]!
  startDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
}

input StoryCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryCreateInput @join__type(graph: PROFILING) {
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyProfileInput @join__type(graph: PROFILING) {
  id: String
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyProfileInputEnvelope @join__type(graph: PROFILING) {
  data: [StoryCreateManyProfileInput!]!
  skipDuplicates: Boolean
}

input StoryCreateNestedManyWithoutEmojimoodInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutEmojimoodInput
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateNestedManyWithoutProfileInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutProfileInput
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateNestedOneWithoutPhotosInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutPhotosInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  connect: StoryWhereUniqueInput
}

input StoryCreateOrConnectWithoutEmojimoodInput @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutEmojimoodInput!
}

input StoryCreateOrConnectWithoutPhotosInput @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryCreateWithoutEmojimoodInput @join__type(graph: PROFILING) {
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: String
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStorysInput
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  photos: PhotoCreateNestedManyWithoutStoryInput
  emojimood: EmojimoodCreateNestedManyWithoutStoryInput
  date: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryListRelationFilter @join__type(graph: PROFILING) {
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input StoryMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input StoryOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: StoryCountOrderByAggregateInput
  _max: StoryMaxOrderByAggregateInput
  _min: StoryMinOrderByAggregateInput
}

input StoryOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  emojimood: EmojimoodOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  date: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input StoryRelationFilter @join__type(graph: PROFILING) {
  is: StoryWhereInput
  isNot: StoryWhereInput
}

enum StoryScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  date
  createdAt
  updatedAt
}

input StoryScalarWhereInput @join__type(graph: PROFILING) {
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  date: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoryScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [StoryScalarWhereWithAggregatesInput!]
  OR: [StoryScalarWhereWithAggregatesInput!]
  NOT: [StoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringNullableWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StoryUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyWithoutEmojimoodNestedInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutEmojimoodInput
  connectOrCreate: [StoryCreateOrConnectWithoutEmojimoodInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutEmojimoodInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutEmojimoodInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutEmojimoodInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutProfileInput
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithWhereWithoutEmojimoodInput
  @join__type(graph: PROFILING) {
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateOneWithoutPhotosNestedInput @join__type(graph: PROFILING) {
  create: StoryCreateWithoutPhotosInput
  connectOrCreate: StoryCreateOrConnectWithoutPhotosInput
  upsert: StoryUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: StoryWhereUniqueInput
  update: StoryUpdateWithoutPhotosInput
}

input StoryUpdateWithoutEmojimoodInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutPhotosInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  Profile: ProfileUpdateOneWithoutStorysNestedInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryNestedInput
  emojimood: EmojimoodUpdateManyWithoutStoryNestedInput
  date: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithWhereUniqueWithoutEmojimoodInput
  @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutEmojimoodInput!
}

input StoryUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutProfileInput!
}

input StoryUpsertWithoutPhotosInput @join__type(graph: PROFILING) {
  update: StoryUpdateWithoutPhotosInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryUpsertWithWhereUniqueWithoutEmojimoodInput
  @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutEmojimoodInput!
  create: StoryCreateWithoutEmojimoodInput!
}

input StoryUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutProfileInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryWhereInput @join__type(graph: PROFILING) {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: StringFilter
  photos: PhotoListRelationFilter
  emojimood: EmojimoodListRelationFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  date: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoryWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input StringFieldUpdateOperationsInput
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  set: String
}

input StringFilter @join__type(graph: MANAGING) @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input StringNullableListFilter @join__type(graph: PROFILING) {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input StringWithAggregatesFilter
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type Tag @join__type(graph: PROFILING) {
  id: ID!
  name: String!
  type: TagType!
  emoji: String
  DetailInformation(
    where: DetailInformationWhereInput
    orderBy: [DetailInformationOrderByWithRelationInput!]
    cursor: DetailInformationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DetailInformationScalarFieldEnum!]
  ): [DetailInformation!]!
}

input TagAvgOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

input TagCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  emoji: SortOrder
}

input TagCreateInput @join__type(graph: PROFILING) {
  name: String!
  type: TagType!
  emoji: String
  DetailInformation: DetailInformationCreateNestedManyWithoutTagsInput
}

input TagCreateManyInput @join__type(graph: PROFILING) {
  id: Int
  name: String!
  type: TagType!
  emoji: String
}

input TagCreateNestedManyWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  create: TagCreateWithoutDetailInformationInput
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOrConnectWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagCreateWithoutDetailInformationInput @join__type(graph: PROFILING) {
  name: String!
  type: TagType!
  emoji: String
}

input TagListRelationFilter @join__type(graph: PROFILING) {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  emoji: SortOrder
}

input TagMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  emoji: SortOrder
}

input TagOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input TagOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  emoji: SortOrder
  _count: TagCountOrderByAggregateInput
  _avg: TagAvgOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
}

input TagOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  emoji: SortOrder
  DetailInformation: DetailInformationOrderByRelationAggregateInput
}

enum TagScalarFieldEnum @join__type(graph: PROFILING) {
  id
  name
  type
  emoji
}

input TagScalarWhereInput @join__type(graph: PROFILING) {
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  type: EnumTagTypeFilter
  emoji: StringNullableFilter
}

input TagScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  type: EnumTagTypeWithAggregatesFilter
  emoji: StringNullableWithAggregatesFilter
}

input TagSumOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
}

enum TagType @join__type(graph: PROFILING) {
  ACTIVITY
  TYPE
}

input TagUpdateInput @join__type(graph: PROFILING) {
  name: StringFieldUpdateOperationsInput
  type: EnumTagTypeFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  DetailInformation: DetailInformationUpdateManyWithoutTagsNestedInput
}

input TagUpdateManyMutationInput @join__type(graph: PROFILING) {
  name: StringFieldUpdateOperationsInput
  type: EnumTagTypeFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutDetailInformationNestedInput
  @join__type(graph: PROFILING) {
  create: TagCreateWithoutDetailInformationInput
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDetailInformationInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDetailInformationInput!]
  updateMany: [TagUpdateManyWithWhereWithoutDetailInformationInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpdateManyWithWhereWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagUpdateWithoutDetailInformationInput @join__type(graph: PROFILING) {
  name: StringFieldUpdateOperationsInput
  type: EnumTagTypeFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutDetailInformationInput!
}

input TagUpsertWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING) {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutDetailInformationInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagWhereInput @join__type(graph: PROFILING) {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  type: EnumTagTypeFilter
  emoji: StringNullableFilter
  DetailInformation: DetailInformationListRelationFilter
}

input TagWhereUniqueInput @join__type(graph: PROFILING) {
  id: Int
}

type Theme @join__type(graph: PROFILING) {
  id: ID!
  name: String!
  ProfileTheme: [ProfileTheme!]!
  mobile: Json!
  web: Json!
  mobileVersions: [String!]!
  webVersions: [String!]!
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ThemeCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeCreateInput @join__type(graph: PROFILING) {
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeInput
}

input ThemeCreateManyInput @join__type(graph: PROFILING) {
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input ThemeCreatemobileInput @join__type(graph: PROFILING) {
  set: [Json!]!
}

input ThemeCreatemobileVersionsInput @join__type(graph: PROFILING) {
  set: [String!]!
}

input ThemeCreateNestedOneWithoutProfileThemeInput
  @join__type(graph: PROFILING) {
  create: ThemeCreateWithoutProfileThemeInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  connect: ThemeWhereUniqueInput
}

input ThemeCreateOrConnectWithoutProfileThemeInput
  @join__type(graph: PROFILING) {
  where: ThemeWhereUniqueInput!
  create: ThemeCreateWithoutProfileThemeInput!
}

input ThemeCreatewebInput @join__type(graph: PROFILING) {
  set: [Json!]!
}

input ThemeCreatewebVersionsInput @join__type(graph: PROFILING) {
  set: [String!]!
}

input ThemeCreateWithoutProfileThemeInput @join__type(graph: PROFILING) {
  id: String
  mobileVersions: [String!]
  webVersions: [String!]
  name: String!
  mobile: [Json!]
  web: [Json!]
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ThemeManager @join__type(graph: PROFILING) {
  id: ID!
  ProfileTheme: [ProfileTheme!]!
  Profile: Profile!
  profileId: String!
}

input ThemeManagerCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerCreateInput @join__type(graph: PROFILING) {
  id: String
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
  updatedAt: DateTime
  createdAt: DateTime
}

input ThemeManagerCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  updatedAt: DateTime
  createdAt: DateTime
}

input ThemeManagerCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING) {
  create: ThemeManagerCreateWithoutProfileInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  connect: ThemeManagerWhereUniqueInput
}

input ThemeManagerCreateNestedOneWithoutProfileThemeInput
  @join__type(graph: PROFILING) {
  create: ThemeManagerCreateWithoutProfileThemeInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  connect: ThemeManagerWhereUniqueInput
}

input ThemeManagerCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING) {
  where: ThemeManagerWhereUniqueInput!
  create: ThemeManagerCreateWithoutProfileInput!
}

input ThemeManagerCreateOrConnectWithoutProfileThemeInput
  @join__type(graph: PROFILING) {
  where: ThemeManagerWhereUniqueInput!
  create: ThemeManagerCreateWithoutProfileThemeInput!
}

input ThemeManagerCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  ProfileTheme: ProfileThemeCreateNestedManyWithoutThemeManagerInput
  updatedAt: DateTime
  createdAt: DateTime
}

input ThemeManagerCreateWithoutProfileThemeInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutThemeManagerInput!
  updatedAt: DateTime
  createdAt: DateTime
}

input ThemeManagerMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
  _count: ThemeManagerCountOrderByAggregateInput
  _max: ThemeManagerMaxOrderByAggregateInput
  _min: ThemeManagerMinOrderByAggregateInput
}

input ThemeManagerOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  updatedAt: SortOrder
  createdAt: SortOrder
}

input ThemeManagerRelationFilter @join__type(graph: PROFILING) {
  is: ThemeManagerWhereInput
  isNot: ThemeManagerWhereInput
}

enum ThemeManagerScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  updatedAt
  createdAt
}

input ThemeManagerScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [ThemeManagerScalarWhereWithAggregatesInput!]
  OR: [ThemeManagerScalarWhereWithAggregatesInput!]
  NOT: [ThemeManagerScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input ThemeManagerUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateOneWithoutProfileNestedInput
  @join__type(graph: PROFILING) {
  create: ThemeManagerCreateWithoutProfileInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileInput
  upsert: ThemeManagerUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: ThemeManagerWhereUniqueInput
  update: ThemeManagerUpdateWithoutProfileInput
}

input ThemeManagerUpdateOneWithoutProfileThemeNestedInput
  @join__type(graph: PROFILING) {
  create: ThemeManagerCreateWithoutProfileThemeInput
  connectOrCreate: ThemeManagerCreateOrConnectWithoutProfileThemeInput
  upsert: ThemeManagerUpsertWithoutProfileThemeInput
  disconnect: Boolean
  delete: Boolean
  connect: ThemeManagerWhereUniqueInput
  update: ThemeManagerUpdateWithoutProfileThemeInput
}

input ThemeManagerUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpdateWithoutProfileThemeInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutThemeManagerNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ThemeManagerUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: ThemeManagerUpdateWithoutProfileInput!
  create: ThemeManagerCreateWithoutProfileInput!
}

input ThemeManagerUpsertWithoutProfileThemeInput @join__type(graph: PROFILING) {
  update: ThemeManagerUpdateWithoutProfileThemeInput!
  create: ThemeManagerCreateWithoutProfileThemeInput!
}

input ThemeManagerWhereInput @join__type(graph: PROFILING) {
  AND: [ThemeManagerWhereInput!]
  OR: [ThemeManagerWhereInput!]
  NOT: [ThemeManagerWhereInput!]
  id: StringFilter
  ProfileTheme: ProfileThemeListRelationFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  updatedAt: DateTimeFilter
  createdAt: DateTimeFilter
}

input ThemeManagerWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
}

input ThemeMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ThemeOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ThemeCountOrderByAggregateInput
  _max: ThemeMaxOrderByAggregateInput
  _min: ThemeMinOrderByAggregateInput
}

input ThemeOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  mobileVersions: SortOrder
  webVersions: SortOrder
  name: SortOrder
  mobile: SortOrder
  web: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  ProfileTheme: ProfileThemeOrderByRelationAggregateInput
}

input ThemeRelationFilter @join__type(graph: PROFILING) {
  is: ThemeWhereInput
  isNot: ThemeWhereInput
}

enum ThemeScalarFieldEnum @join__type(graph: PROFILING) {
  id
  mobileVersions
  webVersions
  name
  mobile
  web
  startDate
  endDate
  createdAt
  updatedAt
}

input ThemeScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [ThemeScalarWhereWithAggregatesInput!]
  OR: [ThemeScalarWhereWithAggregatesInput!]
  NOT: [ThemeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  mobileVersions: StringNullableListFilter
  webVersions: StringNullableListFilter
  name: StringWithAggregatesFilter
  mobile: JsonNullableListFilter
  web: JsonNullableListFilter
  startDate: DateTimeNullableWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ThemeUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  ProfileTheme: ProfileThemeUpdateManyWithoutThemeNestedInput
}

input ThemeUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeUpdatemobileInput @join__type(graph: PROFILING) {
  set: [Json!]
  push: Json
}

input ThemeUpdatemobileVersionsInput @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input ThemeUpdateOneRequiredWithoutProfileThemeNestedInput
  @join__type(graph: PROFILING) {
  create: ThemeCreateWithoutProfileThemeInput
  connectOrCreate: ThemeCreateOrConnectWithoutProfileThemeInput
  upsert: ThemeUpsertWithoutProfileThemeInput
  connect: ThemeWhereUniqueInput
  update: ThemeUpdateWithoutProfileThemeInput
}

input ThemeUpdatewebInput @join__type(graph: PROFILING) {
  set: [Json!]
  push: Json
}

input ThemeUpdatewebVersionsInput @join__type(graph: PROFILING) {
  set: [String!]
  push: [String!]
}

input ThemeUpdateWithoutProfileThemeInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  mobileVersions: [String!]
  webVersions: [String!]
  name: StringFieldUpdateOperationsInput
  mobile: [Json!]
  web: [Json!]
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThemeUpsertWithoutProfileThemeInput @join__type(graph: PROFILING) {
  update: ThemeUpdateWithoutProfileThemeInput!
  create: ThemeCreateWithoutProfileThemeInput!
}

input ThemeWhereInput @join__type(graph: PROFILING) {
  AND: [ThemeWhereInput!]
  OR: [ThemeWhereInput!]
  NOT: [ThemeWhereInput!]
  id: StringFilter
  mobileVersions: StringNullableListFilter
  webVersions: StringNullableListFilter
  name: StringFilter
  mobile: JsonNullableListFilter
  web: JsonNullableListFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  ProfileTheme: ProfileThemeListRelationFilter
}

input ThemeWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input TonightPathCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathCreateInput @join__type(graph: PROFILING) {
  id: String
  Path: PathCreateNestedManyWithoutTonightPathInput
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TonightPathCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TonightPathCreateNestedOneWithoutPathInput @join__type(graph: PROFILING) {
  create: TonightPathCreateWithoutPathInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  connect: TonightPathWhereUniqueInput
}

input TonightPathCreateOrConnectWithoutPathInput @join__type(graph: PROFILING) {
  where: TonightPathWhereUniqueInput!
  create: TonightPathCreateWithoutPathInput!
}

input TonightPathCreateWithoutPathInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TonightPathMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: TonightPathCountOrderByAggregateInput
  _max: TonightPathMaxOrderByAggregateInput
  _min: TonightPathMinOrderByAggregateInput
}

input TonightPathOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Path: PathOrderByRelationAggregateInput
  profileId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TonightPathRelationFilter @join__type(graph: PROFILING) {
  is: TonightPathWhereInput
  isNot: TonightPathWhereInput
}

enum TonightPathScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  createdAt
  updatedAt
}

input TonightPathScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [TonightPathScalarWhereWithAggregatesInput!]
  OR: [TonightPathScalarWhereWithAggregatesInput!]
  NOT: [TonightPathScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TonightPathUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Path: PathUpdateManyWithoutTonightPathNestedInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpdateOneWithoutPathNestedInput @join__type(graph: PROFILING) {
  create: TonightPathCreateWithoutPathInput
  connectOrCreate: TonightPathCreateOrConnectWithoutPathInput
  upsert: TonightPathUpsertWithoutPathInput
  disconnect: Boolean
  delete: Boolean
  connect: TonightPathWhereUniqueInput
  update: TonightPathUpdateWithoutPathInput
}

input TonightPathUpdateWithoutPathInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  profileId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TonightPathUpsertWithoutPathInput @join__type(graph: PROFILING) {
  update: TonightPathUpdateWithoutPathInput!
  create: TonightPathCreateWithoutPathInput!
}

input TonightPathWhereInput @join__type(graph: PROFILING) {
  AND: [TonightPathWhereInput!]
  OR: [TonightPathWhereInput!]
  NOT: [TonightPathWhereInput!]
  id: StringFilter
  Path: PathListRelationFilter
  profileId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TonightPathWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

type TotaledOut @join__type(graph: PROFILING) {
  id: ID!
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStats
  venueStatsId: String
  PersonalStats: PersonalStats
  personalStatsId: String
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonal
  liveOutPersonalId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TotaledOutCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TotaledOutCreateInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyLiveOutPersonalInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyLiveOutPersonalInputEnvelope
  @join__type(graph: PROFILING) {
  data: [TotaledOutCreateManyLiveOutPersonalInput!]!
  skipDuplicates: Boolean
}

input TotaledOutCreateManyLiveOutVenueInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyLiveOutVenueInputEnvelope
  @join__type(graph: PROFILING) {
  data: [TotaledOutCreateManyLiveOutVenueInput!]!
  skipDuplicates: Boolean
}

input TotaledOutCreateManyPersonalStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyPersonalStatsInputEnvelope
  @join__type(graph: PROFILING) {
  data: [TotaledOutCreateManyPersonalStatsInput!]!
  skipDuplicates: Boolean
}

input TotaledOutCreateManyVenueStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyVenueStatsInputEnvelope
  @join__type(graph: PROFILING) {
  data: [TotaledOutCreateManyVenueStatsInput!]!
  skipDuplicates: Boolean
}

input TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutPersonalInput!]
  createMany: TotaledOutCreateManyLiveOutPersonalInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutLiveOutVenueInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutVenueInput!]
  createMany: TotaledOutCreateManyLiveOutVenueInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutPersonalStatsInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutPersonalStatsInput!]
  createMany: TotaledOutCreateManyPersonalStatsInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutVenueStatsInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutVenueStatsInput!]
  createMany: TotaledOutCreateManyVenueStatsInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutLiveOutPersonalInput!
}

input TotaledOutCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutLiveOutVenueInput!
}

input TotaledOutCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutPersonalStatsInput!
}

input TotaledOutCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutVenueStatsInput!
}

input TotaledOutCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: String
  personalProfileId: String!
  venueProfileId: String!
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  leftAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutListRelationFilter @join__type(graph: PROFILING) {
  every: TotaledOutWhereInput
  some: TotaledOutWhereInput
  none: TotaledOutWhereInput
}

input TotaledOutMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TotaledOutMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input TotaledOutOrderByRelationAggregateInput @join__type(graph: PROFILING) {
  _count: SortOrder
}

input TotaledOutOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  venueStatsId: SortOrder
  personalStatsId: SortOrder
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: TotaledOutCountOrderByAggregateInput
  _max: TotaledOutMaxOrderByAggregateInput
  _min: TotaledOutMinOrderByAggregateInput
}

input TotaledOutOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  personalProfileId: SortOrder
  venueProfileId: SortOrder
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  liveOutVenueId: SortOrder
  leftAt: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  liveOutPersonalId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum TotaledOutScalarFieldEnum @join__type(graph: PROFILING) {
  id
  personalProfileId
  venueProfileId
  venueStatsId
  personalStatsId
  liveOutVenueId
  leftAt
  liveOutPersonalId
  createdAt
  updatedAt
}

input TotaledOutScalarWhereInput @join__type(graph: PROFILING) {
  AND: [TotaledOutScalarWhereInput!]
  OR: [TotaledOutScalarWhereInput!]
  NOT: [TotaledOutScalarWhereInput!]
  id: StringFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TotaledOutScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [TotaledOutScalarWhereWithAggregatesInput!]
  OR: [TotaledOutScalarWhereWithAggregatesInput!]
  NOT: [TotaledOutScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  personalProfileId: StringWithAggregatesFilter
  venueProfileId: StringWithAggregatesFilter
  venueStatsId: StringNullableWithAggregatesFilter
  personalStatsId: StringNullableWithAggregatesFilter
  liveOutVenueId: StringNullableWithAggregatesFilter
  leftAt: DateTimeNullableWithAggregatesFilter
  liveOutPersonalId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TotaledOutUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateManyWithoutLiveOutPersonalNestedInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutLiveOutPersonalInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutPersonalInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
  createMany: TotaledOutCreateManyLiveOutPersonalInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutLiveOutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutLiveOutVenueInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutVenueInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
  createMany: TotaledOutCreateManyLiveOutVenueInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutPersonalStatsNestedInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutPersonalStatsInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutPersonalStatsInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
  createMany: TotaledOutCreateManyPersonalStatsInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutPersonalStatsInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutVenueStatsNestedInput
  @join__type(graph: PROFILING) {
  create: TotaledOutCreateWithoutVenueStatsInput
  connectOrCreate: [TotaledOutCreateOrConnectWithoutVenueStatsInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutVenueStatsInput!]
  createMany: TotaledOutCreateManyVenueStatsInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutVenueStatsInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithWhereWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateWithoutPersonalStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledNestedInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutLiveOutPersonalInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutLiveOutVenueInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutPersonalStatsInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutVenueStatsInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutLiveOutPersonalInput!
  create: TotaledOutCreateWithoutLiveOutPersonalInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutLiveOutVenueInput!
  create: TotaledOutCreateWithoutLiveOutVenueInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutPersonalStatsInput!
  create: TotaledOutCreateWithoutPersonalStatsInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING) {
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutVenueStatsInput!
  create: TotaledOutCreateWithoutVenueStatsInput!
}

input TotaledOutWhereInput @join__type(graph: PROFILING) {
  AND: [TotaledOutWhereInput!]
  OR: [TotaledOutWhereInput!]
  NOT: [TotaledOutWhereInput!]
  id: StringFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringNullableFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  LiveOutVenue: LiveOutVenueWhereInput
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TotaledOutWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

enum TransactionIsolationLevel
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING) {
  ReadUncommitted
  ReadCommitted
  RepeatableRead
  Serializable
}

enum TypeOfDocument @join__type(graph: PROFILING) {
  PROFILE_PRIVACY_POLICY
  PROFILE_TERMS_OF_SERVICE
}

input UpdateManyNotificationStatusInput @join__type(graph: PROFILING) {
  """
  List of the NotificationStatus IDs to update
  """
  notificationStatusIds: [UpdateNotificationStatusInput!]!
}

union UpdateManyNotificationStatusUnionResponse @join__type(graph: PROFILING) =
    UpdateNotificationResponse
  | ErrorProfiling

type UpdateNotificationResponse @join__type(graph: PROFILING) {
  count: Int!
}

input UpdateNotificationStatusInput @join__type(graph: PROFILING) {
  """
  A NotificationStatus ID
  """
  id: String!
}

type Venue @join__type(graph: PROFILING) {
  id: ID!
  Profile: Profile!
  profileId: String!
  name: String
  Location: Location
  LiveOutVenue: LiveOutVenue
  VenueStats: VenueStats!
  venueStatsId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueCreateInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  name: String
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateManyInput @join__type(graph: PROFILING) {
  id: String
  profileId: String!
  name: String
  venueStatsId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateNestedOneWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutLocationInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutLocationInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutProfileInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutVenueStatsInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  connect: VenueWhereUniqueInput
}

input VenueCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING) {
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueCreateOrConnectWithoutLocationInput @join__type(graph: PROFILING) {
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutLocationInput!
}

input VenueCreateOrConnectWithoutProfileInput @join__type(graph: PROFILING) {
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueCreateOrConnectWithoutVenueStatsInput @join__type(graph: PROFILING) {
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueCreateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  name: String
  Location: LocationCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateWithoutLocationInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  name: String
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateWithoutProfileInput @join__type(graph: PROFILING) {
  id: String
  name: String
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueCreateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: String
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  name: String
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  profileId: SortOrder
  name: SortOrder
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: VenueCountOrderByAggregateInput
  _max: VenueMaxOrderByAggregateInput
  _min: VenueMinOrderByAggregateInput
}

input VenueOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  name: SortOrder
  Location: LocationOrderByWithRelationInput
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueRelationFilter @join__type(graph: PROFILING) {
  is: VenueWhereInput
  isNot: VenueWhereInput
}

enum VenueScalarFieldEnum @join__type(graph: PROFILING) {
  id
  profileId
  name
  venueStatsId
  createdAt
  updatedAt
}

input VenueScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [VenueScalarWhereWithAggregatesInput!]
  OR: [VenueScalarWhereWithAggregatesInput!]
  NOT: [VenueScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  profileId: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  venueStatsId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type VenuesNearbyResponse @join__type(graph: PROFILING) {
  venuesNearby: [Profile!]!
  searchArea: SearchAreaResponse!
}

type VenueStats @join__type(graph: PROFILING) {
  id: ID!
  Venue: Venue
  joinedVenueHistory(
    where: JoinedOutWhereInput
    orderBy: [JoinedOutOrderByWithRelationInput!]
    cursor: JoinedOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [JoinedOutScalarFieldEnum!]
  ): [JoinedOut!]!
  totaledVenueHistory(
    where: TotaledOutWhereInput
    orderBy: [TotaledOutOrderByWithRelationInput!]
    cursor: TotaledOutWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TotaledOutScalarFieldEnum!]
  ): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueStatsCountOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsCreateInput @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutVenueStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsCreateManyInput @join__type(graph: PROFILING) {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateNestedOneWithoutVenueInput @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput!
}

input VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput!
}

input VenueStatsCreateOrConnectWithoutVenueInput @join__type(graph: PROFILING) {
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsCreateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutVenueStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsCreateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: String
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutVenueStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsCreateWithoutVenueInput @join__type(graph: PROFILING) {
  id: String
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutVenueStatsInput
  createdAt: DateTime
  updatedAt: DateTime
}

input VenueStatsMaxOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsMinOrderByAggregateInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsOrderByWithAggregationInput @join__type(graph: PROFILING) {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: VenueStatsCountOrderByAggregateInput
  _max: VenueStatsMaxOrderByAggregateInput
  _min: VenueStatsMinOrderByAggregateInput
}

input VenueStatsOrderByWithRelationInput @join__type(graph: PROFILING) {
  id: SortOrder
  Venue: VenueOrderByWithRelationInput
  joinedVenueHistory: JoinedOutOrderByRelationAggregateInput
  totaledVenueHistory: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsRelationFilter @join__type(graph: PROFILING) {
  is: VenueStatsWhereInput
  isNot: VenueStatsWhereInput
}

enum VenueStatsScalarFieldEnum @join__type(graph: PROFILING) {
  id
  createdAt
  updatedAt
}

input VenueStatsScalarWhereWithAggregatesInput @join__type(graph: PROFILING) {
  AND: [VenueStatsScalarWhereWithAggregatesInput!]
  OR: [VenueStatsScalarWhereWithAggregatesInput!]
  NOT: [VenueStatsScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VenueStatsUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutVenueStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutVenueStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  upsert: VenueStatsUpsertWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutVenueInput
}

input VenueStatsUpdateOneWithoutJoinedVenueHistoryNestedInput
  @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  upsert: VenueStatsUpsertWithoutJoinedVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutJoinedVenueHistoryInput
}

input VenueStatsUpdateOneWithoutTotaledVenueHistoryNestedInput
  @join__type(graph: PROFILING) {
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  upsert: VenueStatsUpsertWithoutTotaledVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutTotaledVenueHistoryInput
}

input VenueStatsUpdateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutVenueStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsNestedInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutVenueStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpdateWithoutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutVenueStatsNestedInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutVenueStatsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStatsUpsertWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING) {
  update: VenueStatsUpdateWithoutJoinedVenueHistoryInput!
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput!
}

input VenueStatsUpsertWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING) {
  update: VenueStatsUpdateWithoutTotaledVenueHistoryInput!
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput!
}

input VenueStatsUpsertWithoutVenueInput @join__type(graph: PROFILING) {
  update: VenueStatsUpdateWithoutVenueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsWhereInput @join__type(graph: PROFILING) {
  AND: [VenueStatsWhereInput!]
  OR: [VenueStatsWhereInput!]
  NOT: [VenueStatsWhereInput!]
  id: StringFilter
  Venue: VenueWhereInput
  joinedVenueHistory: JoinedOutListRelationFilter
  totaledVenueHistory: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VenueStatsWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
}

input VenueUpdateInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateManyMutationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateOneRequiredWithoutLiveOutVenueNestedInput
  @join__type(graph: PROFILING) {
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  upsert: VenueUpsertWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutLiveOutVenueInput
}

input VenueUpdateOneWithoutLocationNestedInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutLocationInput
  connectOrCreate: VenueCreateOrConnectWithoutLocationInput
  upsert: VenueUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutLocationInput
}

input VenueUpdateOneWithoutProfileNestedInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  upsert: VenueUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutProfileInput
}

input VenueUpdateOneWithoutVenueStatsNestedInput @join__type(graph: PROFILING) {
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  upsert: VenueUpsertWithoutVenueStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutVenueStatsInput
}

input VenueUpdateWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateWithoutLocationInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateWithoutProfileInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpdateWithoutVenueStatsInput @join__type(graph: PROFILING) {
  id: StringFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueNestedInput
  name: NullableStringFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueNestedInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueUpsertWithoutLiveOutVenueInput @join__type(graph: PROFILING) {
  update: VenueUpdateWithoutLiveOutVenueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueUpsertWithoutLocationInput @join__type(graph: PROFILING) {
  update: VenueUpdateWithoutLocationInput!
  create: VenueCreateWithoutLocationInput!
}

input VenueUpsertWithoutProfileInput @join__type(graph: PROFILING) {
  update: VenueUpdateWithoutProfileInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueUpsertWithoutVenueStatsInput @join__type(graph: PROFILING) {
  update: VenueUpdateWithoutVenueStatsInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueWhereInput @join__type(graph: PROFILING) {
  AND: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  name: StringNullableFilter
  Location: LocationWhereInput
  LiveOutVenue: LiveOutVenueWhereInput
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VenueWhereUniqueInput @join__type(graph: PROFILING) {
  id: String
  profileId: String
  venueStatsId: String
}
