schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Address
  @join__type(graph: PROFILING)
{
  id: String!
  formattedAddress: String!
  AddressComponents(first: Int, last: Int, before: AddressComponentWhereUniqueInput, after: AddressComponentWhereUniqueInput): [AddressComponent!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AddressComponent
  @join__type(graph: PROFILING)
{
  id: Int!
  addressId: String
  h3Index15: String
  long_name: String!
  short_name: String!
  types: [String!]!
}

input AddressComponentCreateManyAddressInput
  @join__type(graph: PROFILING)
{
  id: Int
  h3Index15: String
  long_name: String!
  short_name: String!
  types: AddressComponentCreateManytypesInput
}

input AddressComponentCreateManyAddressInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [AddressComponentCreateManyAddressInput!]
  skipDuplicates: Boolean
}

input AddressComponentCreateManytypesInput
  @join__type(graph: PROFILING)
{
  set: [String!]
}

input AddressComponentCreateNestedManyWithoutAddressInput
  @join__type(graph: PROFILING)
{
  create: [AddressComponentCreateWithoutAddressInput!]
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  connect: [AddressComponentWhereUniqueInput!]
}

input AddressComponentCreateOrConnectWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentCreatetypesInput
  @join__type(graph: PROFILING)
{
  set: [String!]
}

input AddressComponentCreateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  h3Index15: String
  long_name: String!
  short_name: String!
  types: AddressComponentCreatetypesInput
}

input AddressComponentListRelationFilter
  @join__type(graph: PROFILING)
{
  every: AddressComponentWhereInput
  some: AddressComponentWhereInput
  none: AddressComponentWhereInput
}

input AddressComponentOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input AddressComponentScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressComponentScalarWhereInput!]
  OR: [AddressComponentScalarWhereInput!]
  NOT: [AddressComponentScalarWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  addressId: StringNullableFilter
}

input AddressComponentUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: AddressComponentUpdatetypesInput
}

input AddressComponentUpdateManyWithoutAddressInput
  @join__type(graph: PROFILING)
{
  create: [AddressComponentCreateWithoutAddressInput!]
  connectOrCreate: [AddressComponentCreateOrConnectWithoutAddressInput!]
  upsert: [AddressComponentUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: AddressComponentCreateManyAddressInputEnvelope
  set: [AddressComponentWhereUniqueInput!]
  disconnect: [AddressComponentWhereUniqueInput!]
  delete: [AddressComponentWhereUniqueInput!]
  connect: [AddressComponentWhereUniqueInput!]
  update: [AddressComponentUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [AddressComponentUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [AddressComponentScalarWhereInput!]
}

input AddressComponentUpdateManyWithWhereWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentScalarWhereInput!
  data: AddressComponentUpdateManyMutationInput!
}

input AddressComponentUpdatetypesInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: String
}

input AddressComponentUpdateWithoutAddressInput
  @join__type(graph: PROFILING)
{
  h3Index15: NullableStringFieldUpdateOperationsInput
  long_name: StringFieldUpdateOperationsInput
  short_name: StringFieldUpdateOperationsInput
  types: AddressComponentUpdatetypesInput
}

input AddressComponentUpdateWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  data: AddressComponentUpdateWithoutAddressInput!
}

input AddressComponentUpsertWithWhereUniqueWithoutAddressInput
  @join__type(graph: PROFILING)
{
  where: AddressComponentWhereUniqueInput!
  update: AddressComponentUpdateWithoutAddressInput!
  create: AddressComponentCreateWithoutAddressInput!
}

input AddressComponentWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressComponentWhereInput!]
  OR: [AddressComponentWhereInput!]
  NOT: [AddressComponentWhereInput!]
  id: IntFilter
  h3Index15: StringNullableFilter
  long_name: StringFilter
  short_name: StringFilter
  types: StringNullableListFilter
  Address: AddressWhereInput
  addressId: StringNullableFilter
}

input AddressComponentWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

input AddressCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  formattedAddress: String!
  createdAt: DateTime
  updatedAt: DateTime
  AddressComponents: AddressComponentCreateNestedManyWithoutAddressInput
}

input AddressOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  formattedAddress: SortOrder
  Location: LocationOrderByRelationAggregateInput
  AddressComponents: AddressComponentOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input AddressUpdateOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: AddressCreateWithoutLocationInput
  connectOrCreate: AddressCreateOrConnectWithoutLocationInput
  upsert: AddressUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: AddressWhereUniqueInput
  update: AddressUpdateWithoutLocationInput
}

input AddressUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  formattedAddress: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  AddressComponents: AddressComponentUpdateManyWithoutAddressInput
}

input AddressUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: AddressUpdateWithoutLocationInput!
  create: AddressCreateWithoutLocationInput!
}

input AddressWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: StringFilter
  formattedAddress: StringFilter
  Location: LocationListRelationFilter
  AddressComponents: AddressComponentListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input AddressWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum AppType
  @join__type(graph: MANAGING)
{
  BARFRIENDS
  PETFRIENDS
}

type AuthenticationProvider
  @join__type(graph: PROFILING)
{
  id: String!
  emails(first: Int, last: Int, before: EmailWhereUniqueInput, after: EmailWhereUniqueInput): [Email!]!
  phones(first: Int, last: Int, before: PhoneWhereUniqueInput, after: PhoneWhereUniqueInput): [Phone!]!
  Password: Password
}

input AuthenticationProviderCreateNestedOneWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  connect: AuthenticationProviderWhereUniqueInput
}

input AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: AuthenticationProviderWhereUniqueInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderCreateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  phones: PhoneCreateNestedManyWithoutAuthenticationProviderInput
  emails: EmailCreateNestedManyWithoutAuthenticationProviderInput
  Password: PasswordCreateNestedOneWithoutAuthenticationProviderInput
  codepassword: CodeCreateNestedOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderListRelationFilter
  @join__type(graph: PROFILING)
{
  every: AuthenticationProviderWhereInput
  some: AuthenticationProviderWhereInput
  none: AuthenticationProviderWhereInput
}

input AuthenticationProviderOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Credentials: CredentialsOrderByWithRelationInput
  phones: PhoneOrderByRelationAggregateInput
  emails: EmailOrderByRelationAggregateInput
  Password: PasswordOrderByWithRelationInput
  codepassword: CodeOrderByWithRelationInput
}

input AuthenticationProviderUpdateOneWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: AuthenticationProviderCreateWithoutCredentialsInput
  connectOrCreate: AuthenticationProviderCreateOrConnectWithoutCredentialsInput
  upsert: AuthenticationProviderUpsertWithoutCredentialsInput
  disconnect: Boolean
  delete: Boolean
  connect: AuthenticationProviderWhereUniqueInput
  update: AuthenticationProviderUpdateWithoutCredentialsInput
}

input AuthenticationProviderUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAuthenticationProviderInput
  emails: EmailUpdateManyWithoutAuthenticationProviderInput
  Password: PasswordUpdateOneWithoutAuthenticationProviderInput
  codepassword: CodeUpdateOneWithoutAuthenticationProviderInput
}

input AuthenticationProviderUpsertWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  update: AuthenticationProviderUpdateWithoutCredentialsInput!
  create: AuthenticationProviderCreateWithoutCredentialsInput!
}

input AuthenticationProviderWhereInput
  @join__type(graph: PROFILING)
{
  AND: [AuthenticationProviderWhereInput!]
  OR: [AuthenticationProviderWhereInput!]
  NOT: [AuthenticationProviderWhereInput!]
  id: StringFilter
  Credentials: CredentialsWhereInput
  phones: PhoneListRelationFilter
  emails: EmailListRelationFilter
  Password: PasswordWhereInput
  codepassword: CodeWhereInput
}

input AuthenticationProviderWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input Authenticators
  @join__type(graph: PROFILING)
{
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  username: String
}

union AuthorizedProfilesResponseUnion
  @join__type(graph: PROFILING)
 = ErrorProfiling | ProfileTypesResponse

input AuthorizedProfilesWhereInput
  @join__type(graph: PROFILING)
{
  Profiles: [ProfileArgs]
}

input BoolFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Boolean
}

input BoolFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableFilter
}

input ChatroomCreateNestedOneWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  connect: ChatroomWhereUniqueInput
}

input ChatroomCreateNestedOneWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutProfilesInput
  connect: ChatroomWhereUniqueInput
}

input ChatroomCreateOrConnectWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomCreateOrConnectWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  where: ChatroomWhereUniqueInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomCreateWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  id: String
  profiles: ProfileCreateNestedManyWithoutChatroomInput
}

input ChatroomCreateWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  id: String
  messages: MessageCreateNestedManyWithoutChatroomInput
}

input ChatroomOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  profiles: ProfileOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
}

input ChatroomUpdateOneWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutMessagesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutMessagesInput
  upsert: ChatroomUpsertWithoutMessagesInput
  disconnect: Boolean
  delete: Boolean
  connect: ChatroomWhereUniqueInput
  update: ChatroomUpdateWithoutMessagesInput
}

input ChatroomUpdateOneWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  create: ChatroomCreateWithoutProfilesInput
  connectOrCreate: ChatroomCreateOrConnectWithoutProfilesInput
  upsert: ChatroomUpsertWithoutProfilesInput
  disconnect: Boolean
  delete: Boolean
  connect: ChatroomWhereUniqueInput
  update: ChatroomUpdateWithoutProfilesInput
}

input ChatroomUpdateWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  profiles: ProfileUpdateManyWithoutChatroomInput
}

input ChatroomUpdateWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutChatroomInput
}

input ChatroomUpsertWithoutMessagesInput
  @join__type(graph: PROFILING)
{
  update: ChatroomUpdateWithoutMessagesInput!
  create: ChatroomCreateWithoutMessagesInput!
}

input ChatroomUpsertWithoutProfilesInput
  @join__type(graph: PROFILING)
{
  update: ChatroomUpdateWithoutProfilesInput!
  create: ChatroomCreateWithoutProfilesInput!
}

input ChatroomWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ChatroomWhereInput!]
  OR: [ChatroomWhereInput!]
  NOT: [ChatroomWhereInput!]
  id: StringFilter
  profiles: ProfileListRelationFilter
  messages: MessageListRelationFilter
}

input ChatroomWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type Code
  @join__type(graph: PROFILING)
{
  id: String
  code: String
  updatedAt: String
  createdAt: String
}

input CodeCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  connect: CodeWhereUniqueInput
}

input CodeCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: CodeWhereUniqueInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: String
  code: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CodeData
  @join__type(graph: PROFILING)
{
  """Length is the total numbers that you want the code to be."""
  length: Int = 4
}

input CodeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  code: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenitcationProviderId: SortOrder
  canUseAsRecovery: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

"""Any posibilities to a code response you will get from here"""
union CodeResponse
  @join__type(graph: PROFILING)
 = Code | ErrorProfiling

input CodeUpdateOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: CodeCreateWithoutAuthenticationProviderInput
  connectOrCreate: CodeCreateOrConnectWithoutAuthenticationProviderInput
  upsert: CodeUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: CodeWhereUniqueInput
  update: CodeUpdateWithoutAuthenticationProviderInput
}

input CodeUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CodeUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  update: CodeUpdateWithoutAuthenticationProviderInput!
  create: CodeCreateWithoutAuthenticationProviderInput!
}

input CodeWhere
  @join__type(graph: PROFILING)
{
  Authenticators: Authenticators
}

input CodeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CodeWhereInput!]
  OR: [CodeWhereInput!]
  NOT: [CodeWhereInput!]
  id: StringFilter
  code: StringFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenitcationProviderId: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CodeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenitcationProviderId: String
}

input ContactInput
  @join__type(graph: PROFILING)
{
  type: String
  value: String
}

input CreatePersonalProfileDataInput
  @join__type(graph: PROFILING)
{
  PrivacyPolicyId: ID!
  ServicesId: ID!
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  fullname: String
  emojimood: Int
  username: String!
  password: String!
  birthday: DateTime!
  photos: PhotoCreateManyProfileInputEnvelope
}

type CreateProfileResponse
  @join__type(graph: PROFILING)
{
  Profile: Profile
}

union CreateProfileResponseUnion
  @join__type(graph: PROFILING)
 = ErrorProfiling | CreateProfileResponse

input CreateVenueProfileDataInput
  @join__type(graph: PROFILING)
{
  PrivacyPolicyId: ID!
  ServicesId: ID!
  PhoneInput: PhoneInput
  EmailInput: EmailInput
  password: String!
  established: String!
  venuename: String!
  venuelocalname: String
  venueusername: String!
  address: String!
  ownername: String
  contacts: [ContactInput]
  capacity: String!
  venuetypes: [String]
  description: String
  photos: PhotoCreateManyProfileInputEnvelope
  birthday: DateTime!
}

type CreateVenueStorageResponse
  @join__type(graph: PROFILING)
{
  profilingId: String
  storageId: String
}

type Credentials
  @join__type(graph: PROFILING)
{
  id: String!
  AuthenticationProvider: AuthenticationProvider
}

input CredentialsCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  connect: CredentialsWhereUniqueInput
}

input CredentialsCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: CredentialsWhereUniqueInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  createdtAt: DateTime
  updatedAt: DateTime
  LegalAgreement: LegalAgreementCreateNestedManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderCreateNestedOneWithoutCredentialsInput
}

input CredentialsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenticationProviderId: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  createdtAt: SortOrder
  updatedAt: SortOrder
}

input CredentialsUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: CredentialsCreateWithoutProfileInput
  connectOrCreate: CredentialsCreateOrConnectWithoutProfileInput
  upsert: CredentialsUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: CredentialsWhereUniqueInput
  update: CredentialsUpdateWithoutProfileInput
}

input CredentialsUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdtAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LegalAgreement: LegalAgreementUpdateManyWithoutCredentialsInput
  AuthenticationProvider: AuthenticationProviderUpdateOneWithoutCredentialsInput
}

input CredentialsUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: CredentialsUpdateWithoutProfileInput!
  create: CredentialsCreateWithoutProfileInput!
}

input CredentialsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [CredentialsWhereInput!]
  OR: [CredentialsWhereInput!]
  NOT: [CredentialsWhereInput!]
  id: StringFilter
  LegalAgreement: LegalAgreementListRelationFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenticationProviderId: StringNullableFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  createdtAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CredentialsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenticationProviderId: String
  profileId: String
}

scalar DateTime
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)

input DateTimeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: DateTime
}

input DateTimeFilter
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

type DetailInformation
  @join__type(graph: PROFILING)
{
  id: String!
  established: DateTime
  description: String
  Profile: Profile!
  profileId: String!
  Tags(first: Int, last: Int, before: TagWhereUniqueInput, after: TagWhereUniqueInput): [Tag!]!
}

input DetailInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  connect: DetailInformationWhereUniqueInput
}

input DetailInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: DetailInformationWhereUniqueInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  description: String
  capacity: Int
  established: DateTime
  Tags: TagCreateNestedManyWithoutDetailInformationInput
}

input DetailInformationListRelationFilter
  @join__type(graph: PROFILING)
{
  every: DetailInformationWhereInput
  some: DetailInformationWhereInput
  none: DetailInformationWhereInput
}

input DetailInformationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  description: SortOrder
  capacity: SortOrder
  established: SortOrder
  Tags: TagOrderByRelationAggregateInput
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input DetailInformationUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: DetailInformationCreateWithoutProfileInput
  connectOrCreate: DetailInformationCreateOrConnectWithoutProfileInput
  upsert: DetailInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: DetailInformationWhereUniqueInput
  update: DetailInformationUpdateWithoutProfileInput
}

input DetailInformationUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  capacity: NullableIntFieldUpdateOperationsInput
  established: NullableDateTimeFieldUpdateOperationsInput
  Tags: TagUpdateManyWithoutDetailInformationInput
}

input DetailInformationUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: DetailInformationUpdateWithoutProfileInput!
  create: DetailInformationCreateWithoutProfileInput!
}

input DetailInformationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [DetailInformationWhereInput!]
  OR: [DetailInformationWhereInput!]
  NOT: [DetailInformationWhereInput!]
  id: StringFilter
  description: StringNullableFilter
  capacity: IntNullableFilter
  established: DateTimeNullableFilter
  Tags: TagListRelationFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
}

input DetailInformationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

type Device
  @join__type(graph: MANAGING)
{
  deviceType: String
}

input DeviceCreateInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceType: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: DeviceManagerCreateNestedOneWithoutDeviceInput!
}

type DeviceManager implements Node
  @join__implements(graph: PROFILING, interface: "Node")
  @join__type(graph: MANAGING, key: "id")
  @join__type(graph: PROFILING, key: "id")
{
  id: String!
  Device: Device @join__field(graph: MANAGING)
  DeviceProfile: DeviceProfile @join__field(graph: MANAGING)
}

input DeviceManagerCreateNestedOneWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  create: DeviceManagerCreateWithoutDeviceInput
  connectOrCreate: DeviceManagerCreateOrConnectWithoutDeviceInput
  connect: DeviceManagerWhereUniqueInput
}

input DeviceManagerCreateOrConnectWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  where: DeviceManagerWhereUniqueInput!
  create: DeviceManagerCreateWithoutDeviceInput!
}

input DeviceManagerCreateWithoutDeviceInput
  @join__type(graph: MANAGING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  DeviceProfile: DeviceProfileCreateNestedManyWithoutDeviceManagerInput
}

type DeviceManagerDeviceProfiles
  @join__type(graph: MANAGING)
{
  DeviceProfiles: [DeviceProfile]
}

union DeviceManagerDeviceProfilesResponseUnion
  @join__type(graph: MANAGING)
 = DeviceManagerDeviceProfiles | Error

input DeviceManagerWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
}

type DeviceProfile
  @join__type(graph: MANAGING)
{
  id: Int!
  isActive: Boolean!
  refreshtoken: String
  accesstoken: String
  Profile: Profile
  AppType: AppType
  DeviceManager: DeviceManager!
  deviceManagerId: String!
}

input DeviceProfileCreateManyDeviceManagerInput
  @join__type(graph: MANAGING)
{
  id: Int
  AppType: AppType
  profileId: String
  isActive: Boolean!
  accesstoken: String
}

input DeviceProfileCreateManyDeviceManagerInputEnvelope
  @join__type(graph: MANAGING)
{
  data: [DeviceProfileCreateManyDeviceManagerInput!]
  skipDuplicates: Boolean
}

input DeviceProfileCreateNestedManyWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  create: [DeviceProfileCreateWithoutDeviceManagerInput!]
  connectOrCreate: [DeviceProfileCreateOrConnectWithoutDeviceManagerInput!]
  createMany: DeviceProfileCreateManyDeviceManagerInputEnvelope
  connect: [DeviceProfileWhereUniqueInput!]
}

input DeviceProfileCreateOrConnectWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  where: DeviceProfileWhereUniqueInput!
  create: DeviceProfileCreateWithoutDeviceManagerInput!
}

input DeviceProfileCreateWithoutDeviceManagerInput
  @join__type(graph: MANAGING)
{
  AppType: AppType
  profileId: String
  isActive: Boolean!
  accesstoken: String
  RefreshToken: RefreshTokenCreateNestedOneWithoutDeviceProfileInput
}

input DeviceProfileWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: Int
}

input DeviceWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: String
  deviceManagerId: String
}

type Document
  @join__type(graph: PROFILING)
{
  id: Int!
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DocumentCreateNestedOneWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateOrConnectWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentCreateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  content: String!
  TypeOfDocument: TypeOfDocument!
  createdAt: DateTime
  updatedAt: DateTime
}

input DocumentOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  content: SortOrder
  TypeOfDocument: SortOrder
  LegalAgreement: LegalAgreementOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DocumentUpdateOneRequiredWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  create: DocumentCreateWithoutLegalAgreementInput
  connectOrCreate: DocumentCreateOrConnectWithoutLegalAgreementInput
  upsert: DocumentUpsertWithoutLegalAgreementInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateWithoutLegalAgreementInput
}

input DocumentUpdateWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  content: StringFieldUpdateOperationsInput
  TypeOfDocument: EnumTypeOfDocumentFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DocumentUpsertWithoutLegalAgreementInput
  @join__type(graph: PROFILING)
{
  update: DocumentUpdateWithoutLegalAgreementInput!
  create: DocumentCreateWithoutLegalAgreementInput!
}

input DocumentWhereInput
  @join__type(graph: PROFILING)
{
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IntFilter
  content: StringFilter
  TypeOfDocument: EnumTypeOfDocumentFilter
  LegalAgreement: LegalAgreementListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DocumentWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Email
  @join__type(graph: PROFILING)
{
  id: Int!
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmailCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: [EmailCreateWithoutAuthenticationProviderInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [EmailWhereUniqueInput!]
}

input EmailCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  email: String!
  canUseAsRecovery: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input EmailInput
  @join__type(graph: PROFILING)
{
  """Example: christian@barfriends.com"""
  email: String
}

input EmailListRelationFilter
  @join__type(graph: PROFILING)
{
  every: EmailWhereInput
  some: EmailWhereInput
  none: EmailWhereInput
}

input EmailOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input EmailScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmailScalarWhereInput!]
  OR: [EmailScalarWhereInput!]
  NOT: [EmailScalarWhereInput!]
  id: IntFilter
  email: StringFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmailUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: [EmailCreateWithoutAuthenticationProviderInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [EmailWhereUniqueInput!]
  disconnect: [EmailWhereUniqueInput!]
  delete: [EmailWhereUniqueInput!]
  connect: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [EmailScalarWhereInput!]
}

input EmailUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailScalarWhereInput!
  data: EmailUpdateManyMutationInput!
}

input EmailUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  email: StringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EmailUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  data: EmailUpdateWithoutAuthenticationProviderInput!
}

input EmailUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: EmailWhereUniqueInput!
  update: EmailUpdateWithoutAuthenticationProviderInput!
  create: EmailCreateWithoutAuthenticationProviderInput!
}

input EmailWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  id: IntFilter
  email: StringFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  canUseAsRecovery: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EmailWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Emojimood
  @join__type(graph: PROFILING)
{
  id: Int!
  colors: [String!]!
  emoji: String
  emojiname: String
  Story(first: Int, last: Int, before: StoryWhereUniqueInput, after: StoryWhereUniqueInput): [Story!]!
}

input EmojimoodCreatecolorsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
}

input EmojimoodCreateInput
  @join__type(graph: PROFILING)
{
  colors: [String]!
  emoji: String!
  emojiname: String!
}

input EmojimoodCreateNestedOneWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: EmojimoodCreateOrConnectWithoutStoryInput
  connect: EmojimoodWhereUniqueInput
}

input EmojimoodCreateOrConnectWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: EmojimoodWhereUniqueInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodCreateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  emojiname: String
  emoji: String
  colors: EmojimoodCreatecolorsInput
}

input EmojimoodOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  colors: SortOrder
  emojiname: SortOrder
  emoji: SortOrder
  Story: StoryOrderByRelationAggregateInput
}

input EmojimoodUpdatecolorsInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: String
}

input EmojimoodUpdateOneWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: EmojimoodCreateWithoutStoryInput
  connectOrCreate: EmojimoodCreateOrConnectWithoutStoryInput
  upsert: EmojimoodUpsertWithoutStoryInput
  disconnect: Boolean
  delete: Boolean
  connect: EmojimoodWhereUniqueInput
  update: EmojimoodUpdateWithoutStoryInput
}

input EmojimoodUpdateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  emojiname: NullableStringFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
  colors: EmojimoodUpdatecolorsInput
}

input EmojimoodUpsertWithoutStoryInput
  @join__type(graph: PROFILING)
{
  update: EmojimoodUpdateWithoutStoryInput!
  create: EmojimoodCreateWithoutStoryInput!
}

input EmojimoodWhereInput
  @join__type(graph: PROFILING)
{
  AND: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  NOT: [EmojimoodWhereInput!]
  id: IntFilter
  colors: StringNullableListFilter
  emojiname: StringNullableFilter
  emoji: StringNullableFilter
  Story: StoryListRelationFilter
}

input EmojimoodWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

input EnumPhotoTypeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: NestedEnumPhotoTypeNullableFilter
}

input EnumProfileTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: ProfileType
}

input EnumProfileTypeFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: NestedEnumProfileTypeFilter
}

input EnumStatusNullableListFilter
  @join__type(graph: PROFILING)
{
  equals: [Status!]
  has: Status
  hasEvery: [Status!]
  hasSome: [Status!]
  isEmpty: Boolean
}

input EnumTagTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: TagType
}

input EnumTagTypeFilter
  @join__type(graph: PROFILING)
{
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: NestedEnumTagTypeFilter
}

input EnumTypeOfDocumentFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: TypeOfDocument
}

input EnumTypeOfDocumentFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: NestedEnumTypeOfDocumentFilter
}

type Error
  @join__type(graph: MANAGING)
{
  type: String
  errorCode: String
  message: String
}

type ErrorProfiling
  @join__type(graph: PROFILING)
{
  errorCode: String
  message: String
}

input FloatFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FloatFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

type Geometry
  @join__type(graph: PROFILING)
{
  id: Int!
  h3Index15: String
  latitude: Float!
  longitude: Float!
  type: String!
}

input GeometryCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  connect: GeometryWhereUniqueInput
}

input GeometryCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: GeometryWhereUniqueInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  type: String!
  h3Index15: String
  latitude: Float!
  longitude: Float!
}

input GeometryOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  type: SortOrder
  h3Index15: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  Location: LocationOrderByWithRelationInput
}

input GeometryUpdateOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: GeometryCreateWithoutLocationInput
  connectOrCreate: GeometryCreateOrConnectWithoutLocationInput
  upsert: GeometryUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: GeometryWhereUniqueInput
  update: GeometryUpdateWithoutLocationInput
}

input GeometryUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  type: StringFieldUpdateOperationsInput
  h3Index15: NullableStringFieldUpdateOperationsInput
  latitude: FloatFieldUpdateOperationsInput
  longitude: FloatFieldUpdateOperationsInput
}

input GeometryUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: GeometryUpdateWithoutLocationInput!
  create: GeometryCreateWithoutLocationInput!
}

input GeometryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GeometryWhereInput!]
  OR: [GeometryWhereInput!]
  NOT: [GeometryWhereInput!]
  id: IntFilter
  type: StringFilter
  h3Index15: StringNullableFilter
  latitude: FloatFilter
  longitude: FloatFilter
  Location: LocationWhereInput
}

input GeometryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

input GooglePlaceAutocompleteInput
  @join__type(graph: PROFILING)
{
  textinput: String!

  """
  A random string which identifies an autocomplete.
         This value also is returned and should be passed back through this input. 
         Default value provided.
  """
  sessiontoken: String = "0f373ebd-956f-4822-a4cb-9b592159f3c6"
  latitude: Float
  longitude: Float

  """
  Defines the distance (in meters) within which to return place results. You may bias results to a specified circle by passing a location and a radius parameter. Autocomplete: 50,000 meters
  """
  radius: Int

  """
  offset The position, in the input term, of the last character that the service uses to match predictions. For example, if the input is Google and the offset is 3, the service will match on Goo. The string determined by the offset is matched against the first word in the input term only. For example, if the input term is Google abc and the offset is 3, the service will attempt to match against Goo abc. If no offset is supplied, the service will use the whole term. The offset should generally be set to the position of the text caret.
  """
  offset: Int

  """ ISO 3166-1"""
  region: [String]

  """
  supported languages: https://developers.google.com/maps/faq#languagesupport
  """
  language: [String]

  """
  For the value of the types parameter you can specify either:
  
        Up to five values from Table 1 or Table 2. For multiple values, separate each value with a | (vertical bar). For example:
        
        types=book_store|cafe
        
        Any supported filter in Table 3. You can safely mix the geocode and establishment types. You cannot mix type collections (address, (cities) or (regions)) with any other type, or an error occurs.
        supported types: https://developers.google.com/maps/documentation/places/web-service/supported_types
  """
  types: [String]
}

type GooglePlaceAutocompleteReturn
  @join__type(graph: PROFILING)
{
  sessiontoken: String!
  data: Json
}

input GroupCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [GroupCreateWithoutProfileInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateNestedOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedManyWithoutGroupInput
}

input GroupCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutGroupInput
}

input GroupListRelationFilter
  @join__type(graph: PROFILING)
{
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input GroupOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input GroupScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GroupUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [GroupCreateWithoutProfileInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutProfileInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutProfileInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupScalarWhereInput!
  data: GroupUpdateManyMutationInput!
}

input GroupUpdateOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: GroupCreateWithoutPhotosInput
  connectOrCreate: GroupCreateOrConnectWithoutPhotosInput
  upsert: GroupUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutPhotosInput
}

input GroupUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutProfileInput!
}

input GroupUpsertWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  update: GroupUpdateWithoutPhotosInput!
  create: GroupCreateWithoutPhotosInput!
}

input GroupUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutProfileInput!
  create: GroupCreateWithoutProfileInput!
}

input GroupWhereInput
  @join__type(graph: PROFILING)
{
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: StringFilter
  name: StringFilter
  photos: PhotoListRelationFilter
  Profile: ProfileListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GroupWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type IdentifiableInformation
  @join__type(graph: PROFILING)
{
  id: String!
  username: String!
  birthday: DateTime
  hometown: String
  currenttown: String
  gender: String
  lookfor: String
  fullname: String
  nickname: String
  firstname: String
  lastname: String
}

input IdentifiableInformationCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  connect: IdentifiableInformationWhereUniqueInput
}

input IdentifiableInformationCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: IdentifiableInformationWhereUniqueInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  storageId: String
  username: String!
  fullname: String
  firstname: String
  lastname: String
  nickname: String
  surname: String
  birthday: DateTime
  gender: String
  lookfor: String
  hometown: String
  currenttown: String
  createdAt: DateTime
  updatedAt: DateTime
}

input IdentifiableInformationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  storageId: SortOrder
  username: SortOrder
  fullname: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  nickname: SortOrder
  surname: SortOrder
  birthday: SortOrder
  gender: SortOrder
  lookfor: SortOrder
  hometown: SortOrder
  currenttown: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
}

input IdentifiableInformationUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: IdentifiableInformationCreateWithoutProfileInput
  connectOrCreate: IdentifiableInformationCreateOrConnectWithoutProfileInput
  upsert: IdentifiableInformationUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: IdentifiableInformationWhereUniqueInput
  update: IdentifiableInformationUpdateWithoutProfileInput
}

input IdentifiableInformationUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  storageId: NullableStringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  fullname: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  surname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lookfor: NullableStringFieldUpdateOperationsInput
  hometown: NullableStringFieldUpdateOperationsInput
  currenttown: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IdentifiableInformationUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: IdentifiableInformationUpdateWithoutProfileInput!
  create: IdentifiableInformationCreateWithoutProfileInput!
}

input IdentifiableInformationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [IdentifiableInformationWhereInput!]
  OR: [IdentifiableInformationWhereInput!]
  NOT: [IdentifiableInformationWhereInput!]
  id: StringFilter
  storageId: StringNullableFilter
  username: StringFilter
  fullname: StringNullableFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  nickname: StringNullableFilter
  surname: StringNullableFilter
  birthday: DateTimeNullableFilter
  gender: StringNullableFilter
  lookfor: StringNullableFilter
  hometown: StringNullableFilter
  currenttown: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
}

input IdentifiableInformationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  username: String
  profileId: String
}

input IntFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

scalar join__FieldSet

enum join__Graph {
  MANAGING @join__graph(name: "managing", url: "http://localhost:5002/graphql")
  PROFILING @join__graph(name: "profiling", url: "http://localhost:5001/graphql")
}

type JoinedOut
  @join__type(graph: PROFILING)
{
  id: String!
  personalProfileId: String
  venueProfileId: String!
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  liveOutPersonalId: String
  PersonalStats: PersonalStats
  VenueStats: VenueStats
  venueStatsId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input JoinedOutCreateManyLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
  personalStatsId: String
}

input JoinedOutCreateManyLiveOutPersonalInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [JoinedOutCreateManyLiveOutPersonalInput!]
  skipDuplicates: Boolean
}

input JoinedOutCreateManyLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
  personalStatsId: String
}

input JoinedOutCreateManyLiveOutVenueInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [JoinedOutCreateManyLiveOutVenueInput!]
  skipDuplicates: Boolean
}

input JoinedOutCreateManyPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  venueStatsId: String
}

input JoinedOutCreateManyPersonalStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [JoinedOutCreateManyPersonalStatsInput!]
  skipDuplicates: Boolean
}

input JoinedOutCreateManyVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  liveOutVenueId: String
  liveOutPersonalId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  personalStatsId: String
}

input JoinedOutCreateManyVenueStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [JoinedOutCreateManyVenueStatsInput!]
  skipDuplicates: Boolean
}

input JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutLiveOutPersonalInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutPersonalInput!]
  createMany: JoinedOutCreateManyLiveOutPersonalInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutLiveOutVenueInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutVenueInput!]
  createMany: JoinedOutCreateManyLiveOutVenueInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutPersonalStatsInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutPersonalStatsInput!]
  createMany: JoinedOutCreateManyPersonalStatsInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateNestedManyWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutVenueStatsInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutVenueStatsInput!]
  createMany: JoinedOutCreateManyVenueStatsInputEnvelope
  connect: [JoinedOutWhereUniqueInput!]
}

input JoinedOutCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutLiveOutPersonalInput!
}

input JoinedOutCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutLiveOutVenueInput!
}

input JoinedOutCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutPersonalStatsInput!
}

input JoinedOutCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  create: JoinedOutCreateWithoutVenueStatsInput!
}

input JoinedOutCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  VenueStats: VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutCreateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutJoinedInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
}

input JoinedOutListRelationFilter
  @join__type(graph: PROFILING)
{
  every: JoinedOutWhereInput
  some: JoinedOutWhereInput
  none: JoinedOutWhereInput
}

input JoinedOutOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input JoinedOutScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [JoinedOutScalarWhereInput!]
  OR: [JoinedOutScalarWhereInput!]
  NOT: [JoinedOutScalarWhereInput!]
  id: StringFilter
  personalProfileId: StringNullableFilter
  venueProfileId: StringFilter
  liveOutVenueId: StringNullableFilter
  liveOutPersonalId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
}

input JoinedOutUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input JoinedOutUpdateManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutLiveOutPersonalInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutPersonalInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
  createMany: JoinedOutCreateManyLiveOutPersonalInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutLiveOutVenueInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutLiveOutVenueInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
  createMany: JoinedOutCreateManyLiveOutVenueInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutPersonalStatsInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutPersonalStatsInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
  createMany: JoinedOutCreateManyPersonalStatsInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutPersonalStatsInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: [JoinedOutCreateWithoutVenueStatsInput!]
  connectOrCreate: [JoinedOutCreateOrConnectWithoutVenueStatsInput!]
  upsert: [JoinedOutUpsertWithWhereUniqueWithoutVenueStatsInput!]
  createMany: JoinedOutCreateManyVenueStatsInputEnvelope
  set: [JoinedOutWhereUniqueInput!]
  disconnect: [JoinedOutWhereUniqueInput!]
  delete: [JoinedOutWhereUniqueInput!]
  connect: [JoinedOutWhereUniqueInput!]
  update: [JoinedOutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [JoinedOutUpdateManyWithWhereWithoutVenueStatsInput!]
  deleteMany: [JoinedOutScalarWhereInput!]
}

input JoinedOutUpdateManyWithWhereWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateManyWithWhereWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutScalarWhereInput!
  data: JoinedOutUpdateManyMutationInput!
}

input JoinedOutUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryInput
}

input JoinedOutUpdateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryInput
}

input JoinedOutUpdateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedInput
  VenueStats: VenueStatsUpdateOneWithoutJoinedVenueHistoryInput
}

input JoinedOutUpdateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: NullableStringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutJoinedInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutJoinedInput
  PersonalStats: PersonalStatsUpdateOneWithoutJoinedVenueHistoryInput
}

input JoinedOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutLiveOutPersonalInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutLiveOutVenueInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutPersonalStatsInput!
}

input JoinedOutUpdateWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  data: JoinedOutUpdateWithoutVenueStatsInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutLiveOutPersonalInput!
  create: JoinedOutCreateWithoutLiveOutPersonalInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutLiveOutVenueInput!
  create: JoinedOutCreateWithoutLiveOutVenueInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutPersonalStatsInput!
  create: JoinedOutCreateWithoutPersonalStatsInput!
}

input JoinedOutUpsertWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: JoinedOutWhereUniqueInput!
  update: JoinedOutUpdateWithoutVenueStatsInput!
  create: JoinedOutCreateWithoutVenueStatsInput!
}

input JoinedOutWhereInput
  @join__type(graph: PROFILING)
{
  AND: [JoinedOutWhereInput!]
  OR: [JoinedOutWhereInput!]
  NOT: [JoinedOutWhereInput!]
  id: StringFilter
  personalProfileId: StringNullableFilter
  venueProfileId: StringFilter
  LiveOutVenue: LiveOutVenueWhereInput
  liveOutVenueId: StringNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  liveOutPersonalId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringNullableFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
}

input JoinedOutWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

scalar Json
  @join__type(graph: PROFILING)

input JsonNullableListFilter
  @join__type(graph: PROFILING)
{
  equals: [Json!]
  has: Json
  hasEvery: [Json!]
  hasSome: [Json!]
  isEmpty: Boolean
}

type LegalAgreement
  @join__type(graph: PROFILING)
{
  id: String!
  aggreed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LegalAgreementCreateManyCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  documentId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input LegalAgreementCreateManyCredentialsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [LegalAgreementCreateManyCredentialsInput!]
  skipDuplicates: Boolean
}

input LegalAgreementCreateNestedManyWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: [LegalAgreementCreateWithoutCredentialsInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  connect: [LegalAgreementWhereUniqueInput!]
}

input LegalAgreementCreateOrConnectWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementCreateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: String
  aggreed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Document: DocumentCreateNestedOneWithoutLegalAgreementInput!
}

input LegalAgreementListRelationFilter
  @join__type(graph: PROFILING)
{
  every: LegalAgreementWhereInput
  some: LegalAgreementWhereInput
  none: LegalAgreementWhereInput
}

input LegalAgreementOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input LegalAgreementScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LegalAgreementScalarWhereInput!]
  OR: [LegalAgreementScalarWhereInput!]
  NOT: [LegalAgreementScalarWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  documentId: IntFilter
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LegalAgreementUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input LegalAgreementUpdateManyWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  create: [LegalAgreementCreateWithoutCredentialsInput!]
  connectOrCreate: [LegalAgreementCreateOrConnectWithoutCredentialsInput!]
  upsert: [LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput!]
  createMany: LegalAgreementCreateManyCredentialsInputEnvelope
  set: [LegalAgreementWhereUniqueInput!]
  disconnect: [LegalAgreementWhereUniqueInput!]
  delete: [LegalAgreementWhereUniqueInput!]
  connect: [LegalAgreementWhereUniqueInput!]
  update: [LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput!]
  updateMany: [LegalAgreementUpdateManyWithWhereWithoutCredentialsInput!]
  deleteMany: [LegalAgreementScalarWhereInput!]
}

input LegalAgreementUpdateManyWithWhereWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementScalarWhereInput!
  data: LegalAgreementUpdateManyMutationInput!
}

input LegalAgreementUpdateWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  aggreed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Document: DocumentUpdateOneRequiredWithoutLegalAgreementInput
}

input LegalAgreementUpdateWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  data: LegalAgreementUpdateWithoutCredentialsInput!
}

input LegalAgreementUpsertWithWhereUniqueWithoutCredentialsInput
  @join__type(graph: PROFILING)
{
  where: LegalAgreementWhereUniqueInput!
  update: LegalAgreementUpdateWithoutCredentialsInput!
  create: LegalAgreementCreateWithoutCredentialsInput!
}

input LegalAgreementWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LegalAgreementWhereInput!]
  OR: [LegalAgreementWhereInput!]
  NOT: [LegalAgreementWhereInput!]
  id: StringFilter
  aggreed: BoolFilter
  Document: DocumentWhereInput
  documentId: IntFilter
  Credentials: CredentialsWhereInput
  credentialsId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LegalAgreementWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LiveOutPersonal
  @join__type(graph: PROFILING)
{
  id: String!
  Personal: Personal!
  joined(first: Int, last: Int, before: JoinedOutWhereUniqueInput, after: JoinedOutWhereUniqueInput): [JoinedOut!]!
  totaled(first: Int, last: Int, before: TotaledOutWhereUniqueInput, after: TotaledOutWhereUniqueInput): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutPersonalCreateNestedOneWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutJoinedInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutJoinedInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateNestedOneWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutTotaledInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutTotaledInput
  connect: LiveOutPersonalWhereUniqueInput
}

input LiveOutPersonalCreateOrConnectWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutJoinedInput!
}

input LiveOutPersonalCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalCreateOrConnectWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  where: LiveOutPersonalWhereUniqueInput!
  create: LiveOutPersonalCreateWithoutTotaledInput!
}

input LiveOutPersonalCreateWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  totaled: TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  totaled: TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  joined: JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalCreateWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutLiveOutPersonalInput!
  joined: JoinedOutCreateNestedManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Personal: PersonalOrderByWithRelationInput
  personalId: SortOrder
  totaled: TotaledOutOrderByRelationAggregateInput
  joined: JoinedOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutPersonalUpdateOneWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutJoinedInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutJoinedInput
  upsert: LiveOutPersonalUpsertWithoutJoinedInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutJoinedInput
}

input LiveOutPersonalUpdateOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutPersonalInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutPersonalInput
  upsert: LiveOutPersonalUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutPersonalInput
}

input LiveOutPersonalUpdateOneWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  create: LiveOutPersonalCreateWithoutTotaledInput
  connectOrCreate: LiveOutPersonalCreateOrConnectWithoutTotaledInput
  upsert: LiveOutPersonalUpsertWithoutTotaledInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutPersonalWhereUniqueInput
  update: LiveOutPersonalUpdateWithoutTotaledInput
}

input LiveOutPersonalUpdateWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalInput
  totaled: TotaledOutUpdateManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  totaled: TotaledOutUpdateManyWithoutLiveOutPersonalInput
  joined: JoinedOutUpdateManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalUpdateWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneRequiredWithoutLiveOutPersonalInput
  joined: JoinedOutUpdateManyWithoutLiveOutPersonalInput
}

input LiveOutPersonalUpsertWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  update: LiveOutPersonalUpdateWithoutJoinedInput!
  create: LiveOutPersonalCreateWithoutJoinedInput!
}

input LiveOutPersonalUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: LiveOutPersonalUpdateWithoutPersonalInput!
  create: LiveOutPersonalCreateWithoutPersonalInput!
}

input LiveOutPersonalUpsertWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  update: LiveOutPersonalUpdateWithoutTotaledInput!
  create: LiveOutPersonalCreateWithoutTotaledInput!
}

input LiveOutPersonalWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutPersonalWhereInput!]
  OR: [LiveOutPersonalWhereInput!]
  NOT: [LiveOutPersonalWhereInput!]
  id: StringFilter
  Personal: PersonalWhereInput
  personalId: StringFilter
  totaled: TotaledOutListRelationFilter
  joined: JoinedOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LiveOutPersonalWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalId: String
}

type LiveOutVenue
  @join__type(graph: PROFILING)
{
  id: String!
  venueId: String!
  joined(first: Int, last: Int, before: JoinedOutWhereUniqueInput, after: JoinedOutWhereUniqueInput): [JoinedOut!]!
  totaled(first: Int, last: Int, before: TotaledOutWhereUniqueInput, after: TotaledOutWhereUniqueInput): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LiveOutVenueCreateNestedOneWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutJoinedInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutJoinedInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateNestedOneWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutTotaledInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutTotaledInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  connect: LiveOutVenueWhereUniqueInput
}

input LiveOutVenueCreateOrConnectWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutJoinedInput!
}

input LiveOutVenueCreateOrConnectWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutTotaledInput!
}

input LiveOutVenueCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: LiveOutVenueWhereUniqueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueCreateWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  totaled: TotaledOutCreateNestedManyWithoutLiveOutVenueInput
}

input LiveOutVenueCreateWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutLiveOutVenueInput!
  joined: JoinedOutCreateNestedManyWithoutLiveOutVenueInput
}

input LiveOutVenueCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  joined: JoinedOutCreateNestedManyWithoutLiveOutVenueInput
  totaled: TotaledOutCreateNestedManyWithoutLiveOutVenueInput
}

input LiveOutVenueOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
  joined: JoinedOutOrderByRelationAggregateInput
  totaled: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LiveOutVenueUpdateOneWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutJoinedInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutJoinedInput
  upsert: LiveOutVenueUpsertWithoutJoinedInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutJoinedInput
}

input LiveOutVenueUpdateOneWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutTotaledInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutTotaledInput
  upsert: LiveOutVenueUpsertWithoutTotaledInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutTotaledInput
}

input LiveOutVenueUpdateOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LiveOutVenueCreateWithoutVenueInput
  connectOrCreate: LiveOutVenueCreateOrConnectWithoutVenueInput
  upsert: LiveOutVenueUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LiveOutVenueWhereUniqueInput
  update: LiveOutVenueUpdateWithoutVenueInput
}

input LiveOutVenueUpdateWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueInput
  totaled: TotaledOutUpdateManyWithoutLiveOutVenueInput
}

input LiveOutVenueUpdateWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneRequiredWithoutLiveOutVenueInput
  joined: JoinedOutUpdateManyWithoutLiveOutVenueInput
}

input LiveOutVenueUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  joined: JoinedOutUpdateManyWithoutLiveOutVenueInput
  totaled: TotaledOutUpdateManyWithoutLiveOutVenueInput
}

input LiveOutVenueUpsertWithoutJoinedInput
  @join__type(graph: PROFILING)
{
  update: LiveOutVenueUpdateWithoutJoinedInput!
  create: LiveOutVenueCreateWithoutJoinedInput!
}

input LiveOutVenueUpsertWithoutTotaledInput
  @join__type(graph: PROFILING)
{
  update: LiveOutVenueUpdateWithoutTotaledInput!
  create: LiveOutVenueCreateWithoutTotaledInput!
}

input LiveOutVenueUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: LiveOutVenueUpdateWithoutVenueInput!
  create: LiveOutVenueCreateWithoutVenueInput!
}

input LiveOutVenueWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LiveOutVenueWhereInput!]
  OR: [LiveOutVenueWhereInput!]
  NOT: [LiveOutVenueWhereInput!]
  id: StringFilter
  Venue: VenueWhereInput
  venueId: StringFilter
  joined: JoinedOutListRelationFilter
  totaled: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LiveOutVenueWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  venueId: String
}

type LiveVenueTotals
  @join__type(graph: PROFILING)
{
  totaled: [TotaledOut!]
  joined: [JoinedOut!]
}

type Location
  @join__type(graph: PROFILING)
{
  id: String!
  h3Index: String!
  Geometry: Geometry
  Address: Address
  plusCode: PluseCode
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LocationCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  h3Index: String!
  createdAt: DateTime
  updatedAt: DateTime
  plusCode: PluseCodeCreateNestedOneWithoutLocationInput
  Address: AddressCreateNestedOneWithoutLocationInput
  Geometry: GeometryCreateNestedOneWithoutLocationInput
}

input LocationListRelationFilter
  @join__type(graph: PROFILING)
{
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input LocationOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input LocationOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  h3Index: SortOrder
  plusCode: PluseCodeOrderByWithRelationInput
  pluseCodeId: SortOrder
  Address: AddressOrderByWithRelationInput
  addressId: SortOrder
  Geometry: GeometryOrderByWithRelationInput
  geometryId: SortOrder
  Venue: VenueOrderByWithRelationInput
  venueId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LocationUpdateOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: LocationCreateWithoutVenueInput
  connectOrCreate: LocationCreateOrConnectWithoutVenueInput
  upsert: LocationUpsertWithoutVenueInput
  disconnect: Boolean
  delete: Boolean
  connect: LocationWhereUniqueInput
  update: LocationUpdateWithoutVenueInput
}

input LocationUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  h3Index: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  plusCode: PluseCodeUpdateOneWithoutLocationInput
  Address: AddressUpdateOneWithoutLocationInput
  Geometry: GeometryUpdateOneWithoutLocationInput
}

input LocationUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: LocationUpdateWithoutVenueInput!
  create: LocationCreateWithoutVenueInput!
}

input LocationWhereInput
  @join__type(graph: PROFILING)
{
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: StringFilter
  h3Index: StringFilter
  plusCode: PluseCodeWhereInput
  pluseCodeId: StringNullableFilter
  Address: AddressWhereInput
  addressId: StringNullableFilter
  Geometry: GeometryWhereInput
  geometryId: IntNullableFilter
  Venue: VenueWhereInput
  venueId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LocationWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  pluseCodeId: String
  geometryId: Int
  venueId: String
}

input MessageCreateManyChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  responseId: String
  senderId: String!
}

input MessageCreateManyChatroomInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [MessageCreateManyChatroomInput!]
  skipDuplicates: Boolean
}

input MessageCreateManyResponseInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  chatroomId: String
  senderId: String!
}

input MessageCreateManyResponseInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [MessageCreateManyResponseInput!]
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: [MessageCreateWithoutChatroomInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedManyWithoutResponseInput
  @join__type(graph: PROFILING)
{
  create: [MessageCreateWithoutResponseInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateNestedOneWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  connect: MessageWhereUniqueInput
}

input MessageCreateOrConnectWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageCreateOrConnectWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageCreateOrConnectWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageCreateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  responses: MessageCreateNestedManyWithoutResponseInput
  response: MessageCreateNestedOneWithoutResponsesInput
}

input MessageCreateWithoutResponseInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  responses: MessageCreateNestedManyWithoutResponseInput
}

input MessageCreateWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  id: String
  message: String!
  senderId: String!
  Chatroom: ChatroomCreateNestedOneWithoutMessagesInput
  response: MessageCreateNestedOneWithoutResponsesInput
}

input MessageListRelationFilter
  @join__type(graph: PROFILING)
{
  every: MessageWhereInput
  some: MessageWhereInput
  none: MessageWhereInput
}

input MessageOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input MessageScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  id: StringFilter
  message: StringFilter
  chatroomId: StringNullableFilter
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: [MessageCreateWithoutChatroomInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutChatroomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatroomInput!]
  createMany: MessageCreateManyChatroomInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithoutResponseInput
  @join__type(graph: PROFILING)
{
  create: [MessageCreateWithoutResponseInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutResponseInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutResponseInput!]
  createMany: MessageCreateManyResponseInputEnvelope
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutResponseInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutResponseInput!]
  deleteMany: [MessageScalarWhereInput!]
}

input MessageUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateManyWithWhereWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageScalarWhereInput!
  data: MessageUpdateManyMutationInput!
}

input MessageUpdateOneWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  create: MessageCreateWithoutResponsesInput
  connectOrCreate: MessageCreateOrConnectWithoutResponsesInput
  upsert: MessageUpsertWithoutResponsesInput
  disconnect: Boolean
  delete: Boolean
  connect: MessageWhereUniqueInput
  update: MessageUpdateWithoutResponsesInput
}

input MessageUpdateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  responses: MessageUpdateManyWithoutResponseInput
  response: MessageUpdateOneWithoutResponsesInput
}

input MessageUpdateWithoutResponseInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesInput
  responses: MessageUpdateManyWithoutResponseInput
}

input MessageUpdateWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  senderId: StringFieldUpdateOperationsInput
  Chatroom: ChatroomUpdateOneWithoutMessagesInput
  response: MessageUpdateOneWithoutResponsesInput
}

input MessageUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChatroomInput!
}

input MessageUpdateWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutResponseInput!
}

input MessageUpsertWithoutResponsesInput
  @join__type(graph: PROFILING)
{
  update: MessageUpdateWithoutResponsesInput!
  create: MessageCreateWithoutResponsesInput!
}

input MessageUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChatroomInput!
  create: MessageCreateWithoutChatroomInput!
}

input MessageUpsertWithWhereUniqueWithoutResponseInput
  @join__type(graph: PROFILING)
{
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutResponseInput!
  create: MessageCreateWithoutResponseInput!
}

input MessageWhereInput
  @join__type(graph: PROFILING)
{
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  id: StringFilter
  message: StringFilter
  Chatroom: ChatroomWhereInput
  chatroomId: StringNullableFilter
  responses: MessageListRelationFilter
  response: MessageWhereInput
  responseId: StringNullableFilter
  senderId: StringFilter
}

input MessageWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type Mutation
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  createOneDevice(data: DeviceCreateInput!): Device! @join__field(graph: MANAGING)
  createADeviceManager(profileId: String): RefreshDeviceManagerResponseUnion @join__field(graph: MANAGING)
  switchDeviceProfile(profileId: String): RefreshDeviceManagerResponseUnion @join__field(graph: MANAGING)
  refreshDeviceManager: RefreshDeviceManagerResponseUnion @join__field(graph: MANAGING)
  removeDeviceProfileToDeviceManager(profileId: String!): Boolean @join__field(graph: MANAGING)
  sendAuthenticatorDeviceOwnerCode(where: CodeWhere, data: CodeData): CodeResponse @join__field(graph: PROFILING)
  sendAuthenticatorForgotPasswordCode(where: CodeWhere, data: CodeData): CodeResponse @join__field(graph: PROFILING)
  createOneEmojimood(data: EmojimoodCreateInput!): Emojimood! @join__field(graph: PROFILING)
  checkThePink: Boolean @join__field(graph: PROFILING)
  upsertTonightPathOrPath(tonightPathId: String, profileIdPersonal: String!, latitude: Float!, longitude: Float!): Boolean @join__field(graph: PROFILING)
  addPersonalTotalsVenue(profileIdPersonal: String!, profileIdVenue: String!): Boolean @join__field(graph: PROFILING)
  removePersonalTotalsVenue(profileIdPersonal: String!, profileIdVenue: String!): Boolean @join__field(graph: PROFILING)
  addPersonalJoinsVenue(profileIdPersonal: String!, profileIdVenue: String!): Boolean @join__field(graph: PROFILING)
  removePersonalJoinsVenue(profileIdPersonal: String!, profileIdVenue: String!): Boolean @join__field(graph: PROFILING)
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile @join__field(graph: PROFILING)
  createGuestProfile: CreateProfileResponseUnion @join__field(graph: PROFILING)
  createPersonalProfile(data: CreatePersonalProfileDataInput): CreateProfileResponseUnion @join__field(graph: PROFILING)
  updateProfileIdentifiableInformation(where: IdentifiableInformationWhereUniqueInput!, data: IdentifiableInformationUpdateWithoutProfileInput!): UpdateProfileResponse @join__field(graph: PROFILING)
  createAVenue(data: CreateVenueProfileDataInput!): CreateProfileResponseUnion @join__field(graph: PROFILING)
  storageCreateVenues(data: [Json]): [CreateVenueStorageResponse] @join__field(graph: PROFILING)
  upsertProfileStory(data: ProfileUpdateInput!): Boolean @join__field(graph: PROFILING)
}

enum MutationType
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  CREATED
  UPDATED
  DELETED
}

input NestedBoolFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedEnumPhotoTypeNullableFilter
  @join__type(graph: PROFILING)
{
  equals: PhotoType
  in: [PhotoType!]
  notIn: [PhotoType!]
  not: NestedEnumPhotoTypeNullableFilter
}

input NestedEnumProfileTypeFilter
  @join__type(graph: PROFILING)
{
  equals: ProfileType
  in: [ProfileType!]
  notIn: [ProfileType!]
  not: NestedEnumProfileTypeFilter
}

input NestedEnumTagTypeFilter
  @join__type(graph: PROFILING)
{
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: NestedEnumTagTypeFilter
}

input NestedEnumTypeOfDocumentFilter
  @join__type(graph: PROFILING)
{
  equals: TypeOfDocument
  in: [TypeOfDocument!]
  notIn: [TypeOfDocument!]
  not: NestedEnumTypeOfDocumentFilter
}

input NestedFloatFilter
  @join__type(graph: PROFILING)
{
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedIntFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter
  @join__type(graph: PROFILING)
{
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedStringFilter
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

interface Node
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  id: String
}

input NullableBoolFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: DateTime
}

input NullableEnumPhotoTypeFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: PhotoType
}

input NullableIntFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: String
}

type Password
  @join__type(graph: PROFILING)
{
  id: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PasswordCreateNestedOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  connect: PasswordWhereUniqueInput
}

input PasswordCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PasswordWhereUniqueInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: String
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PasswordOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  password: SortOrder
  AuthenticationProvider: AuthenticationProviderOrderByWithRelationInput
  authenitcationProviderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PasswordUpdateOneWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: PasswordCreateWithoutAuthenticationProviderInput
  connectOrCreate: PasswordCreateOrConnectWithoutAuthenticationProviderInput
  upsert: PasswordUpsertWithoutAuthenticationProviderInput
  disconnect: Boolean
  delete: Boolean
  connect: PasswordWhereUniqueInput
  update: PasswordUpdateWithoutAuthenticationProviderInput
}

input PasswordUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PasswordUpsertWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  update: PasswordUpdateWithoutAuthenticationProviderInput!
  create: PasswordCreateWithoutAuthenticationProviderInput!
}

input PasswordWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PasswordWhereInput!]
  OR: [PasswordWhereInput!]
  NOT: [PasswordWhereInput!]
  id: StringFilter
  password: StringFilter
  AuthenticationProvider: AuthenticationProviderWhereInput
  authenitcationProviderId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PasswordWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  authenitcationProviderId: String
}

type Personal
  @join__type(graph: PROFILING)
{
  id: String!
  Profile: Profile!
  PersonalStats: PersonalStats
  LiveOutPersonal: LiveOutPersonal
  profileId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalCreateNestedOneWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  connect: PersonalWhereUniqueInput
}

input PersonalCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PersonalWhereUniqueInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
}

input PersonalCreateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutPersonalInput!
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
}

input PersonalCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  PersonalStats: PersonalStatsCreateNestedOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutPersonalInput
}

input PersonalOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  PersonalStats: PersonalStatsOrderByWithRelationInput
  personalStatsId: SortOrder
  LiveOutPersonal: LiveOutPersonalOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

type PersonalStats
  @join__type(graph: PROFILING)
{
  id: String!
  Personal: Personal
  joinedVenueHistory(first: Int, last: Int, before: JoinedOutWhereUniqueInput, after: JoinedOutWhereUniqueInput): [JoinedOut!]!
  totaledVenueHistory(first: Int, last: Int, before: TotaledOutWhereUniqueInput, after: TotaledOutWhereUniqueInput): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PersonalStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  connect: PersonalStatsWhereUniqueInput
}

input PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput!
}

input PersonalStatsCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  where: PersonalStatsWhereUniqueInput!
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput!
}

input PersonalStatsCreateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutPersonalStatsInput
}

input PersonalStatsCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutPersonalStatsInput
}

input PersonalStatsCreateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Personal: PersonalCreateNestedOneWithoutPersonalStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutPersonalStatsInput
}

input PersonalStatsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Personal: PersonalOrderByWithRelationInput
  joinedVenueHistory: JoinedOutOrderByRelationAggregateInput
  totaledVenueHistory: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PersonalStatsUpdateOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  upsert: PersonalStatsUpsertWithoutJoinedVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutJoinedVenueHistoryInput
}

input PersonalStatsUpdateOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutPersonalInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutPersonalInput
  upsert: PersonalStatsUpsertWithoutPersonalInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutPersonalInput
}

input PersonalStatsUpdateOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: PersonalStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  upsert: PersonalStatsUpsertWithoutTotaledVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalStatsWhereUniqueInput
  update: PersonalStatsUpdateWithoutTotaledVenueHistoryInput
}

input PersonalStatsUpdateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutPersonalStatsInput
}

input PersonalStatsUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutPersonalStatsInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutPersonalStatsInput
}

input PersonalStatsUpdateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Personal: PersonalUpdateOneWithoutPersonalStatsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutPersonalStatsInput
}

input PersonalStatsUpsertWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  update: PersonalStatsUpdateWithoutJoinedVenueHistoryInput!
  create: PersonalStatsCreateWithoutJoinedVenueHistoryInput!
}

input PersonalStatsUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: PersonalStatsUpdateWithoutPersonalInput!
  create: PersonalStatsCreateWithoutPersonalInput!
}

input PersonalStatsUpsertWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  update: PersonalStatsUpdateWithoutTotaledVenueHistoryInput!
  create: PersonalStatsCreateWithoutTotaledVenueHistoryInput!
}

input PersonalStatsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalStatsWhereInput!]
  OR: [PersonalStatsWhereInput!]
  NOT: [PersonalStatsWhereInput!]
  id: StringFilter
  Personal: PersonalWhereInput
  joinedVenueHistory: JoinedOutListRelationFilter
  totaledVenueHistory: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PersonalStatsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input PersonalUpdateOneRequiredWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutLiveOutPersonalInput
  connectOrCreate: PersonalCreateOrConnectWithoutLiveOutPersonalInput
  upsert: PersonalUpsertWithoutLiveOutPersonalInput
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutLiveOutPersonalInput
}

input PersonalUpdateOneWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutPersonalStatsInput
  connectOrCreate: PersonalCreateOrConnectWithoutPersonalStatsInput
  upsert: PersonalUpsertWithoutPersonalStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutPersonalStatsInput
}

input PersonalUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: PersonalCreateWithoutProfileInput
  connectOrCreate: PersonalCreateOrConnectWithoutProfileInput
  upsert: PersonalUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonalWhereUniqueInput
  update: PersonalUpdateWithoutProfileInput
}

input PersonalUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalInput
}

input PersonalUpdateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalInput
}

input PersonalUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutPersonalInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutPersonalInput
}

input PersonalUpsertWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutLiveOutPersonalInput!
  create: PersonalCreateWithoutLiveOutPersonalInput!
}

input PersonalUpsertWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutPersonalStatsInput!
  create: PersonalCreateWithoutPersonalStatsInput!
}

input PersonalUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: PersonalUpdateWithoutProfileInput!
  create: PersonalCreateWithoutProfileInput!
}

input PersonalWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PersonalWhereInput!]
  OR: [PersonalWhereInput!]
  NOT: [PersonalWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PersonalWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  personalStatsId: String
}

type Phone
  @join__type(graph: PROFILING)
{
  id: Int!
  number: String!
  completeNumber: String
  countryCallingCode: String
  countryCode: String
  canUseAsRecovery: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhoneCreateNestedManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: [PhoneCreateWithoutAuthenticationProviderInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  connect: [PhoneWhereUniqueInput!]
}

input PhoneCreateOrConnectWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneCreateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  number: String!
  completeNumber: String
  countryCode: String
  canUseAsRecovery: Boolean
  countryCallingCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhoneInput
  @join__type(graph: PROFILING)
{
  """Example: 5193334444 or +15193334444"""
  number: String
  countryCode: String
  countryCallingCode: String
  completeNumber: String
}

input PhoneListRelationFilter
  @join__type(graph: PROFILING)
{
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input PhoneOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input PhoneScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhoneScalarWhereInput!]
  OR: [PhoneScalarWhereInput!]
  NOT: [PhoneScalarWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhoneUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  create: [PhoneCreateWithoutAuthenticationProviderInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAuthenticationProviderInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput!]
  set: [PhoneWhereUniqueInput!]
  disconnect: [PhoneWhereUniqueInput!]
  delete: [PhoneWhereUniqueInput!]
  connect: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput!]
  deleteMany: [PhoneScalarWhereInput!]
}

input PhoneUpdateManyWithWhereWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneScalarWhereInput!
  data: PhoneUpdateManyMutationInput!
}

input PhoneUpdateWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  number: StringFieldUpdateOperationsInput
  completeNumber: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  canUseAsRecovery: NullableBoolFieldUpdateOperationsInput
  countryCallingCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateWithoutAuthenticationProviderInput!
}

input PhoneUpsertWithWhereUniqueWithoutAuthenticationProviderInput
  @join__type(graph: PROFILING)
{
  where: PhoneWhereUniqueInput!
  update: PhoneUpdateWithoutAuthenticationProviderInput!
  create: PhoneCreateWithoutAuthenticationProviderInput!
}

input PhoneWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IntFilter
  number: StringFilter
  completeNumber: StringNullableFilter
  countryCode: StringNullableFilter
  canUseAsRecovery: BoolNullableFilter
  countryCallingCode: StringNullableFilter
  AuthenticationProvider: AuthenticationProviderListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhoneWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type Photo
  @join__type(graph: PROFILING)
{
  id: String!
  url: String!
  type: PhotoType
  active: Boolean!
  ratio: String
  blurhash: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhotoCreateManyGroupInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  active: Boolean
  profileId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyGroupInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PhotoCreateManyGroupInput!]
  skipDuplicates: Boolean
}

input PhotoCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  active: Boolean
  groupId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [PhotoCreateManyProfileInput!]
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutGroupInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutGroupInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutProfileInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateNestedManyWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutStoryInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  connect: [PhotoWhereUniqueInput!]
}

input PhotoCreateOrConnectWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoCreateOrConnectWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoCreateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Story: StoryCreateNestedManyWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
}

input PhotoCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Story: StoryCreateNestedManyWithoutPhotosInput
  Group: GroupCreateNestedOneWithoutPhotosInput
}

input PhotoCreateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: String
  url: String!
  width: Int
  height: Int
  blurhash: String
  ratio: String
  type: PhotoType
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  Group: GroupCreateNestedOneWithoutPhotosInput
  Profile: ProfileCreateNestedOneWithoutPhotosInput
}

input PhotoListRelationFilter
  @join__type(graph: PROFILING)
{
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input PhotoOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input PhotoScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  NOT: [PhotoScalarWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  active: BoolFilter
  groupId: StringNullableFilter
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

enum PhotoType
  @join__type(graph: PROFILING)
{
  BANNER
  LOGO
}

input PhotoUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhotoUpdateManyWithoutGroupInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutGroupInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutGroupInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: PhotoCreateManyGroupInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutProfileInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutProfileInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: PhotoCreateManyProfileInputEnvelope
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: [PhotoCreateWithoutStoryInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutStoryInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutStoryInput!]
  set: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  connect: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutStoryInput!]
  deleteMany: [PhotoScalarWhereInput!]
}

input PhotoUpdateManyWithWhereWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateManyWithWhereWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoScalarWhereInput!
  data: PhotoUpdateManyMutationInput!
}

input PhotoUpdateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Story: StoryUpdateManyWithoutPhotosInput
  Profile: ProfileUpdateOneWithoutPhotosInput
}

input PhotoUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Story: StoryUpdateManyWithoutPhotosInput
  Group: GroupUpdateOneWithoutPhotosInput
}

input PhotoUpdateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  width: NullableIntFieldUpdateOperationsInput
  height: NullableIntFieldUpdateOperationsInput
  blurhash: NullableStringFieldUpdateOperationsInput
  ratio: NullableStringFieldUpdateOperationsInput
  type: NullableEnumPhotoTypeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Group: GroupUpdateOneWithoutPhotosInput
  Profile: ProfileUpdateOneWithoutPhotosInput
}

input PhotoUpdateWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutGroupInput!
}

input PhotoUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutProfileInput!
}

input PhotoUpdateWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateWithoutStoryInput!
}

input PhotoUpsertWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutGroupInput!
  create: PhotoCreateWithoutGroupInput!
}

input PhotoUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutProfileInput!
  create: PhotoCreateWithoutProfileInput!
}

input PhotoUpsertWithWhereUniqueWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateWithoutStoryInput!
  create: PhotoCreateWithoutStoryInput!
}

input PhotoWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: StringFilter
  url: StringFilter
  width: IntNullableFilter
  height: IntNullableFilter
  blurhash: StringNullableFilter
  ratio: StringNullableFilter
  type: EnumPhotoTypeNullableFilter
  active: BoolFilter
  Story: StoryListRelationFilter
  Group: GroupWhereInput
  groupId: StringNullableFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PhotoWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type PluseCode
  @join__type(graph: PROFILING)
{
  id: String!
  globalCode: String!
  compoundCode: String
}

input PluseCodeCreateNestedOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  connect: PluseCodeWhereUniqueInput
}

input PluseCodeCreateOrConnectWithoutLocationInput
  @join__type(graph: PROFILING)
{
  where: PluseCodeWhereUniqueInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeCreateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: String
  globalCode: String!
  compoundCode: String
}

input PluseCodeOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  globalCode: SortOrder
  compoundCode: SortOrder
  Location: LocationOrderByWithRelationInput
}

input PluseCodeUpdateOneWithoutLocationInput
  @join__type(graph: PROFILING)
{
  create: PluseCodeCreateWithoutLocationInput
  connectOrCreate: PluseCodeCreateOrConnectWithoutLocationInput
  upsert: PluseCodeUpsertWithoutLocationInput
  disconnect: Boolean
  delete: Boolean
  connect: PluseCodeWhereUniqueInput
  update: PluseCodeUpdateWithoutLocationInput
}

input PluseCodeUpdateWithoutLocationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  globalCode: StringFieldUpdateOperationsInput
  compoundCode: NullableStringFieldUpdateOperationsInput
}

input PluseCodeUpsertWithoutLocationInput
  @join__type(graph: PROFILING)
{
  update: PluseCodeUpdateWithoutLocationInput!
  create: PluseCodeCreateWithoutLocationInput!
}

input PluseCodeWhereInput
  @join__type(graph: PROFILING)
{
  AND: [PluseCodeWhereInput!]
  OR: [PluseCodeWhereInput!]
  NOT: [PluseCodeWhereInput!]
  id: StringFilter
  globalCode: StringFilter
  compoundCode: StringNullableFilter
  Location: LocationWhereInput
}

input PluseCodeWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

type Profile implements Node
  @join__implements(graph: MANAGING, interface: "Node")
  @join__type(graph: MANAGING, key: "id")
  @join__type(graph: PROFILING, key: "id")
{
  id: String!
  photos(first: Int, last: Int, before: PhotoWhereUniqueInput, after: PhotoWhereUniqueInput): [Photo!]! @join__field(graph: PROFILING)
  Story(first: Int, last: Int, before: StoryWhereUniqueInput, after: StoryWhereUniqueInput): [Story!]! @join__field(graph: PROFILING)
  Credentials: Credentials @join__field(graph: PROFILING)
  Relationships(first: Int, last: Int, before: RelationshipWhereUniqueInput, after: RelationshipWhereUniqueInput): [Relationship!]! @join__field(graph: PROFILING)
  Personal: Personal @join__field(graph: PROFILING)
  Venue: Venue @join__field(graph: PROFILING)
  ProfileType: ProfileType! @join__field(graph: PROFILING)
  IdentifiableInformation: IdentifiableInformation @join__field(graph: PROFILING)
  DetailInformation: DetailInformation @join__field(graph: PROFILING)
  ProfileSearchesService: ProfileSearchesService @join__field(graph: PROFILING)
  createdAt: DateTime! @join__field(graph: PROFILING)
  updatedAt: DateTime! @join__field(graph: PROFILING)
}

input ProfileArgs
  @join__type(graph: PROFILING)
{
  Phone: PhoneInput
  email: String
  username: String
}

input ProfileCreateDeviceManagerInput
  @join__type(graph: PROFILING)
{
  set: [String!]
}

input ProfileCreateManyChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateManyDeviceManagerInput
}

input ProfileCreateManyChatroomInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [ProfileCreateManyChatroomInput!]
  skipDuplicates: Boolean
}

input ProfileCreateManyDeviceManagerInput
  @join__type(graph: PROFILING)
{
  set: [String!]
}

input ProfileCreateNestedManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: [ProfileCreateWithoutChatroomInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  createMany: ProfileCreateManyChatroomInputEnvelope
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedManyWithoutGroupInput
  @join__type(graph: PROFILING)
{
  create: [ProfileCreateWithoutGroupInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateNestedOneWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutStoryInput
  connectOrCreate: ProfileCreateOrConnectWithoutStoryInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateOrConnectWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileCreateOrConnectWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutGroupInput!
}

input ProfileCreateOrConnectWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileCreateOrConnectWithoutStoryInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutStoryInput!
}

input ProfileCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileCreateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Story: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Group: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
}

input ProfileCreateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Story: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedOneWithoutProfilesInput
}

input ProfileCreateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Story: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Group: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedOneWithoutProfilesInput
}

input ProfileCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  Story: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Group: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedOneWithoutProfilesInput
}

input ProfileCreateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  Venue: VenueCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Group: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedOneWithoutProfilesInput
}

input ProfileCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
  ProfileType: ProfileType
  createdAt: DateTime
  updatedAt: DateTime
  DeviceManager: ProfileCreateDeviceManagerInput
  Personal: PersonalCreateNestedOneWithoutProfileInput
  DetailInformation: DetailInformationCreateNestedOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationCreateNestedOneWithoutProfileInput
  photos: PhotoCreateNestedManyWithoutProfileInput
  Story: StoryCreateNestedManyWithoutProfileInput
  Relationships: RelationshipCreateNestedManyWithoutProfileInput
  Group: GroupCreateNestedManyWithoutProfileInput
  Credentials: CredentialsCreateNestedOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  Chatroom: ChatroomCreateNestedOneWithoutProfilesInput
}

input ProfileListRelationFilter
  @join__type(graph: PROFILING)
{
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input ProfileOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input ProfileOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  bfsprofileid: SortOrder
  DeviceManager: SortOrder
  Personal: PersonalOrderByWithRelationInput
  Venue: VenueOrderByWithRelationInput
  DetailInformation: DetailInformationOrderByWithRelationInput
  IdentifiableInformation: IdentifiableInformationOrderByWithRelationInput
  photos: PhotoOrderByRelationAggregateInput
  Story: StoryOrderByRelationAggregateInput
  Relationships: RelationshipOrderByRelationAggregateInput
  Group: GroupOrderByRelationAggregateInput
  Credentials: CredentialsOrderByWithRelationInput
  ProfileSearchesService: ProfileSearchesServiceOrderByWithRelationInput
  ProfileType: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Chatroom: ChatroomOrderByWithRelationInput
  chatroomId: SortOrder
}

type Profiles
  @join__type(graph: PROFILING)
{
  Profiles: [Profile]
}

input ProfileScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileScalarWhereInput!]
  OR: [ProfileScalarWhereInput!]
  NOT: [ProfileScalarWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  ProfileType: EnumProfileTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  chatroomId: StringNullableFilter
}

type ProfileSearchesService
  @join__type(graph: PROFILING)
{
  id: String!
  searches: [Json!]!
}

input ProfileSearchesServiceCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: ProfileSearchesServiceCreateWithoutProfileInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  connect: ProfileSearchesServiceWhereUniqueInput
}

input ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: ProfileSearchesServiceWhereUniqueInput!
  create: ProfileSearchesServiceCreateWithoutProfileInput!
}

input ProfileSearchesServiceCreatesearchesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
}

input ProfileSearchesServiceCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  searches: ProfileSearchesServiceCreatesearchesInput
}

input ProfileSearchesServiceOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  searches: SortOrder
}

input ProfileSearchesServiceUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: ProfileSearchesServiceCreateWithoutProfileInput
  connectOrCreate: ProfileSearchesServiceCreateOrConnectWithoutProfileInput
  upsert: ProfileSearchesServiceUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileSearchesServiceWhereUniqueInput
  update: ProfileSearchesServiceUpdateWithoutProfileInput
}

input ProfileSearchesServiceUpdatesearchesInput
  @join__type(graph: PROFILING)
{
  set: [Json!]
  push: Json
}

input ProfileSearchesServiceUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  searches: ProfileSearchesServiceUpdatesearchesInput
}

input ProfileSearchesServiceUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: ProfileSearchesServiceUpdateWithoutProfileInput!
  create: ProfileSearchesServiceCreateWithoutProfileInput!
}

input ProfileSearchesServiceWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileSearchesServiceWhereInput!]
  OR: [ProfileSearchesServiceWhereInput!]
  NOT: [ProfileSearchesServiceWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  searches: JsonNullableListFilter
}

input ProfileSearchesServiceWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
}

enum ProfileType
  @join__type(graph: PROFILING)
{
  PERSONAL
  VENUE
  GUEST
}

type ProfileTypesResponse
  @join__type(graph: PROFILING)
{
  username: [Profile]
  phone: [Profile]
  email: [Profile]
}

input ProfileUpdateDeviceManagerInput
  @join__type(graph: PROFILING)
{
  set: [String!]
  push: String
}

input ProfileUpdateInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
}

input ProfileUpdateManyWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  create: [ProfileCreateWithoutChatroomInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutChatroomInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutChatroomInput!]
  createMany: ProfileCreateManyChatroomInputEnvelope
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutChatroomInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutChatroomInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithoutGroupInput
  @join__type(graph: PROFILING)
{
  create: [ProfileCreateWithoutGroupInput!]
  connectOrCreate: [ProfileCreateOrConnectWithoutGroupInput!]
  upsert: [ProfileUpsertWithWhereUniqueWithoutGroupInput!]
  set: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  connect: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [ProfileUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [ProfileScalarWhereInput!]
}

input ProfileUpdateManyWithWhereWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateManyWithWhereWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: ProfileScalarWhereInput!
  data: ProfileUpdateManyMutationInput!
}

input ProfileUpdateOneRequiredWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPersonalInput
  connectOrCreate: ProfileCreateOrConnectWithoutPersonalInput
  upsert: ProfileUpsertWithoutPersonalInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPersonalInput
}

input ProfileUpdateOneRequiredWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutVenueInput
  connectOrCreate: ProfileCreateOrConnectWithoutVenueInput
  upsert: ProfileUpsertWithoutVenueInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutVenueInput
}

input ProfileUpdateOneWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutPhotosInput
  connectOrCreate: ProfileCreateOrConnectWithoutPhotosInput
  upsert: ProfileUpsertWithoutPhotosInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutPhotosInput
}

input ProfileUpdateOneWithoutStoryInput
  @join__type(graph: PROFILING)
{
  create: ProfileCreateWithoutStoryInput
  connectOrCreate: ProfileCreateOrConnectWithoutStoryInput
  upsert: ProfileUpsertWithoutStoryInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutStoryInput
}

input ProfileUpdateWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
}

input ProfileUpdateWithoutGroupInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateWithoutStoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  Venue: VenueUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  bfsprofileid: StringFieldUpdateOperationsInput
  ProfileType: EnumProfileTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  DeviceManager: ProfileUpdateDeviceManagerInput
  Personal: PersonalUpdateOneWithoutProfileInput
  DetailInformation: DetailInformationUpdateOneWithoutProfileInput
  IdentifiableInformation: IdentifiableInformationUpdateOneWithoutProfileInput
  photos: PhotoUpdateManyWithoutProfileInput
  Story: StoryUpdateManyWithoutProfileInput
  Relationships: RelationshipUpdateManyWithoutProfileInput
  Group: GroupUpdateManyWithoutProfileInput
  Credentials: CredentialsUpdateOneWithoutProfileInput
  ProfileSearchesService: ProfileSearchesServiceUpdateOneWithoutProfileInput
  Chatroom: ChatroomUpdateOneWithoutProfilesInput
}

input ProfileUpdateWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutChatroomInput!
}

input ProfileUpdateWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutGroupInput!
}

input ProfileUpsertWithoutPersonalInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutPersonalInput!
  create: ProfileCreateWithoutPersonalInput!
}

input ProfileUpsertWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutPhotosInput!
  create: ProfileCreateWithoutPhotosInput!
}

input ProfileUpsertWithoutStoryInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutStoryInput!
  create: ProfileCreateWithoutStoryInput!
}

input ProfileUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: ProfileUpdateWithoutVenueInput!
  create: ProfileCreateWithoutVenueInput!
}

input ProfileUpsertWithWhereUniqueWithoutChatroomInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutChatroomInput!
  create: ProfileCreateWithoutChatroomInput!
}

input ProfileUpsertWithWhereUniqueWithoutGroupInput
  @join__type(graph: PROFILING)
{
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutGroupInput!
  create: ProfileCreateWithoutGroupInput!
}

input ProfileWhereInput
  @join__type(graph: PROFILING)
{
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: StringFilter
  bfsprofileid: StringFilter
  DeviceManager: StringNullableListFilter
  Personal: PersonalWhereInput
  Venue: VenueWhereInput
  DetailInformation: DetailInformationWhereInput
  IdentifiableInformation: IdentifiableInformationWhereInput
  photos: PhotoListRelationFilter
  Story: StoryListRelationFilter
  Relationships: RelationshipListRelationFilter
  Group: GroupListRelationFilter
  Credentials: CredentialsWhereInput
  ProfileSearchesService: ProfileSearchesServiceWhereInput
  ProfileType: EnumProfileTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Chatroom: ChatroomWhereInput
  chatroomId: StringNullableFilter
}

input ProfileWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  bfsprofileid: String
}

type Query
  @join__type(graph: MANAGING)
  @join__type(graph: PROFILING)
{
  device(where: DeviceWhereUniqueInput!): Device @join__field(graph: MANAGING)
  getADeviceManager: DeviceManagerDeviceProfilesResponseUnion @join__field(graph: MANAGING)
  authorizedProfiles(where: AuthorizedProfilesWhereInput): AuthorizedProfilesResponseUnion @join__field(graph: PROFILING)
  checkUsername(username: String!): Boolean @join__field(graph: PROFILING)
  loginPassword(username: String!, password: String!): Boolean @join__field(graph: PROFILING)
  documents(where: DocumentWhereInput, orderBy: [DocumentOrderByWithRelationInput!], first: Int, last: Int, before: DocumentWhereUniqueInput, after: DocumentWhereUniqueInput): [Document!]! @join__field(graph: PROFILING)
  IdentifiableInformations(where: IdentifiableInformationWhereInput, first: Int, last: Int, before: IdentifiableInformationWhereUniqueInput, after: IdentifiableInformationWhereUniqueInput): [IdentifiableInformation!]! @join__field(graph: PROFILING)
  Phones(where: PhoneWhereInput, first: Int, last: Int, before: PhoneWhereUniqueInput, after: PhoneWhereUniqueInput): [Phone!]! @join__field(graph: PROFILING)
  Emails(where: EmailWhereInput, first: Int, last: Int, before: EmailWhereUniqueInput, after: EmailWhereUniqueInput): [Email!]! @join__field(graph: PROFILING)
  Personals(where: PersonalWhereInput, first: Int, last: Int, before: PersonalWhereUniqueInput, after: PersonalWhereUniqueInput): [Personal!]! @join__field(graph: PROFILING)
  emojimood(where: EmojimoodWhereUniqueInput!): Emojimood @join__field(graph: PROFILING)
  emojimoods(where: EmojimoodWhereInput, orderBy: [EmojimoodOrderByWithRelationInput!], first: Int, last: Int, before: EmojimoodWhereUniqueInput, after: EmojimoodWhereUniqueInput): [Emojimood!]! @join__field(graph: PROFILING)
  getLiveVenueTotals(profileIdVenue: String!): LiveVenueTotals @join__field(graph: PROFILING)
  profile(where: ProfileWhereUniqueInput!): Profile @join__field(graph: PROFILING)
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], first: Int, last: Int, before: ProfileWhereUniqueInput, after: ProfileWhereUniqueInput): [Profile!]! @join__field(graph: PROFILING)
  venue(where: VenueWhereUniqueInput!): Venue @join__field(graph: PROFILING)
  venues(where: VenueWhereInput, orderBy: [VenueOrderByWithRelationInput!], first: Int, last: Int, before: VenueWhereUniqueInput, after: VenueWhereUniqueInput): [Venue!]! @join__field(graph: PROFILING)
  checkPhoneNumberAvailable(number: String): Int @join__field(graph: PROFILING)
  checkEmailAvailable(email: String): Int @join__field(graph: PROFILING)
  sendDynamicTempalteDataEmail: Boolean @join__field(graph: PROFILING)
  H3IndexLatLng(cell: String!): [Float] @join__field(graph: PROFILING)
  H3IndexGrid(cell: String!, ringSize: Int = 1): [String] @join__field(graph: PROFILING)
  venuesNearby(latitude: Float!, longitude: Float!, kRing: Int): [Profile] @join__field(graph: PROFILING)
  searchAddressGoogleAutocomplete(where: GooglePlaceAutocompleteInput!): GooglePlaceAutocompleteReturn @join__field(graph: PROFILING)
  getAllCountries: [Json] @join__field(graph: PROFILING)
  getAllStatesByCountry(country: String!): [Json] @join__field(graph: PROFILING)
  getAllCitiesByState(country: String!, state: String!): [Json] @join__field(graph: PROFILING)
  searchAreaCity(search: String!, country: String!): Json @join__field(graph: PROFILING)
  story(where: StoryWhereUniqueInput!): Story @join__field(graph: PROFILING)
}

enum QueryMode
  @join__type(graph: PROFILING)
{
  default
  insensitive
}

union RefreshDeviceManagerResponseUnion
  @join__type(graph: MANAGING)
 = DeviceManager | Error | Success

input RefreshTokenCreateNestedOneWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  create: RefreshTokenCreateWithoutDeviceProfileInput
  connectOrCreate: RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  connect: RefreshTokenWhereUniqueInput
}

input RefreshTokenCreateOrConnectWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  where: RefreshTokenWhereUniqueInput!
  create: RefreshTokenCreateWithoutDeviceProfileInput!
}

input RefreshTokenCreateWithoutDeviceProfileInput
  @join__type(graph: MANAGING)
{
  token: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input RefreshTokenWhereUniqueInput
  @join__type(graph: MANAGING)
{
  id: Int
  token: String
  DeviceProfileId: Int
}

type Relationship
  @join__type(graph: PROFILING)
{
  id: String!
  venueMetAt: String
  Profile: Profile
  status: [Status!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RelationshipCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  friend: String!
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
  status: RelationshipCreateManystatusInput
}

input RelationshipCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [RelationshipCreateManyProfileInput!]
  skipDuplicates: Boolean
}

input RelationshipCreateManystatusInput
  @join__type(graph: PROFILING)
{
  set: [Status!]
}

input RelationshipCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [RelationshipCreateWithoutProfileInput!]
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  connect: [RelationshipWhereUniqueInput!]
}

input RelationshipCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipCreatestatusInput
  @join__type(graph: PROFILING)
{
  set: [Status!]
}

input RelationshipCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  friend: String!
  venueMetAt: String
  createdAt: DateTime
  updatedAt: DateTime
  status: RelationshipCreatestatusInput
}

input RelationshipListRelationFilter
  @join__type(graph: PROFILING)
{
  every: RelationshipWhereInput
  some: RelationshipWhereInput
  none: RelationshipWhereInput
}

input RelationshipOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input RelationshipScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [RelationshipScalarWhereInput!]
  OR: [RelationshipScalarWhereInput!]
  NOT: [RelationshipScalarWhereInput!]
  id: StringFilter
  profileId: StringNullableFilter
  friend: StringFilter
  status: EnumStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RelationshipUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  friend: StringFieldUpdateOperationsInput
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  status: RelationshipUpdatestatusInput
}

input RelationshipUpdateManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [RelationshipCreateWithoutProfileInput!]
  connectOrCreate: [RelationshipCreateOrConnectWithoutProfileInput!]
  upsert: [RelationshipUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: RelationshipCreateManyProfileInputEnvelope
  set: [RelationshipWhereUniqueInput!]
  disconnect: [RelationshipWhereUniqueInput!]
  delete: [RelationshipWhereUniqueInput!]
  connect: [RelationshipWhereUniqueInput!]
  update: [RelationshipUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [RelationshipUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [RelationshipScalarWhereInput!]
}

input RelationshipUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipScalarWhereInput!
  data: RelationshipUpdateManyMutationInput!
}

input RelationshipUpdatestatusInput
  @join__type(graph: PROFILING)
{
  set: [Status!]
  push: Status
}

input RelationshipUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  friend: StringFieldUpdateOperationsInput
  venueMetAt: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  status: RelationshipUpdatestatusInput
}

input RelationshipUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  data: RelationshipUpdateWithoutProfileInput!
}

input RelationshipUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: RelationshipWhereUniqueInput!
  update: RelationshipUpdateWithoutProfileInput!
  create: RelationshipCreateWithoutProfileInput!
}

input RelationshipWhereInput
  @join__type(graph: PROFILING)
{
  AND: [RelationshipWhereInput!]
  OR: [RelationshipWhereInput!]
  NOT: [RelationshipWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  friend: StringFilter
  status: EnumStatusNullableListFilter
  venueMetAt: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RelationshipWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum SortOrder
  @join__type(graph: PROFILING)
{
  asc
  desc
}

enum Status
  @join__type(graph: PROFILING)
{
  FRIENDS
  DATING
}

type Story
  @join__type(graph: PROFILING)
{
  id: String!
  emojimood: Emojimood
  photos(first: Int, last: Int, before: PhotoWhereUniqueInput, after: PhotoWhereUniqueInput): [Photo!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StoryCreateManyProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  emojimoodId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input StoryCreateManyProfileInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [StoryCreateManyProfileInput!]
  skipDuplicates: Boolean
}

input StoryCreateNestedManyWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: [StoryCreateWithoutPhotosInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutPhotosInput!]
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateNestedManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [StoryCreateWithoutProfileInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  connect: [StoryWhereUniqueInput!]
}

input StoryCreateOrConnectWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryCreateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  emojimood: EmojimoodCreateNestedOneWithoutStoryInput
  Profile: ProfileCreateNestedOneWithoutStoryInput
}

input StoryCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  photos: PhotoCreateNestedManyWithoutStoryInput
  emojimood: EmojimoodCreateNestedOneWithoutStoryInput
}

input StoryListRelationFilter
  @join__type(graph: PROFILING)
{
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input StoryOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input StoryScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  NOT: [StoryScalarWhereInput!]
  id: StringFilter
  emojimoodId: IntNullableFilter
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoryUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  create: [StoryCreateWithoutPhotosInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutPhotosInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutPhotosInput!]
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutPhotosInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutPhotosInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: [StoryCreateWithoutProfileInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutProfileInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutProfileInput!]
  createMany: StoryCreateManyProfileInputEnvelope
  set: [StoryWhereUniqueInput!]
  disconnect: [StoryWhereUniqueInput!]
  delete: [StoryWhereUniqueInput!]
  connect: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutProfileInput!]
  deleteMany: [StoryScalarWhereInput!]
}

input StoryUpdateManyWithWhereWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateManyWithWhereWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryScalarWhereInput!
  data: StoryUpdateManyMutationInput!
}

input StoryUpdateWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  emojimood: EmojimoodUpdateOneWithoutStoryInput
  Profile: ProfileUpdateOneWithoutStoryInput
}

input StoryUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  photos: PhotoUpdateManyWithoutStoryInput
  emojimood: EmojimoodUpdateOneWithoutStoryInput
}

input StoryUpdateWithWhereUniqueWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutPhotosInput!
}

input StoryUpdateWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  data: StoryUpdateWithoutProfileInput!
}

input StoryUpsertWithWhereUniqueWithoutPhotosInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutPhotosInput!
  create: StoryCreateWithoutPhotosInput!
}

input StoryUpsertWithWhereUniqueWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: StoryWhereUniqueInput!
  update: StoryUpdateWithoutProfileInput!
  create: StoryCreateWithoutProfileInput!
}

input StoryWhereInput
  @join__type(graph: PROFILING)
{
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: StringFilter
  photos: PhotoListRelationFilter
  emojimood: EmojimoodWhereInput
  emojimoodId: IntNullableFilter
  Profile: ProfileWhereInput
  profileId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoryWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input StringFieldUpdateOperationsInput
  @join__type(graph: PROFILING)
{
  set: String
}

input StringFilter
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter
  @join__type(graph: PROFILING)
{
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input StringNullableListFilter
  @join__type(graph: PROFILING)
{
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Success
  @join__type(graph: MANAGING)
{
  type: String
  successCode: String
  message: String
}

type SwitchLoginResponse
  @join__type(graph: PROFILING)
{
  refreshToken: String
  authorization: String
  Profile: Profile
}

type Tag
  @join__type(graph: PROFILING)
{
  id: Int!
  name: String!
  emoji: String
}

input TagCreateNestedManyWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  create: [TagCreateWithoutDetailInformationInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateOrConnectWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagCreateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  name: String!
  type: TagType!
  emoji: String
}

input TagListRelationFilter
  @join__type(graph: PROFILING)
{
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input TagScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  type: EnumTagTypeFilter
  emoji: StringNullableFilter
}

enum TagType
  @join__type(graph: PROFILING)
{
  ACTIVITY
  TYPE
}

input TagUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  type: EnumTagTypeFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input TagUpdateManyWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  create: [TagCreateWithoutDetailInformationInput!]
  connectOrCreate: [TagCreateOrConnectWithoutDetailInformationInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutDetailInformationInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutDetailInformationInput!]
  updateMany: [TagUpdateManyWithWhereWithoutDetailInformationInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpdateManyWithWhereWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagUpdateWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  name: StringFieldUpdateOperationsInput
  type: EnumTagTypeFieldUpdateOperationsInput
  emoji: NullableStringFieldUpdateOperationsInput
}

input TagUpdateWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutDetailInformationInput!
}

input TagUpsertWithWhereUniqueWithoutDetailInformationInput
  @join__type(graph: PROFILING)
{
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutDetailInformationInput!
  create: TagCreateWithoutDetailInformationInput!
}

input TagWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  type: EnumTagTypeFilter
  emoji: StringNullableFilter
  DetailInformation: DetailInformationListRelationFilter
}

input TagWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: Int
}

type TotaledOut
  @join__type(graph: PROFILING)
{
  id: String!
  personalProfileId: String!
  venueProfileId: String!
  VenueStats: VenueStats
  venueStatsId: String
  PersonalStats: PersonalStats
  personalStatsId: String
  LiveOutVenue: LiveOutVenue
  liveOutVenueId: String
  LiveOutPersonal: LiveOutPersonal
  liveOutPersonalId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TotaledOutCreateManyLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyLiveOutPersonalInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [TotaledOutCreateManyLiveOutPersonalInput!]
  skipDuplicates: Boolean
}

input TotaledOutCreateManyLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  personalStatsId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyLiveOutVenueInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [TotaledOutCreateManyLiveOutVenueInput!]
  skipDuplicates: Boolean
}

input TotaledOutCreateManyPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  venueStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyPersonalStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [TotaledOutCreateManyPersonalStatsInput!]
  skipDuplicates: Boolean
}

input TotaledOutCreateManyVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  personalStatsId: String
  liveOutVenueId: String
  leftAt: DateTime
  liveOutPersonalId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TotaledOutCreateManyVenueStatsInputEnvelope
  @join__type(graph: PROFILING)
{
  data: [TotaledOutCreateManyVenueStatsInput!]
  skipDuplicates: Boolean
}

input TotaledOutCreateNestedManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutLiveOutPersonalInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutPersonalInput!]
  createMany: TotaledOutCreateManyLiveOutPersonalInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutLiveOutVenueInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutVenueInput!]
  createMany: TotaledOutCreateManyLiveOutVenueInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutPersonalStatsInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutPersonalStatsInput!]
  createMany: TotaledOutCreateManyPersonalStatsInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateNestedManyWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutVenueStatsInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutVenueStatsInput!]
  createMany: TotaledOutCreateManyVenueStatsInputEnvelope
  connect: [TotaledOutWhereUniqueInput!]
}

input TotaledOutCreateOrConnectWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutLiveOutPersonalInput!
}

input TotaledOutCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutLiveOutVenueInput!
}

input TotaledOutCreateOrConnectWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutPersonalStatsInput!
}

input TotaledOutCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  create: TotaledOutCreateWithoutVenueStatsInput!
}

input TotaledOutCreateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
}

input TotaledOutCreateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
}

input TotaledOutCreateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  VenueStats: VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
}

input TotaledOutCreateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  personalProfileId: String!
  venueProfileId: String!
  leftAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  PersonalStats: PersonalStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutTotaledInput
  LiveOutPersonal: LiveOutPersonalCreateNestedOneWithoutTotaledInput
}

input TotaledOutListRelationFilter
  @join__type(graph: PROFILING)
{
  every: TotaledOutWhereInput
  some: TotaledOutWhereInput
  none: TotaledOutWhereInput
}

input TotaledOutOrderByRelationAggregateInput
  @join__type(graph: PROFILING)
{
  _count: SortOrder
}

input TotaledOutScalarWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TotaledOutScalarWhereInput!]
  OR: [TotaledOutScalarWhereInput!]
  NOT: [TotaledOutScalarWhereInput!]
  id: StringFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  venueStatsId: StringNullableFilter
  personalStatsId: StringNullableFilter
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TotaledOutUpdateManyMutationInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TotaledOutUpdateManyWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutLiveOutPersonalInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutPersonalInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput!]
  createMany: TotaledOutCreateManyLiveOutPersonalInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutLiveOutPersonalInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutLiveOutVenueInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutLiveOutVenueInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutLiveOutVenueInput!]
  createMany: TotaledOutCreateManyLiveOutVenueInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutLiveOutVenueInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutLiveOutVenueInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutPersonalStatsInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutPersonalStatsInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutPersonalStatsInput!]
  createMany: TotaledOutCreateManyPersonalStatsInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutPersonalStatsInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutPersonalStatsInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: [TotaledOutCreateWithoutVenueStatsInput!]
  connectOrCreate: [TotaledOutCreateOrConnectWithoutVenueStatsInput!]
  upsert: [TotaledOutUpsertWithWhereUniqueWithoutVenueStatsInput!]
  createMany: TotaledOutCreateManyVenueStatsInputEnvelope
  set: [TotaledOutWhereUniqueInput!]
  disconnect: [TotaledOutWhereUniqueInput!]
  delete: [TotaledOutWhereUniqueInput!]
  connect: [TotaledOutWhereUniqueInput!]
  update: [TotaledOutUpdateWithWhereUniqueWithoutVenueStatsInput!]
  updateMany: [TotaledOutUpdateManyWithWhereWithoutVenueStatsInput!]
  deleteMany: [TotaledOutScalarWhereInput!]
}

input TotaledOutUpdateManyWithWhereWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateManyWithWhereWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutScalarWhereInput!
  data: TotaledOutUpdateManyMutationInput!
}

input TotaledOutUpdateWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledInput
}

input TotaledOutUpdateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledInput
}

input TotaledOutUpdateWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  VenueStats: VenueStatsUpdateOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledInput
}

input TotaledOutUpdateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  personalProfileId: StringFieldUpdateOperationsInput
  venueProfileId: StringFieldUpdateOperationsInput
  leftAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  PersonalStats: PersonalStatsUpdateOneWithoutTotaledVenueHistoryInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutTotaledInput
  LiveOutPersonal: LiveOutPersonalUpdateOneWithoutTotaledInput
}

input TotaledOutUpdateWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutLiveOutPersonalInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutLiveOutVenueInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutPersonalStatsInput!
}

input TotaledOutUpdateWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  data: TotaledOutUpdateWithoutVenueStatsInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutLiveOutPersonalInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutLiveOutPersonalInput!
  create: TotaledOutCreateWithoutLiveOutPersonalInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutLiveOutVenueInput!
  create: TotaledOutCreateWithoutLiveOutVenueInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutPersonalStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutPersonalStatsInput!
  create: TotaledOutCreateWithoutPersonalStatsInput!
}

input TotaledOutUpsertWithWhereUniqueWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: TotaledOutWhereUniqueInput!
  update: TotaledOutUpdateWithoutVenueStatsInput!
  create: TotaledOutCreateWithoutVenueStatsInput!
}

input TotaledOutWhereInput
  @join__type(graph: PROFILING)
{
  AND: [TotaledOutWhereInput!]
  OR: [TotaledOutWhereInput!]
  NOT: [TotaledOutWhereInput!]
  id: StringFilter
  personalProfileId: StringFilter
  venueProfileId: StringFilter
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringNullableFilter
  PersonalStats: PersonalStatsWhereInput
  personalStatsId: StringNullableFilter
  LiveOutVenue: LiveOutVenueWhereInput
  liveOutVenueId: StringNullableFilter
  leftAt: DateTimeNullableFilter
  LiveOutPersonal: LiveOutPersonalWhereInput
  liveOutPersonalId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TotaledOutWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

enum TypeOfDocument
  @join__type(graph: PROFILING)
{
  PROFILE_PRIVACY_POLICY
  PROFILE_TERMS_OF_SERVICE
}

union UpdateProfileResponse
  @join__type(graph: PROFILING)
 = ErrorProfiling | Profile

type Venue
  @join__type(graph: PROFILING)
{
  id: String!
  Profile: Profile!
  profileId: String!
  Location: Location
  VenueStats: VenueStats!
  LiveOutVenue: LiveOutVenue
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueCreateNestedOneWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  connect: VenueWhereUniqueInput
}

input VenueCreateNestedOneWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  connect: VenueWhereUniqueInput
}

input VenueCreateOrConnectWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueCreateOrConnectWithoutProfileInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueCreateOrConnectWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  where: VenueWhereUniqueInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueCreateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  Location: LocationCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
  VenueStats: VenueStatsCreateNestedOneWithoutVenueInput!
}

input VenueCreateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  Profile: ProfileCreateNestedOneWithoutVenueInput!
  Location: LocationCreateNestedOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueCreateNestedOneWithoutVenueInput
}

input VenueOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Profile: ProfileOrderByWithRelationInput
  profileId: SortOrder
  name: SortOrder
  Location: LocationOrderByWithRelationInput
  LiveOutVenue: LiveOutVenueOrderByWithRelationInput
  VenueStats: VenueStatsOrderByWithRelationInput
  venueStatsId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type VenueStats
  @join__type(graph: PROFILING)
{
  id: String!
  joinedVenueHistory(first: Int, last: Int, before: JoinedOutWhereUniqueInput, after: JoinedOutWhereUniqueInput): [JoinedOut!]!
  totaledVenueHistory(first: Int, last: Int, before: TotaledOutWhereUniqueInput, after: TotaledOutWhereUniqueInput): [TotaledOut!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input VenueStatsCreateNestedOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateNestedOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateNestedOneWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
}

input VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput!
}

input VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput!
}

input VenueStatsCreateOrConnectWithoutVenueInput
  @join__type(graph: PROFILING)
{
  where: VenueStatsWhereUniqueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsCreateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutVenueStatsInput
}

input VenueStatsCreateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  Venue: VenueCreateNestedOneWithoutVenueStatsInput
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutVenueStatsInput
}

input VenueStatsCreateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  joinedVenueHistory: JoinedOutCreateNestedManyWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutCreateNestedManyWithoutVenueStatsInput
}

input VenueStatsOrderByWithRelationInput
  @join__type(graph: PROFILING)
{
  id: SortOrder
  Venue: VenueOrderByWithRelationInput
  joinedVenueHistory: JoinedOutOrderByRelationAggregateInput
  totaledVenueHistory: TotaledOutOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input VenueStatsUpdateOneRequiredWithoutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutVenueInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutVenueInput
  upsert: VenueStatsUpsertWithoutVenueInput
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutVenueInput
}

input VenueStatsUpdateOneWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutJoinedVenueHistoryInput
  upsert: VenueStatsUpsertWithoutJoinedVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutJoinedVenueHistoryInput
}

input VenueStatsUpdateOneWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput
  connectOrCreate: VenueStatsCreateOrConnectWithoutTotaledVenueHistoryInput
  upsert: VenueStatsUpsertWithoutTotaledVenueHistoryInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueStatsWhereUniqueInput
  update: VenueStatsUpdateWithoutTotaledVenueHistoryInput
}

input VenueStatsUpdateWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutVenueStatsInput
}

input VenueStatsUpdateWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Venue: VenueUpdateOneWithoutVenueStatsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutVenueStatsInput
}

input VenueStatsUpdateWithoutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  joinedVenueHistory: JoinedOutUpdateManyWithoutVenueStatsInput
  totaledVenueHistory: TotaledOutUpdateManyWithoutVenueStatsInput
}

input VenueStatsUpsertWithoutJoinedVenueHistoryInput
  @join__type(graph: PROFILING)
{
  update: VenueStatsUpdateWithoutJoinedVenueHistoryInput!
  create: VenueStatsCreateWithoutJoinedVenueHistoryInput!
}

input VenueStatsUpsertWithoutTotaledVenueHistoryInput
  @join__type(graph: PROFILING)
{
  update: VenueStatsUpdateWithoutTotaledVenueHistoryInput!
  create: VenueStatsCreateWithoutTotaledVenueHistoryInput!
}

input VenueStatsUpsertWithoutVenueInput
  @join__type(graph: PROFILING)
{
  update: VenueStatsUpdateWithoutVenueInput!
  create: VenueStatsCreateWithoutVenueInput!
}

input VenueStatsWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VenueStatsWhereInput!]
  OR: [VenueStatsWhereInput!]
  NOT: [VenueStatsWhereInput!]
  id: StringFilter
  Venue: VenueWhereInput
  joinedVenueHistory: JoinedOutListRelationFilter
  totaledVenueHistory: TotaledOutListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VenueStatsWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
}

input VenueUpdateOneRequiredWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutLiveOutVenueInput
  connectOrCreate: VenueCreateOrConnectWithoutLiveOutVenueInput
  upsert: VenueUpsertWithoutLiveOutVenueInput
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutLiveOutVenueInput
}

input VenueUpdateOneWithoutProfileInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutProfileInput
  connectOrCreate: VenueCreateOrConnectWithoutProfileInput
  upsert: VenueUpsertWithoutProfileInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutProfileInput
}

input VenueUpdateOneWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  create: VenueCreateWithoutVenueStatsInput
  connectOrCreate: VenueCreateOrConnectWithoutVenueStatsInput
  upsert: VenueUpsertWithoutVenueStatsInput
  disconnect: Boolean
  delete: Boolean
  connect: VenueWhereUniqueInput
  update: VenueUpdateWithoutVenueStatsInput
}

input VenueUpdateWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueInput
  Location: LocationUpdateOneWithoutVenueInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithoutProfileInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Location: LocationUpdateOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueInput
  VenueStats: VenueStatsUpdateOneRequiredWithoutVenueInput
}

input VenueUpdateWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Profile: ProfileUpdateOneRequiredWithoutVenueInput
  Location: LocationUpdateOneWithoutVenueInput
  LiveOutVenue: LiveOutVenueUpdateOneWithoutVenueInput
}

input VenueUpsertWithoutLiveOutVenueInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutLiveOutVenueInput!
  create: VenueCreateWithoutLiveOutVenueInput!
}

input VenueUpsertWithoutProfileInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutProfileInput!
  create: VenueCreateWithoutProfileInput!
}

input VenueUpsertWithoutVenueStatsInput
  @join__type(graph: PROFILING)
{
  update: VenueUpdateWithoutVenueStatsInput!
  create: VenueCreateWithoutVenueStatsInput!
}

input VenueWhereInput
  @join__type(graph: PROFILING)
{
  AND: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
  id: StringFilter
  Profile: ProfileWhereInput
  profileId: StringFilter
  name: StringNullableFilter
  Location: LocationWhereInput
  LiveOutVenue: LiveOutVenueWhereInput
  VenueStats: VenueStatsWhereInput
  venueStatsId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input VenueWhereUniqueInput
  @join__type(graph: PROFILING)
{
  id: String
  profileId: String
  venueStatsId: String
}